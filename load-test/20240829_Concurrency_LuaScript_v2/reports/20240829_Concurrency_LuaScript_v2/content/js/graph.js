/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 40.0, "minX": 0.0, "maxY": 26560.0, "series": [{"data": [[0.0, 103.0], [0.1, 107.0], [0.2, 204.0], [0.3, 207.0], [0.4, 271.0], [0.5, 303.0], [0.6, 306.0], [0.7, 705.0], [0.8, 1692.0], [0.9, 1951.0], [1.0, 2045.0], [1.1, 2207.0], [1.2, 2278.0], [1.3, 2417.0], [1.4, 2450.0], [1.5, 2554.0], [1.6, 2578.0], [1.7, 2649.0], [1.8, 2724.0], [1.9, 2753.0], [2.0, 2805.0], [2.1, 2845.0], [2.2, 2861.0], [2.3, 2870.0], [2.4, 2930.0], [2.5, 2968.0], [2.6, 2989.0], [2.7, 3010.0], [2.8, 3018.0], [2.9, 3032.0], [3.0, 3052.0], [3.1, 3095.0], [3.2, 3153.0], [3.3, 3164.0], [3.4, 3175.0], [3.5, 3191.0], [3.6, 3207.0], [3.7, 3241.0], [3.8, 3314.0], [3.9, 3329.0], [4.0, 3339.0], [4.1, 3351.0], [4.2, 3362.0], [4.3, 3400.0], [4.4, 3404.0], [4.5, 3416.0], [4.6, 3430.0], [4.7, 3456.0], [4.8, 3492.0], [4.9, 3505.0], [5.0, 3508.0], [5.1, 3511.0], [5.2, 3517.0], [5.3, 3532.0], [5.4, 3539.0], [5.5, 3545.0], [5.6, 3563.0], [5.7, 3577.0], [5.8, 3590.0], [5.9, 3606.0], [6.0, 3628.0], [6.1, 3634.0], [6.2, 3644.0], [6.3, 3657.0], [6.4, 3663.0], [6.5, 3669.0], [6.6, 3680.0], [6.7, 3695.0], [6.8, 3697.0], [6.9, 3710.0], [7.0, 3737.0], [7.1, 3744.0], [7.2, 3750.0], [7.3, 3756.0], [7.4, 3766.0], [7.5, 3778.0], [7.6, 3790.0], [7.7, 3795.0], [7.8, 3815.0], [7.9, 3825.0], [8.0, 3838.0], [8.1, 3841.0], [8.2, 3844.0], [8.3, 3847.0], [8.4, 3852.0], [8.5, 3872.0], [8.6, 3887.0], [8.7, 3901.0], [8.8, 3907.0], [8.9, 3913.0], [9.0, 3917.0], [9.1, 3919.0], [9.2, 3926.0], [9.3, 3934.0], [9.4, 3942.0], [9.5, 3950.0], [9.6, 3953.0], [9.7, 3958.0], [9.8, 3967.0], [9.9, 3972.0], [10.0, 3977.0], [10.1, 3984.0], [10.2, 3987.0], [10.3, 3988.0], [10.4, 3990.0], [10.5, 3996.0], [10.6, 4002.0], [10.7, 4011.0], [10.8, 4017.0], [10.9, 4018.0], [11.0, 4031.0], [11.1, 4035.0], [11.2, 4036.0], [11.3, 4040.0], [11.4, 4046.0], [11.5, 4052.0], [11.6, 4057.0], [11.7, 4059.0], [11.8, 4069.0], [11.9, 4069.0], [12.0, 4086.0], [12.1, 4092.0], [12.2, 4098.0], [12.3, 4102.0], [12.4, 4105.0], [12.5, 4114.0], [12.6, 4120.0], [12.7, 4123.0], [12.8, 4138.0], [12.9, 4144.0], [13.0, 4150.0], [13.1, 4155.0], [13.2, 4161.0], [13.3, 4165.0], [13.4, 4186.0], [13.5, 4200.0], [13.6, 4206.0], [13.7, 4213.0], [13.8, 4215.0], [13.9, 4220.0], [14.0, 4223.0], [14.1, 4227.0], [14.2, 4241.0], [14.3, 4241.0], [14.4, 4242.0], [14.5, 4245.0], [14.6, 4256.0], [14.7, 4256.0], [14.8, 4265.0], [14.9, 4272.0], [15.0, 4278.0], [15.1, 4283.0], [15.2, 4291.0], [15.3, 4298.0], [15.4, 4300.0], [15.5, 4304.0], [15.6, 4305.0], [15.7, 4310.0], [15.8, 4311.0], [15.9, 4317.0], [16.0, 4320.0], [16.1, 4331.0], [16.2, 4338.0], [16.3, 4346.0], [16.4, 4352.0], [16.5, 4357.0], [16.6, 4362.0], [16.7, 4366.0], [16.8, 4373.0], [16.9, 4377.0], [17.0, 4382.0], [17.1, 4388.0], [17.2, 4396.0], [17.3, 4401.0], [17.4, 4410.0], [17.5, 4412.0], [17.6, 4417.0], [17.7, 4417.0], [17.8, 4427.0], [17.9, 4433.0], [18.0, 4448.0], [18.1, 4451.0], [18.2, 4452.0], [18.3, 4454.0], [18.4, 4466.0], [18.5, 4471.0], [18.6, 4486.0], [18.7, 4495.0], [18.8, 4511.0], [18.9, 4531.0], [19.0, 4535.0], [19.1, 4538.0], [19.2, 4556.0], [19.3, 4562.0], [19.4, 4580.0], [19.5, 4584.0], [19.6, 4605.0], [19.7, 4613.0], [19.8, 4614.0], [19.9, 4634.0], [20.0, 4665.0], [20.1, 4686.0], [20.2, 4693.0], [20.3, 4700.0], [20.4, 4701.0], [20.5, 4729.0], [20.6, 4737.0], [20.7, 4740.0], [20.8, 4755.0], [20.9, 4766.0], [21.0, 4770.0], [21.1, 4782.0], [21.2, 4801.0], [21.3, 4805.0], [21.4, 4808.0], [21.5, 4812.0], [21.6, 4832.0], [21.7, 4840.0], [21.8, 4852.0], [21.9, 4861.0], [22.0, 4876.0], [22.1, 4879.0], [22.2, 4895.0], [22.3, 4895.0], [22.4, 4899.0], [22.5, 4909.0], [22.6, 4913.0], [22.7, 4921.0], [22.8, 4936.0], [22.9, 4943.0], [23.0, 4948.0], [23.1, 4963.0], [23.2, 4983.0], [23.3, 5005.0], [23.4, 5014.0], [23.5, 5015.0], [23.6, 5020.0], [23.7, 5028.0], [23.8, 5039.0], [23.9, 5043.0], [24.0, 5063.0], [24.1, 5068.0], [24.2, 5072.0], [24.3, 5085.0], [24.4, 5091.0], [24.5, 5093.0], [24.6, 5102.0], [24.7, 5113.0], [24.8, 5125.0], [24.9, 5133.0], [25.0, 5151.0], [25.1, 5161.0], [25.2, 5187.0], [25.3, 5191.0], [25.4, 5199.0], [25.5, 5211.0], [25.6, 5221.0], [25.7, 5232.0], [25.8, 5249.0], [25.9, 5254.0], [26.0, 5263.0], [26.1, 5268.0], [26.2, 5278.0], [26.3, 5279.0], [26.4, 5292.0], [26.5, 5301.0], [26.6, 5339.0], [26.7, 5382.0], [26.8, 5390.0], [26.9, 5396.0], [27.0, 5402.0], [27.1, 5404.0], [27.2, 5413.0], [27.3, 5416.0], [27.4, 5431.0], [27.5, 5436.0], [27.6, 5451.0], [27.7, 5458.0], [27.8, 5466.0], [27.9, 5470.0], [28.0, 5473.0], [28.1, 5497.0], [28.2, 5507.0], [28.3, 5516.0], [28.4, 5530.0], [28.5, 5549.0], [28.6, 5550.0], [28.7, 5557.0], [28.8, 5562.0], [28.9, 5563.0], [29.0, 5570.0], [29.1, 5579.0], [29.2, 5583.0], [29.3, 5595.0], [29.4, 5606.0], [29.5, 5611.0], [29.6, 5627.0], [29.7, 5632.0], [29.8, 5637.0], [29.9, 5644.0], [30.0, 5649.0], [30.1, 5657.0], [30.2, 5658.0], [30.3, 5671.0], [30.4, 5677.0], [30.5, 5678.0], [30.6, 5685.0], [30.7, 5704.0], [30.8, 5725.0], [30.9, 5726.0], [31.0, 5742.0], [31.1, 5745.0], [31.2, 5747.0], [31.3, 5759.0], [31.4, 5761.0], [31.5, 5767.0], [31.6, 5777.0], [31.7, 5780.0], [31.8, 5790.0], [31.9, 5799.0], [32.0, 5819.0], [32.1, 5830.0], [32.2, 5850.0], [32.3, 5864.0], [32.4, 5876.0], [32.5, 5882.0], [32.6, 5895.0], [32.7, 5899.0], [32.8, 5904.0], [32.9, 5908.0], [33.0, 5924.0], [33.1, 5937.0], [33.2, 5942.0], [33.3, 5946.0], [33.4, 5969.0], [33.5, 5978.0], [33.6, 5981.0], [33.7, 5982.0], [33.8, 5986.0], [33.9, 5987.0], [34.0, 6000.0], [34.1, 6014.0], [34.2, 6016.0], [34.3, 6028.0], [34.4, 6040.0], [34.5, 6042.0], [34.6, 6055.0], [34.7, 6057.0], [34.8, 6074.0], [34.9, 6087.0], [35.0, 6095.0], [35.1, 6099.0], [35.2, 6103.0], [35.3, 6108.0], [35.4, 6111.0], [35.5, 6116.0], [35.6, 6122.0], [35.7, 6128.0], [35.8, 6134.0], [35.9, 6151.0], [36.0, 6153.0], [36.1, 6165.0], [36.2, 6169.0], [36.3, 6174.0], [36.4, 6176.0], [36.5, 6178.0], [36.6, 6187.0], [36.7, 6200.0], [36.8, 6202.0], [36.9, 6211.0], [37.0, 6226.0], [37.1, 6232.0], [37.2, 6238.0], [37.3, 6246.0], [37.4, 6260.0], [37.5, 6263.0], [37.6, 6263.0], [37.7, 6274.0], [37.8, 6280.0], [37.9, 6295.0], [38.0, 6301.0], [38.1, 6309.0], [38.2, 6314.0], [38.3, 6315.0], [38.4, 6328.0], [38.5, 6329.0], [38.6, 6344.0], [38.7, 6347.0], [38.8, 6364.0], [38.9, 6381.0], [39.0, 6400.0], [39.1, 6402.0], [39.2, 6408.0], [39.3, 6422.0], [39.4, 6426.0], [39.5, 6428.0], [39.6, 6432.0], [39.7, 6439.0], [39.8, 6443.0], [39.9, 6452.0], [40.0, 6465.0], [40.1, 6467.0], [40.2, 6475.0], [40.3, 6483.0], [40.4, 6490.0], [40.5, 6504.0], [40.6, 6507.0], [40.7, 6519.0], [40.8, 6522.0], [40.9, 6525.0], [41.0, 6540.0], [41.1, 6540.0], [41.2, 6546.0], [41.3, 6549.0], [41.4, 6554.0], [41.5, 6561.0], [41.6, 6563.0], [41.7, 6566.0], [41.8, 6571.0], [41.9, 6574.0], [42.0, 6585.0], [42.1, 6587.0], [42.2, 6593.0], [42.3, 6597.0], [42.4, 6603.0], [42.5, 6604.0], [42.6, 6604.0], [42.7, 6612.0], [42.8, 6623.0], [42.9, 6631.0], [43.0, 6633.0], [43.1, 6642.0], [43.2, 6646.0], [43.3, 6651.0], [43.4, 6652.0], [43.5, 6658.0], [43.6, 6663.0], [43.7, 6669.0], [43.8, 6674.0], [43.9, 6680.0], [44.0, 6681.0], [44.1, 6685.0], [44.2, 6689.0], [44.3, 6694.0], [44.4, 6697.0], [44.5, 6701.0], [44.6, 6703.0], [44.7, 6707.0], [44.8, 6714.0], [44.9, 6716.0], [45.0, 6729.0], [45.1, 6733.0], [45.2, 6735.0], [45.3, 6738.0], [45.4, 6741.0], [45.5, 6746.0], [45.6, 6754.0], [45.7, 6758.0], [45.8, 6758.0], [45.9, 6763.0], [46.0, 6770.0], [46.1, 6772.0], [46.2, 6780.0], [46.3, 6787.0], [46.4, 6791.0], [46.5, 6793.0], [46.6, 6802.0], [46.7, 6809.0], [46.8, 6817.0], [46.9, 6822.0], [47.0, 6831.0], [47.1, 6833.0], [47.2, 6838.0], [47.3, 6844.0], [47.4, 6847.0], [47.5, 6853.0], [47.6, 6857.0], [47.7, 6865.0], [47.8, 6866.0], [47.9, 6871.0], [48.0, 6876.0], [48.1, 6886.0], [48.2, 6889.0], [48.3, 6892.0], [48.4, 6897.0], [48.5, 6905.0], [48.6, 6924.0], [48.7, 6927.0], [48.8, 6931.0], [48.9, 6934.0], [49.0, 6939.0], [49.1, 6943.0], [49.2, 6944.0], [49.3, 6945.0], [49.4, 6946.0], [49.5, 6951.0], [49.6, 6964.0], [49.7, 6967.0], [49.8, 6973.0], [49.9, 6977.0], [50.0, 6982.0], [50.1, 6983.0], [50.2, 6988.0], [50.3, 6998.0], [50.4, 6999.0], [50.5, 7003.0], [50.6, 7006.0], [50.7, 7010.0], [50.8, 7011.0], [50.9, 7017.0], [51.0, 7018.0], [51.1, 7020.0], [51.2, 7021.0], [51.3, 7022.0], [51.4, 7035.0], [51.5, 7036.0], [51.6, 7042.0], [51.7, 7047.0], [51.8, 7054.0], [51.9, 7060.0], [52.0, 7065.0], [52.1, 7072.0], [52.2, 7074.0], [52.3, 7077.0], [52.4, 7081.0], [52.5, 7090.0], [52.6, 7100.0], [52.7, 7108.0], [52.8, 7112.0], [52.9, 7118.0], [53.0, 7120.0], [53.1, 7121.0], [53.2, 7130.0], [53.3, 7134.0], [53.4, 7142.0], [53.5, 7146.0], [53.6, 7156.0], [53.7, 7159.0], [53.8, 7165.0], [53.9, 7168.0], [54.0, 7170.0], [54.1, 7172.0], [54.2, 7175.0], [54.3, 7179.0], [54.4, 7184.0], [54.5, 7188.0], [54.6, 7194.0], [54.7, 7198.0], [54.8, 7201.0], [54.9, 7211.0], [55.0, 7211.0], [55.1, 7215.0], [55.2, 7217.0], [55.3, 7233.0], [55.4, 7238.0], [55.5, 7248.0], [55.6, 7251.0], [55.7, 7254.0], [55.8, 7260.0], [55.9, 7266.0], [56.0, 7276.0], [56.1, 7281.0], [56.2, 7287.0], [56.3, 7289.0], [56.4, 7292.0], [56.5, 7299.0], [56.6, 7303.0], [56.7, 7318.0], [56.8, 7321.0], [56.9, 7326.0], [57.0, 7331.0], [57.1, 7336.0], [57.2, 7352.0], [57.3, 7354.0], [57.4, 7370.0], [57.5, 7372.0], [57.6, 7382.0], [57.7, 7387.0], [57.8, 7398.0], [57.9, 7406.0], [58.0, 7411.0], [58.1, 7417.0], [58.2, 7426.0], [58.3, 7439.0], [58.4, 7441.0], [58.5, 7454.0], [58.6, 7457.0], [58.7, 7462.0], [58.8, 7466.0], [58.9, 7472.0], [59.0, 7497.0], [59.1, 7498.0], [59.2, 7505.0], [59.3, 7508.0], [59.4, 7514.0], [59.5, 7517.0], [59.6, 7518.0], [59.7, 7522.0], [59.8, 7529.0], [59.9, 7539.0], [60.0, 7545.0], [60.1, 7551.0], [60.2, 7551.0], [60.3, 7553.0], [60.4, 7564.0], [60.5, 7567.0], [60.6, 7574.0], [60.7, 7585.0], [60.8, 7602.0], [60.9, 7606.0], [61.0, 7616.0], [61.1, 7626.0], [61.2, 7632.0], [61.3, 7644.0], [61.4, 7655.0], [61.5, 7660.0], [61.6, 7669.0], [61.7, 7683.0], [61.8, 7694.0], [61.9, 7700.0], [62.0, 7717.0], [62.1, 7722.0], [62.2, 7730.0], [62.3, 7741.0], [62.4, 7752.0], [62.5, 7758.0], [62.6, 7763.0], [62.7, 7771.0], [62.8, 7790.0], [62.9, 7794.0], [63.0, 7807.0], [63.1, 7825.0], [63.2, 7849.0], [63.3, 7852.0], [63.4, 7864.0], [63.5, 7894.0], [63.6, 7945.0], [63.7, 7958.0], [63.8, 7972.0], [63.9, 7989.0], [64.0, 8023.0], [64.1, 8050.0], [64.2, 8079.0], [64.3, 8114.0], [64.4, 8122.0], [64.5, 8172.0], [64.6, 8191.0], [64.7, 8200.0], [64.8, 8221.0], [64.9, 8246.0], [65.0, 8317.0], [65.1, 8320.0], [65.2, 8392.0], [65.3, 8409.0], [65.4, 8445.0], [65.5, 8454.0], [65.6, 8460.0], [65.7, 8490.0], [65.8, 8493.0], [65.9, 8517.0], [66.0, 8539.0], [66.1, 8569.0], [66.2, 8624.0], [66.3, 8644.0], [66.4, 8656.0], [66.5, 8697.0], [66.6, 8714.0], [66.7, 8770.0], [66.8, 8784.0], [66.9, 8796.0], [67.0, 8812.0], [67.1, 8818.0], [67.2, 8820.0], [67.3, 8825.0], [67.4, 8843.0], [67.5, 8885.0], [67.6, 8902.0], [67.7, 8905.0], [67.8, 8914.0], [67.9, 8926.0], [68.0, 8958.0], [68.1, 9012.0], [68.2, 9040.0], [68.3, 9056.0], [68.4, 9086.0], [68.5, 9104.0], [68.6, 9138.0], [68.7, 9172.0], [68.8, 9199.0], [68.9, 9221.0], [69.0, 9241.0], [69.1, 9253.0], [69.2, 9283.0], [69.3, 9308.0], [69.4, 9350.0], [69.5, 9372.0], [69.6, 9441.0], [69.7, 9446.0], [69.8, 9488.0], [69.9, 9506.0], [70.0, 9512.0], [70.1, 9563.0], [70.2, 9576.0], [70.3, 9600.0], [70.4, 9676.0], [70.5, 9756.0], [70.6, 9811.0], [70.7, 9869.0], [70.8, 9966.0], [70.9, 10012.0], [71.0, 10053.0], [71.1, 10102.0], [71.2, 10183.0], [71.3, 10275.0], [71.4, 10336.0], [71.5, 10518.0], [71.6, 10550.0], [71.7, 10653.0], [71.8, 10692.0], [71.9, 10763.0], [72.0, 10808.0], [72.1, 10963.0], [72.2, 11089.0], [72.3, 11125.0], [72.4, 11131.0], [72.5, 11172.0], [72.6, 11208.0], [72.7, 11251.0], [72.8, 11330.0], [72.9, 11339.0], [73.0, 11358.0], [73.1, 11379.0], [73.2, 11393.0], [73.3, 11395.0], [73.4, 11411.0], [73.5, 11438.0], [73.6, 11447.0], [73.7, 11460.0], [73.8, 11465.0], [73.9, 11475.0], [74.0, 11513.0], [74.1, 11530.0], [74.2, 11632.0], [74.3, 11654.0], [74.4, 11663.0], [74.5, 11689.0], [74.6, 11732.0], [74.7, 11736.0], [74.8, 11746.0], [74.9, 11770.0], [75.0, 11776.0], [75.1, 11801.0], [75.2, 11821.0], [75.3, 11833.0], [75.4, 11849.0], [75.5, 11855.0], [75.6, 11883.0], [75.7, 11896.0], [75.8, 11901.0], [75.9, 11928.0], [76.0, 11947.0], [76.1, 11954.0], [76.2, 11965.0], [76.3, 11981.0], [76.4, 12041.0], [76.5, 12083.0], [76.6, 12174.0], [76.7, 12234.0], [76.8, 12322.0], [76.9, 13497.0], [77.0, 14320.0], [77.1, 14550.0], [77.2, 14639.0], [77.3, 14706.0], [77.4, 14744.0], [77.5, 14798.0], [77.6, 14846.0], [77.7, 14899.0], [77.8, 14919.0], [77.9, 14947.0], [78.0, 14972.0], [78.1, 15038.0], [78.2, 15063.0], [78.3, 15091.0], [78.4, 15119.0], [78.5, 15126.0], [78.6, 15135.0], [78.7, 15160.0], [78.8, 15183.0], [78.9, 15223.0], [79.0, 15236.0], [79.1, 15267.0], [79.2, 15277.0], [79.3, 15289.0], [79.4, 15291.0], [79.5, 15304.0], [79.6, 15310.0], [79.7, 15319.0], [79.8, 15328.0], [79.9, 15329.0], [80.0, 15361.0], [80.1, 15397.0], [80.2, 15451.0], [80.3, 15484.0], [80.4, 15498.0], [80.5, 15522.0], [80.6, 15532.0], [80.7, 15559.0], [80.8, 15586.0], [80.9, 15603.0], [81.0, 15625.0], [81.1, 15661.0], [81.2, 15703.0], [81.3, 15705.0], [81.4, 15712.0], [81.5, 15781.0], [81.6, 15809.0], [81.7, 15855.0], [81.8, 15891.0], [81.9, 15898.0], [82.0, 15928.0], [82.1, 16006.0], [82.2, 16076.0], [82.3, 16186.0], [82.4, 16234.0], [82.5, 16255.0], [82.6, 16268.0], [82.7, 16783.0], [82.8, 17372.0], [82.9, 17399.0], [83.0, 17425.0], [83.1, 17438.0], [83.2, 17478.0], [83.3, 17509.0], [83.4, 17539.0], [83.5, 17576.0], [83.6, 17592.0], [83.7, 17641.0], [83.8, 17648.0], [83.9, 17705.0], [84.0, 17746.0], [84.1, 17780.0], [84.2, 17788.0], [84.3, 17806.0], [84.4, 17833.0], [84.5, 17846.0], [84.6, 17915.0], [84.7, 17921.0], [84.8, 17939.0], [84.9, 17946.0], [85.0, 17969.0], [85.1, 17979.0], [85.2, 17980.0], [85.3, 18011.0], [85.4, 18020.0], [85.5, 18029.0], [85.6, 18047.0], [85.7, 18098.0], [85.8, 18119.0], [85.9, 18129.0], [86.0, 18137.0], [86.1, 18161.0], [86.2, 18184.0], [86.3, 18200.0], [86.4, 18221.0], [86.5, 18231.0], [86.6, 18247.0], [86.7, 18269.0], [86.8, 18287.0], [86.9, 18292.0], [87.0, 18298.0], [87.1, 18310.0], [87.2, 18320.0], [87.3, 18336.0], [87.4, 18361.0], [87.5, 18396.0], [87.6, 18418.0], [87.7, 18429.0], [87.8, 18441.0], [87.9, 18533.0], [88.0, 18613.0], [88.1, 18801.0], [88.2, 19563.0], [88.3, 19563.0], [88.4, 19565.0], [88.5, 19573.0], [88.6, 19580.0], [88.7, 19585.0], [88.8, 19604.0], [88.9, 19630.0], [89.0, 19645.0], [89.1, 19654.0], [89.2, 19657.0], [89.3, 19666.0], [89.4, 19672.0], [89.5, 19677.0], [89.6, 19681.0], [89.7, 19693.0], [89.8, 19702.0], [89.9, 19712.0], [90.0, 19722.0], [90.1, 19746.0], [90.2, 19758.0], [90.3, 19777.0], [90.4, 19811.0], [90.5, 19823.0], [90.6, 19829.0], [90.7, 19844.0], [90.8, 19863.0], [90.9, 19869.0], [91.0, 19878.0], [91.1, 19899.0], [91.2, 19905.0], [91.3, 19913.0], [91.4, 19921.0], [91.5, 19950.0], [91.6, 19971.0], [91.7, 19978.0], [91.8, 19983.0], [91.9, 19988.0], [92.0, 19999.0], [92.1, 20004.0], [92.2, 20013.0], [92.3, 20017.0], [92.4, 20049.0], [92.5, 20056.0], [92.6, 20068.0], [92.7, 20179.0], [92.8, 20190.0], [92.9, 20201.0], [93.0, 20207.0], [93.1, 20226.0], [93.2, 20251.0], [93.3, 20255.0], [93.4, 20266.0], [93.5, 20292.0], [93.6, 20342.0], [93.7, 20452.0], [93.8, 20902.0], [93.9, 21011.0], [94.0, 21017.0], [94.1, 21057.0], [94.2, 21093.0], [94.3, 21145.0], [94.4, 21173.0], [94.5, 21215.0], [94.6, 21254.0], [94.7, 21278.0], [94.8, 21316.0], [94.9, 21342.0], [95.0, 21365.0], [95.1, 21375.0], [95.2, 21405.0], [95.3, 21425.0], [95.4, 21434.0], [95.5, 21490.0], [95.6, 21512.0], [95.7, 21546.0], [95.8, 21562.0], [95.9, 21615.0], [96.0, 21636.0], [96.1, 21654.0], [96.2, 21672.0], [96.3, 21711.0], [96.4, 21735.0], [96.5, 21747.0], [96.6, 21758.0], [96.7, 21779.0], [96.8, 21817.0], [96.9, 21820.0], [97.0, 21872.0], [97.1, 21899.0], [97.2, 21939.0], [97.3, 21951.0], [97.4, 22057.0], [97.5, 22087.0], [97.6, 22130.0], [97.7, 22216.0], [97.8, 22256.0], [97.9, 22283.0], [98.0, 22291.0], [98.1, 22347.0], [98.2, 22762.0], [98.3, 26146.0], [98.4, 26165.0], [98.5, 26170.0], [98.6, 26196.0], [98.7, 26209.0], [98.8, 26235.0], [98.9, 26256.0], [99.0, 26283.0], [99.1, 26309.0], [99.2, 26392.0], [99.3, 26407.0], [99.4, 26415.0], [99.5, 26419.0], [99.6, 26448.0], [99.7, 26456.0], [99.8, 26463.0], [99.9, 26469.0], [100.0, 26560.0]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[0.0, 40.0], [0.1, 46.0], [0.2, 48.0], [0.3, 50.0], [0.4, 52.0], [0.5, 52.0], [0.6, 54.0], [0.7, 56.0], [0.8, 61.0], [0.9, 62.0], [1.0, 65.0], [1.1, 71.0], [1.2, 72.0], [1.3, 78.0], [1.4, 80.0], [1.5, 82.0], [1.6, 83.0], [1.7, 87.0], [1.8, 90.0], [1.9, 91.0], [2.0, 94.0], [2.1, 95.0], [2.2, 95.0], [2.3, 97.0], [2.4, 99.0], [2.5, 101.0], [2.6, 104.0], [2.7, 109.0], [2.8, 110.0], [2.9, 113.0], [3.0, 114.0], [3.1, 115.0], [3.2, 117.0], [3.3, 120.0], [3.4, 121.0], [3.5, 123.0], [3.6, 126.0], [3.7, 130.0], [3.8, 132.0], [3.9, 133.0], [4.0, 135.0], [4.1, 136.0], [4.2, 139.0], [4.3, 141.0], [4.4, 142.0], [4.5, 150.0], [4.6, 154.0], [4.7, 154.0], [4.8, 158.0], [4.9, 160.0], [5.0, 164.0], [5.1, 167.0], [5.2, 171.0], [5.3, 176.0], [5.4, 179.0], [5.5, 181.0], [5.6, 191.0], [5.7, 200.0], [5.8, 212.0], [5.9, 214.0], [6.0, 215.0], [6.1, 218.0], [6.2, 219.0], [6.3, 226.0], [6.4, 229.0], [6.5, 230.0], [6.6, 231.0], [6.7, 234.0], [6.8, 242.0], [6.9, 249.0], [7.0, 252.0], [7.1, 256.0], [7.2, 260.0], [7.3, 266.0], [7.4, 267.0], [7.5, 268.0], [7.6, 271.0], [7.7, 274.0], [7.8, 277.0], [7.9, 278.0], [8.0, 279.0], [8.1, 283.0], [8.2, 284.0], [8.3, 285.0], [8.4, 286.0], [8.5, 287.0], [8.6, 289.0], [8.7, 296.0], [8.8, 302.0], [8.9, 304.0], [9.0, 304.0], [9.1, 309.0], [9.2, 310.0], [9.3, 317.0], [9.4, 321.0], [9.5, 329.0], [9.6, 332.0], [9.7, 332.0], [9.8, 336.0], [9.9, 338.0], [10.0, 342.0], [10.1, 345.0], [10.2, 346.0], [10.3, 348.0], [10.4, 352.0], [10.5, 355.0], [10.6, 355.0], [10.7, 358.0], [10.8, 360.0], [10.9, 362.0], [11.0, 363.0], [11.1, 364.0], [11.2, 365.0], [11.3, 373.0], [11.4, 380.0], [11.5, 381.0], [11.6, 384.0], [11.7, 386.0], [11.8, 387.0], [11.9, 389.0], [12.0, 393.0], [12.1, 396.0], [12.2, 401.0], [12.3, 405.0], [12.4, 407.0], [12.5, 409.0], [12.6, 410.0], [12.7, 415.0], [12.8, 421.0], [12.9, 422.0], [13.0, 424.0], [13.1, 426.0], [13.2, 429.0], [13.3, 430.0], [13.4, 434.0], [13.5, 437.0], [13.6, 439.0], [13.7, 442.0], [13.8, 446.0], [13.9, 446.0], [14.0, 448.0], [14.1, 450.0], [14.2, 453.0], [14.3, 457.0], [14.4, 461.0], [14.5, 466.0], [14.6, 468.0], [14.7, 476.0], [14.8, 477.0], [14.9, 478.0], [15.0, 483.0], [15.1, 484.0], [15.2, 489.0], [15.3, 491.0], [15.4, 494.0], [15.5, 497.0], [15.6, 498.0], [15.7, 503.0], [15.8, 507.0], [15.9, 508.0], [16.0, 509.0], [16.1, 510.0], [16.2, 515.0], [16.3, 518.0], [16.4, 520.0], [16.5, 521.0], [16.6, 524.0], [16.7, 525.0], [16.8, 528.0], [16.9, 533.0], [17.0, 534.0], [17.1, 536.0], [17.2, 538.0], [17.3, 540.0], [17.4, 547.0], [17.5, 551.0], [17.6, 551.0], [17.7, 553.0], [17.8, 554.0], [17.9, 555.0], [18.0, 556.0], [18.1, 558.0], [18.2, 563.0], [18.3, 567.0], [18.4, 571.0], [18.5, 572.0], [18.6, 573.0], [18.7, 574.0], [18.8, 583.0], [18.9, 587.0], [19.0, 588.0], [19.1, 590.0], [19.2, 590.0], [19.3, 592.0], [19.4, 593.0], [19.5, 593.0], [19.6, 594.0], [19.7, 597.0], [19.8, 598.0], [19.9, 601.0], [20.0, 601.0], [20.1, 602.0], [20.2, 605.0], [20.3, 608.0], [20.4, 618.0], [20.5, 623.0], [20.6, 624.0], [20.7, 624.0], [20.8, 628.0], [20.9, 631.0], [21.0, 632.0], [21.1, 632.0], [21.2, 637.0], [21.3, 637.0], [21.4, 640.0], [21.5, 642.0], [21.6, 647.0], [21.7, 649.0], [21.8, 653.0], [21.9, 655.0], [22.0, 656.0], [22.1, 657.0], [22.2, 658.0], [22.3, 660.0], [22.4, 664.0], [22.5, 666.0], [22.6, 666.0], [22.7, 669.0], [22.8, 670.0], [22.9, 671.0], [23.0, 672.0], [23.1, 673.0], [23.2, 674.0], [23.3, 674.0], [23.4, 676.0], [23.5, 680.0], [23.6, 680.0], [23.7, 681.0], [23.8, 684.0], [23.9, 686.0], [24.0, 688.0], [24.1, 691.0], [24.2, 694.0], [24.3, 698.0], [24.4, 700.0], [24.5, 702.0], [24.6, 703.0], [24.7, 703.0], [24.8, 703.0], [24.9, 705.0], [25.0, 707.0], [25.1, 709.0], [25.2, 709.0], [25.3, 711.0], [25.4, 715.0], [25.5, 720.0], [25.6, 722.0], [25.7, 727.0], [25.8, 730.0], [25.9, 732.0], [26.0, 735.0], [26.1, 735.0], [26.2, 737.0], [26.3, 737.0], [26.4, 740.0], [26.5, 745.0], [26.6, 747.0], [26.7, 749.0], [26.8, 753.0], [26.9, 755.0], [27.0, 757.0], [27.1, 758.0], [27.2, 759.0], [27.3, 760.0], [27.4, 767.0], [27.5, 772.0], [27.6, 773.0], [27.7, 774.0], [27.8, 776.0], [27.9, 780.0], [28.0, 783.0], [28.1, 784.0], [28.2, 786.0], [28.3, 788.0], [28.4, 791.0], [28.5, 793.0], [28.6, 796.0], [28.7, 797.0], [28.8, 797.0], [28.9, 798.0], [29.0, 799.0], [29.1, 801.0], [29.2, 803.0], [29.3, 808.0], [29.4, 809.0], [29.5, 810.0], [29.6, 813.0], [29.7, 814.0], [29.8, 816.0], [29.9, 816.0], [30.0, 818.0], [30.1, 819.0], [30.2, 819.0], [30.3, 821.0], [30.4, 822.0], [30.5, 827.0], [30.6, 830.0], [30.7, 830.0], [30.8, 831.0], [30.9, 833.0], [31.0, 834.0], [31.1, 835.0], [31.2, 835.0], [31.3, 838.0], [31.4, 841.0], [31.5, 841.0], [31.6, 843.0], [31.7, 843.0], [31.8, 844.0], [31.9, 851.0], [32.0, 851.0], [32.1, 855.0], [32.2, 857.0], [32.3, 860.0], [32.4, 860.0], [32.5, 861.0], [32.6, 862.0], [32.7, 862.0], [32.8, 864.0], [32.9, 865.0], [33.0, 867.0], [33.1, 870.0], [33.2, 873.0], [33.3, 875.0], [33.4, 876.0], [33.5, 882.0], [33.6, 886.0], [33.7, 889.0], [33.8, 891.0], [33.9, 892.0], [34.0, 895.0], [34.1, 898.0], [34.2, 901.0], [34.3, 905.0], [34.4, 907.0], [34.5, 908.0], [34.6, 917.0], [34.7, 918.0], [34.8, 921.0], [34.9, 924.0], [35.0, 926.0], [35.1, 929.0], [35.2, 930.0], [35.3, 932.0], [35.4, 932.0], [35.5, 936.0], [35.6, 941.0], [35.7, 942.0], [35.8, 945.0], [35.9, 947.0], [36.0, 947.0], [36.1, 947.0], [36.2, 949.0], [36.3, 949.0], [36.4, 949.0], [36.5, 952.0], [36.6, 953.0], [36.7, 956.0], [36.8, 958.0], [36.9, 962.0], [37.0, 964.0], [37.1, 967.0], [37.2, 968.0], [37.3, 970.0], [37.4, 970.0], [37.5, 972.0], [37.6, 972.0], [37.7, 973.0], [37.8, 977.0], [37.9, 978.0], [38.0, 981.0], [38.1, 985.0], [38.2, 988.0], [38.3, 989.0], [38.4, 991.0], [38.5, 996.0], [38.6, 1000.0], [38.7, 1004.0], [38.8, 1007.0], [38.9, 1012.0], [39.0, 1014.0], [39.1, 1016.0], [39.2, 1020.0], [39.3, 1021.0], [39.4, 1022.0], [39.5, 1027.0], [39.6, 1029.0], [39.7, 1032.0], [39.8, 1034.0], [39.9, 1037.0], [40.0, 1038.0], [40.1, 1040.0], [40.2, 1043.0], [40.3, 1044.0], [40.4, 1048.0], [40.5, 1048.0], [40.6, 1055.0], [40.7, 1060.0], [40.8, 1062.0], [40.9, 1067.0], [41.0, 1069.0], [41.1, 1071.0], [41.2, 1074.0], [41.3, 1078.0], [41.4, 1079.0], [41.5, 1085.0], [41.6, 1089.0], [41.7, 1090.0], [41.8, 1091.0], [41.9, 1093.0], [42.0, 1098.0], [42.1, 1098.0], [42.2, 1100.0], [42.3, 1105.0], [42.4, 1110.0], [42.5, 1111.0], [42.6, 1113.0], [42.7, 1114.0], [42.8, 1114.0], [42.9, 1118.0], [43.0, 1122.0], [43.1, 1126.0], [43.2, 1129.0], [43.3, 1132.0], [43.4, 1134.0], [43.5, 1135.0], [43.6, 1136.0], [43.7, 1141.0], [43.8, 1142.0], [43.9, 1145.0], [44.0, 1146.0], [44.1, 1146.0], [44.2, 1148.0], [44.3, 1151.0], [44.4, 1153.0], [44.5, 1153.0], [44.6, 1156.0], [44.7, 1157.0], [44.8, 1159.0], [44.9, 1161.0], [45.0, 1162.0], [45.1, 1163.0], [45.2, 1169.0], [45.3, 1171.0], [45.4, 1175.0], [45.5, 1176.0], [45.6, 1177.0], [45.7, 1177.0], [45.8, 1181.0], [45.9, 1187.0], [46.0, 1188.0], [46.1, 1197.0], [46.2, 1200.0], [46.3, 1208.0], [46.4, 1214.0], [46.5, 1236.0], [46.6, 1236.0], [46.7, 1243.0], [46.8, 1246.0], [46.9, 1250.0], [47.0, 1251.0], [47.1, 1255.0], [47.2, 1257.0], [47.3, 1260.0], [47.4, 1264.0], [47.5, 1265.0], [47.6, 1266.0], [47.7, 1267.0], [47.8, 1268.0], [47.9, 1274.0], [48.0, 1277.0], [48.1, 1280.0], [48.2, 1280.0], [48.3, 1284.0], [48.4, 1295.0], [48.5, 1298.0], [48.6, 1308.0], [48.7, 1310.0], [48.8, 1316.0], [48.9, 1324.0], [49.0, 1336.0], [49.1, 1339.0], [49.2, 1343.0], [49.3, 1349.0], [49.4, 1351.0], [49.5, 1358.0], [49.6, 1362.0], [49.7, 1380.0], [49.8, 1385.0], [49.9, 1392.0], [50.0, 1395.0], [50.1, 1397.0], [50.2, 1399.0], [50.3, 1402.0], [50.4, 1417.0], [50.5, 1428.0], [50.6, 1429.0], [50.7, 1440.0], [50.8, 1446.0], [50.9, 1448.0], [51.0, 1453.0], [51.1, 1455.0], [51.2, 1460.0], [51.3, 1461.0], [51.4, 1463.0], [51.5, 1466.0], [51.6, 1468.0], [51.7, 1477.0], [51.8, 1479.0], [51.9, 1481.0], [52.0, 1486.0], [52.1, 1487.0], [52.2, 1491.0], [52.3, 1491.0], [52.4, 1496.0], [52.5, 1498.0], [52.6, 1499.0], [52.7, 1500.0], [52.8, 1502.0], [52.9, 1509.0], [53.0, 1513.0], [53.1, 1519.0], [53.2, 1521.0], [53.3, 1532.0], [53.4, 1547.0], [53.5, 1557.0], [53.6, 1569.0], [53.7, 1575.0], [53.8, 1586.0], [53.9, 1589.0], [54.0, 1593.0], [54.1, 1602.0], [54.2, 1607.0], [54.3, 1609.0], [54.4, 1614.0], [54.5, 1619.0], [54.6, 1621.0], [54.7, 1623.0], [54.8, 1623.0], [54.9, 1623.0], [55.0, 1627.0], [55.1, 1636.0], [55.2, 1646.0], [55.3, 1654.0], [55.4, 1659.0], [55.5, 1665.0], [55.6, 1669.0], [55.7, 1671.0], [55.8, 1679.0], [55.9, 1681.0], [56.0, 1684.0], [56.1, 1685.0], [56.2, 1688.0], [56.3, 1696.0], [56.4, 1699.0], [56.5, 1704.0], [56.6, 1709.0], [56.7, 1710.0], [56.8, 1716.0], [56.9, 1721.0], [57.0, 1723.0], [57.1, 1727.0], [57.2, 1733.0], [57.3, 1737.0], [57.4, 1748.0], [57.5, 1755.0], [57.6, 1759.0], [57.7, 1781.0], [57.8, 1783.0], [57.9, 1786.0], [58.0, 1788.0], [58.1, 1788.0], [58.2, 1792.0], [58.3, 1803.0], [58.4, 1806.0], [58.5, 1812.0], [58.6, 1832.0], [58.7, 1839.0], [58.8, 1847.0], [58.9, 1851.0], [59.0, 1857.0], [59.1, 1859.0], [59.2, 1865.0], [59.3, 1866.0], [59.4, 1869.0], [59.5, 1870.0], [59.6, 1871.0], [59.7, 1873.0], [59.8, 1878.0], [59.9, 1896.0], [60.0, 1901.0], [60.1, 1902.0], [60.2, 1904.0], [60.3, 1908.0], [60.4, 1923.0], [60.5, 1927.0], [60.6, 1936.0], [60.7, 1938.0], [60.8, 1940.0], [60.9, 1941.0], [61.0, 1947.0], [61.1, 1957.0], [61.2, 1960.0], [61.3, 1973.0], [61.4, 1978.0], [61.5, 1979.0], [61.6, 1993.0], [61.7, 2006.0], [61.8, 2011.0], [61.9, 2017.0], [62.0, 2020.0], [62.1, 2022.0], [62.2, 2023.0], [62.3, 2028.0], [62.4, 2030.0], [62.5, 2033.0], [62.6, 2042.0], [62.7, 2045.0], [62.8, 2052.0], [62.9, 2055.0], [63.0, 2062.0], [63.1, 2062.0], [63.2, 2064.0], [63.3, 2065.0], [63.4, 2071.0], [63.5, 2082.0], [63.6, 2083.0], [63.7, 2086.0], [63.8, 2093.0], [63.9, 2099.0], [64.0, 2103.0], [64.1, 2106.0], [64.2, 2110.0], [64.3, 2115.0], [64.4, 2122.0], [64.5, 2125.0], [64.6, 2127.0], [64.7, 2128.0], [64.8, 2128.0], [64.9, 2129.0], [65.0, 2133.0], [65.1, 2134.0], [65.2, 2144.0], [65.3, 2150.0], [65.4, 2151.0], [65.5, 2155.0], [65.6, 2159.0], [65.7, 2182.0], [65.8, 2185.0], [65.9, 2189.0], [66.0, 2200.0], [66.1, 2206.0], [66.2, 2211.0], [66.3, 2217.0], [66.4, 2218.0], [66.5, 2229.0], [66.6, 2233.0], [66.7, 2238.0], [66.8, 2244.0], [66.9, 2251.0], [67.0, 2256.0], [67.1, 2260.0], [67.2, 2262.0], [67.3, 2263.0], [67.4, 2267.0], [67.5, 2271.0], [67.6, 2275.0], [67.7, 2276.0], [67.8, 2284.0], [67.9, 2311.0], [68.0, 2322.0], [68.1, 2322.0], [68.2, 2329.0], [68.3, 2333.0], [68.4, 2338.0], [68.5, 2346.0], [68.6, 2348.0], [68.7, 2357.0], [68.8, 2358.0], [68.9, 2362.0], [69.0, 2374.0], [69.1, 2382.0], [69.2, 2389.0], [69.3, 2389.0], [69.4, 2405.0], [69.5, 2428.0], [69.6, 2431.0], [69.7, 2441.0], [69.8, 2447.0], [69.9, 2447.0], [70.0, 2449.0], [70.1, 2450.0], [70.2, 2453.0], [70.3, 2454.0], [70.4, 2458.0], [70.5, 2462.0], [70.6, 2469.0], [70.7, 2470.0], [70.8, 2476.0], [70.9, 2486.0], [71.0, 2488.0], [71.1, 2489.0], [71.2, 2490.0], [71.3, 2490.0], [71.4, 2503.0], [71.5, 2539.0], [71.6, 2556.0], [71.7, 2566.0], [71.8, 2576.0], [71.9, 2581.0], [72.0, 2591.0], [72.1, 2597.0], [72.2, 2630.0], [72.3, 2635.0], [72.4, 2645.0], [72.5, 2650.0], [72.6, 2664.0], [72.7, 2669.0], [72.8, 2680.0], [72.9, 2684.0], [73.0, 2688.0], [73.1, 2691.0], [73.2, 2704.0], [73.3, 2708.0], [73.4, 2726.0], [73.5, 2733.0], [73.6, 2743.0], [73.7, 2751.0], [73.8, 2754.0], [73.9, 2767.0], [74.0, 2781.0], [74.1, 2791.0], [74.2, 2802.0], [74.3, 2807.0], [74.4, 2811.0], [74.5, 2823.0], [74.6, 2829.0], [74.7, 2836.0], [74.8, 2846.0], [74.9, 2853.0], [75.0, 2859.0], [75.1, 2861.0], [75.2, 2864.0], [75.3, 2867.0], [75.4, 2867.0], [75.5, 2877.0], [75.6, 2898.0], [75.7, 2903.0], [75.8, 2905.0], [75.9, 2906.0], [76.0, 2910.0], [76.1, 2916.0], [76.2, 2921.0], [76.3, 2924.0], [76.4, 2924.0], [76.5, 2928.0], [76.6, 2930.0], [76.7, 2931.0], [76.8, 2936.0], [76.9, 2949.0], [77.0, 2957.0], [77.1, 2966.0], [77.2, 2988.0], [77.3, 2992.0], [77.4, 2993.0], [77.5, 3003.0], [77.6, 3008.0], [77.7, 3027.0], [77.8, 3036.0], [77.9, 3039.0], [78.0, 3043.0], [78.1, 3053.0], [78.2, 3057.0], [78.3, 3063.0], [78.4, 3084.0], [78.5, 3088.0], [78.6, 3098.0], [78.7, 3112.0], [78.8, 3124.0], [78.9, 3134.0], [79.0, 3148.0], [79.1, 3148.0], [79.2, 3174.0], [79.3, 3183.0], [79.4, 3185.0], [79.5, 3191.0], [79.6, 3210.0], [79.7, 3212.0], [79.8, 3214.0], [79.9, 3223.0], [80.0, 3231.0], [80.1, 3233.0], [80.2, 3238.0], [80.3, 3247.0], [80.4, 3254.0], [80.5, 3255.0], [80.6, 3261.0], [80.7, 3268.0], [80.8, 3285.0], [80.9, 3294.0], [81.0, 3302.0], [81.1, 3319.0], [81.2, 3322.0], [81.3, 3349.0], [81.4, 3355.0], [81.5, 3362.0], [81.6, 3374.0], [81.7, 3378.0], [81.8, 3386.0], [81.9, 3400.0], [82.0, 3402.0], [82.1, 3415.0], [82.2, 3418.0], [82.3, 3426.0], [82.4, 3430.0], [82.5, 3431.0], [82.6, 3444.0], [82.7, 3447.0], [82.8, 3466.0], [82.9, 3472.0], [83.0, 3483.0], [83.1, 3485.0], [83.2, 3489.0], [83.3, 3495.0], [83.4, 3496.0], [83.5, 3498.0], [83.6, 3502.0], [83.7, 3508.0], [83.8, 3510.0], [83.9, 3514.0], [84.0, 3515.0], [84.1, 3521.0], [84.2, 3535.0], [84.3, 3541.0], [84.4, 3544.0], [84.5, 3545.0], [84.6, 3554.0], [84.7, 3562.0], [84.8, 3571.0], [84.9, 3576.0], [85.0, 3584.0], [85.1, 3593.0], [85.2, 3607.0], [85.3, 3616.0], [85.4, 3620.0], [85.5, 3621.0], [85.6, 3632.0], [85.7, 3643.0], [85.8, 3646.0], [85.9, 3652.0], [86.0, 3655.0], [86.1, 3656.0], [86.2, 3669.0], [86.3, 3677.0], [86.4, 3680.0], [86.5, 3683.0], [86.6, 3692.0], [86.7, 3704.0], [86.8, 3706.0], [86.9, 3713.0], [87.0, 3716.0], [87.1, 3724.0], [87.2, 3726.0], [87.3, 3741.0], [87.4, 3757.0], [87.5, 3765.0], [87.6, 3766.0], [87.7, 3776.0], [87.8, 3780.0], [87.9, 3785.0], [88.0, 3799.0], [88.1, 3808.0], [88.2, 3845.0], [88.3, 3854.0], [88.4, 3860.0], [88.5, 3863.0], [88.6, 3864.0], [88.7, 3868.0], [88.8, 3874.0], [88.9, 3877.0], [89.0, 3884.0], [89.1, 3889.0], [89.2, 3898.0], [89.3, 3908.0], [89.4, 3915.0], [89.5, 3945.0], [89.6, 3947.0], [89.7, 3949.0], [89.8, 3952.0], [89.9, 3953.0], [90.0, 3959.0], [90.1, 3971.0], [90.2, 3976.0], [90.3, 3982.0], [90.4, 3989.0], [90.5, 3993.0], [90.6, 3998.0], [90.7, 4006.0], [90.8, 4009.0], [90.9, 4024.0], [91.0, 4025.0], [91.1, 4032.0], [91.2, 4033.0], [91.3, 4036.0], [91.4, 4039.0], [91.5, 4056.0], [91.6, 4065.0], [91.7, 4070.0], [91.8, 4072.0], [91.9, 4089.0], [92.0, 4093.0], [92.1, 4094.0], [92.2, 4095.0], [92.3, 4096.0], [92.4, 4102.0], [92.5, 4116.0], [92.6, 4125.0], [92.7, 4134.0], [92.8, 4159.0], [92.9, 4162.0], [93.0, 4175.0], [93.1, 4188.0], [93.2, 4243.0], [93.3, 4256.0], [93.4, 4271.0], [93.5, 4282.0], [93.6, 4288.0], [93.7, 4300.0], [93.8, 4315.0], [93.9, 4319.0], [94.0, 4334.0], [94.1, 4356.0], [94.2, 4365.0], [94.3, 4368.0], [94.4, 4379.0], [94.5, 4389.0], [94.6, 4403.0], [94.7, 4409.0], [94.8, 4413.0], [94.9, 4462.0], [95.0, 4466.0], [95.1, 4481.0], [95.2, 4486.0], [95.3, 4499.0], [95.4, 4534.0], [95.5, 4566.0], [95.6, 4580.0], [95.7, 4591.0], [95.8, 4593.0], [95.9, 4596.0], [96.0, 4598.0], [96.1, 4606.0], [96.2, 4663.0], [96.3, 4677.0], [96.4, 4692.0], [96.5, 4697.0], [96.6, 4703.0], [96.7, 4741.0], [96.8, 4762.0], [96.9, 4779.0], [97.0, 4793.0], [97.1, 4801.0], [97.2, 4809.0], [97.3, 4833.0], [97.4, 4847.0], [97.5, 4859.0], [97.6, 4897.0], [97.7, 4898.0], [97.8, 4924.0], [97.9, 4929.0], [98.0, 4931.0], [98.1, 4939.0], [98.2, 4945.0], [98.3, 4980.0], [98.4, 5002.0], [98.5, 5003.0], [98.6, 5003.0], [98.7, 5005.0], [98.8, 5012.0], [98.9, 5134.0], [99.0, 5200.0], [99.1, 5225.0], [99.2, 5319.0], [99.3, 5476.0], [99.4, 5593.0], [99.5, 6064.0], [99.6, 6204.0], [99.7, 14914.0], [99.8, 16273.0], [99.9, 18372.0], [100.0, 20114.0]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 103.0, "series": [{"data": [[100.0, 4.0], [200.0, 5.0], [300.0, 5.0], [700.0, 1.0], [1100.0, 1.0], [1600.0, 1.0], [1700.0, 1.0], [1900.0, 2.0], [2000.0, 2.0], [2200.0, 3.0], [2300.0, 1.0], [2400.0, 3.0], [2500.0, 4.0], [2600.0, 2.0], [2700.0, 5.0], [2800.0, 7.0], [2900.0, 6.0], [3000.0, 10.0], [3100.0, 8.0], [3200.0, 5.0], [3300.0, 10.0], [3400.0, 12.0], [3500.0, 20.0], [3600.0, 20.0], [3700.0, 18.0], [3800.0, 19.0], [3900.0, 37.0], [4000.0, 34.0], [4100.0, 26.0], [4200.0, 38.0], [4300.0, 37.0], [4400.0, 30.0], [4500.0, 17.0], [4600.0, 15.0], [4800.0, 25.0], [4700.0, 18.0], [5000.0, 26.0], [5100.0, 17.0], [4900.0, 17.0], [5200.0, 20.0], [5300.0, 11.0], [5400.0, 24.0], [5500.0, 25.0], [5600.0, 26.0], [5700.0, 25.0], [5800.0, 16.0], [6100.0, 31.0], [5900.0, 26.0], [6000.0, 23.0], [6200.0, 25.0], [6300.0, 21.0], [6400.0, 31.0], [6600.0, 41.0], [6500.0, 38.0], [6700.0, 42.0], [6800.0, 40.0], [6900.0, 39.0], [7000.0, 43.0], [7100.0, 44.0], [7200.0, 36.0], [7400.0, 26.0], [7300.0, 26.0], [7500.0, 33.0], [7600.0, 23.0], [7700.0, 22.0], [7900.0, 9.0], [7800.0, 11.0], [8100.0, 9.0], [8000.0, 5.0], [8300.0, 6.0], [8600.0, 8.0], [8200.0, 6.0], [8700.0, 10.0], [8500.0, 6.0], [8400.0, 11.0], [8800.0, 12.0], [9200.0, 9.0], [9100.0, 7.0], [9000.0, 8.0], [8900.0, 10.0], [9400.0, 7.0], [9300.0, 5.0], [9600.0, 3.0], [9500.0, 8.0], [9700.0, 3.0], [10100.0, 3.0], [9800.0, 3.0], [10200.0, 3.0], [10000.0, 5.0], [9900.0, 2.0], [10500.0, 4.0], [10700.0, 3.0], [10600.0, 4.0], [10300.0, 1.0], [10800.0, 2.0], [11000.0, 3.0], [10900.0, 1.0], [11200.0, 3.0], [11100.0, 6.0], [11500.0, 5.0], [11700.0, 11.0], [11600.0, 7.0], [11400.0, 12.0], [11300.0, 13.0], [11900.0, 11.0], [11800.0, 14.0], [12200.0, 2.0], [12000.0, 4.0], [12100.0, 3.0], [12300.0, 2.0], [13500.0, 1.0], [13400.0, 1.0], [14300.0, 1.0], [14700.0, 5.0], [14500.0, 2.0], [14600.0, 2.0], [14800.0, 4.0], [14400.0, 1.0], [15300.0, 14.0], [15200.0, 13.0], [14900.0, 6.0], [15000.0, 6.0], [15100.0, 10.0], [15400.0, 6.0], [15700.0, 8.0], [15600.0, 7.0], [15800.0, 7.0], [15500.0, 8.0], [15900.0, 3.0], [16000.0, 3.0], [16200.0, 7.0], [16100.0, 2.0], [16700.0, 1.0], [17400.0, 7.0], [17300.0, 3.0], [17200.0, 1.0], [18200.0, 16.0], [18000.0, 10.0], [18100.0, 11.0], [17900.0, 13.0], [18400.0, 7.0], [18300.0, 10.0], [17700.0, 8.0], [17800.0, 6.0], [17500.0, 7.0], [17600.0, 5.0], [18600.0, 1.0], [18900.0, 1.0], [18500.0, 2.0], [18700.0, 1.0], [18800.0, 1.0], [19700.0, 12.0], [20400.0, 2.0], [20300.0, 3.0], [19900.0, 18.0], [19600.0, 20.0], [20000.0, 12.0], [19800.0, 15.0], [20100.0, 5.0], [20200.0, 14.0], [19500.0, 12.0], [21200.0, 6.0], [21000.0, 7.0], [21100.0, 5.0], [21400.0, 8.0], [21300.0, 7.0], [21500.0, 6.0], [20900.0, 2.0], [21600.0, 9.0], [21700.0, 9.0], [21900.0, 4.0], [21800.0, 8.0], [22100.0, 3.0], [22200.0, 7.0], [22300.0, 2.0], [22000.0, 4.0], [22400.0, 1.0], [22700.0, 1.0], [26100.0, 8.0], [26200.0, 8.0], [26400.0, 14.0], [26300.0, 4.0], [26000.0, 1.0], [26500.0, 1.0]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[0.0, 49.0], [600.0, 91.0], [700.0, 94.0], [800.0, 103.0], [900.0, 89.0], [1000.0, 72.0], [1100.0, 81.0], [1200.0, 48.0], [1300.0, 34.0], [1400.0, 49.0], [1500.0, 29.0], [1600.0, 48.0], [1700.0, 35.0], [1800.0, 36.0], [1900.0, 33.0], [2000.0, 46.0], [2100.0, 41.0], [2200.0, 38.0], [2300.0, 31.0], [2400.0, 40.0], [2500.0, 15.0], [2600.0, 21.0], [2800.0, 29.0], [2700.0, 21.0], [2900.0, 36.0], [3000.0, 24.0], [3100.0, 18.0], [3300.0, 18.0], [3200.0, 30.0], [3400.0, 33.0], [3500.0, 33.0], [3700.0, 27.0], [3600.0, 31.0], [3800.0, 24.0], [3900.0, 28.0], [4000.0, 35.0], [4100.0, 15.0], [4200.0, 12.0], [4300.0, 18.0], [4400.0, 15.0], [4600.0, 10.0], [4500.0, 14.0], [4800.0, 13.0], [4700.0, 11.0], [4900.0, 13.0], [5000.0, 10.0], [5100.0, 2.0], [5300.0, 2.0], [5200.0, 4.0], [5400.0, 2.0], [5500.0, 1.0], [5800.0, 1.0], [6000.0, 1.0], [6100.0, 1.0], [6200.0, 1.0], [6600.0, 1.0], [14900.0, 1.0], [15800.0, 1.0], [16200.0, 1.0], [18000.0, 1.0], [18300.0, 1.0], [20100.0, 2.0], [100.0, 65.0], [200.0, 63.0], [300.0, 67.0], [400.0, 71.0], [500.0, 85.0]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 26500.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 38.0, "minX": 0.0, "ticks": [[0, "요청 수 \n(응답시간 <= 500ms)"], [1, "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)"], [2, "요청 수 \n(응답시간 > 1,500ms)"], [3, "오류 발생 요청"]], "maxY": 2932.0, "series": [{"data": [[0.0, 313.0]], "color": "#9ACD32", "isOverall": false, "label": "요청 수 \n(응답시간 <= 500ms)", "isController": false}, {"data": [[1.0, 747.0]], "color": "yellow", "isOverall": false, "label": "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)", "isController": false}, {"data": [[2.0, 2932.0]], "color": "orange", "isOverall": false, "label": "요청 수 \n(응답시간 > 1,500ms)", "isController": false}, {"data": [[3.0, 38.0]], "color": "#FF6347", "isOverall": false, "label": "오류 발생 요청", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 489.7225130890053, "minX": 1.7249373E12, "maxY": 713.562646522533, "series": [{"data": [[1.72493736E12, 713.562646522533], [1.7249373E12, 489.7225130890053]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72493736E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 45.0, "minX": 1.0, "maxY": 26560.0, "series": [{"data": [[12.0, 26220.0], [18.0, 19812.0], [20.0, 20257.0], [21.0, 24631.25], [23.0, 26282.0], [24.0, 23118.0], [25.0, 26174.0], [26.0, 26560.0], [29.0, 26146.0], [31.0, 26448.0], [32.0, 26440.75], [37.0, 19978.0], [36.0, 26463.0], [40.0, 24188.333333333332], [44.0, 20012.0], [47.0, 26407.0], [49.0, 19981.0], [51.0, 19980.0], [52.0, 26415.0], [61.0, 19905.0], [67.0, 23162.5], [65.0, 26399.0], [64.0, 19993.0], [71.0, 20004.0], [75.0, 20026.0], [79.0, 19999.0], [78.0, 26413.0], [77.0, 23796.2], [83.0, 19829.0], [87.0, 19992.75], [86.0, 22046.0], [91.0, 19901.0], [90.0, 20692.545454545456], [89.0, 22202.166666666664], [88.0, 23234.375], [95.0, 20765.125], [93.0, 21564.5], [92.0, 26286.0], [97.0, 20198.0], [101.0, 19566.0], [107.0, 19563.0], [106.0, 19580.5], [108.0, 19576.75], [119.0, 19899.0], [118.0, 19687.333333333332], [116.0, 19576.0], [121.0, 19694.25], [120.0, 19746.0], [125.0, 19666.0], [135.0, 19717.0], [131.0, 19698.0], [143.0, 19933.25], [140.0, 19939.333333333332], [138.0, 19681.0], [151.0, 20066.0], [150.0, 19758.0], [147.0, 19655.0], [146.0, 19749.0], [158.0, 16577.0], [154.0, 19919.666666666668], [153.0, 19867.0], [161.0, 19733.5], [175.0, 21366.0], [173.0, 21365.0], [170.0, 19654.0], [181.0, 19630.0], [190.0, 19913.0], [189.0, 21615.0], [188.0, 21298.0], [185.0, 21316.0], [184.0, 19769.666666666668], [199.0, 19659.5], [193.0, 14899.0], [192.0, 20014.0], [205.0, 14846.0], [204.0, 19777.0], [214.0, 19950.0], [212.0, 13504.0], [210.0, 15126.0], [222.0, 21718.0], [221.0, 21133.0], [231.0, 18637.5], [229.0, 21979.5], [228.0, 22196.0], [226.0, 19730.5], [225.0, 14744.0], [239.0, 21652.0], [237.0, 15119.0], [236.0, 17689.5], [234.0, 14908.0], [232.0, 17360.333333333332], [245.0, 15326.0], [244.0, 18408.5], [241.0, 22762.0], [240.0, 18335.0], [254.0, 21817.0], [251.0, 19519.0], [249.0, 21332.0], [269.0, 17478.666666666668], [268.0, 21547.5], [264.0, 16732.5], [260.0, 18855.0], [257.0, 21728.0], [283.0, 22311.0], [282.0, 14320.0], [277.0, 18809.5], [276.0, 15088.0], [275.0, 19031.0], [302.0, 15645.0], [301.0, 22012.333333333332], [298.0, 14895.0], [293.0, 15693.0], [292.0, 18326.14285714286], [289.0, 20938.0], [319.0, 20571.25], [318.0, 18630.0], [314.0, 17542.333333333332], [313.0, 21757.0], [308.0, 18174.0], [329.0, 2732.625], [330.0, 2635.0], [333.0, 14970.0], [332.0, 17162.5], [327.0, 21945.0], [326.0, 15704.0], [323.0, 15503.0], [321.0, 14687.0], [343.0, 2911.0], [345.0, 15419.0], [348.0, 21813.0], [347.0, 21820.0], [346.0, 21761.0], [337.0, 15703.0], [336.0, 15445.0], [364.0, 15453.5], [363.0, 17356.333333333332], [362.0, 15135.0], [359.0, 18384.5], [355.0, 21344.0], [353.0, 21939.0], [380.0, 2971.0], [376.0, 9153.0], [374.0, 3029.0], [379.0, 3357.3333333333335], [381.0, 12466.0], [382.0, 18173.666666666668], [378.0, 15884.4], [375.0, 15117.0], [369.0, 16436.333333333332], [368.0, 15498.0], [372.0, 21758.0], [390.0, 3305.0], [385.0, 11334.333333333334], [384.0, 21636.0], [389.0, 3825.0], [392.0, 8222.0], [396.0, 20093.5], [395.0, 21546.0], [394.0, 20044.0], [388.0, 18801.0], [386.0, 11746.0], [403.0, 6848.666666666667], [400.0, 13204.333333333332], [410.0, 11178.0], [411.0, 1951.0], [405.0, 3649.0], [413.0, 17378.0], [412.0, 17975.4], [409.0, 21375.0], [402.0, 16445.0], [419.0, 3493.0], [421.0, 3335.25], [420.0, 18952.333333333332], [422.0, 6847.25], [423.0, 9280.777777777777], [417.0, 21137.5], [416.0, 18700.0], [424.0, 10819.5], [425.0, 5009.111111111111], [430.0, 3850.285714285714], [428.0, 13623.57142857143], [427.0, 17705.0], [426.0, 18663.4], [446.0, 14244.0], [436.0, 3562.125], [437.0, 7158.5], [445.0, 4171.0], [447.0, 3628.0], [443.0, 14637.75], [441.0, 16192.75], [440.0, 17806.0], [435.0, 16854.166666666668], [434.0, 14485.0], [433.0, 17393.0], [449.0, 10834.0], [450.0, 3842.0], [453.0, 6568.0], [455.0, 3683.5], [458.0, 4298.0], [462.0, 4362.0], [463.0, 10794.0], [459.0, 13467.333333333334], [452.0, 14085.6], [476.0, 11734.0], [468.0, 13256.0], [472.0, 6567.0], [478.0, 3847.0], [477.0, 13817.666666666666], [475.0, 11392.666666666666], [471.0, 14406.0], [464.0, 11704.0], [470.0, 10763.0], [467.0, 17724.0], [466.0, 11501.0], [480.0, 4492.0], [484.0, 11980.733333333334], [488.0, 9604.625], [491.0, 4278.0], [492.0, 15546.333333333334], [486.0, 15035.5], [481.0, 15699.333333333334], [508.0, 4103.0], [509.0, 4412.25], [511.0, 5624.5], [505.0, 16869.0], [500.0, 11330.0], [514.0, 6089.0], [513.0, 3349.6666666666665], [517.0, 2578.0], [519.0, 4027.6666666666665], [520.0, 8667.625], [521.0, 4111.0], [525.0, 3878.5], [524.0, 13968.0], [526.0, 10737.222222222223], [534.0, 4020.5], [535.0, 12174.0], [540.0, 11778.5], [529.0, 18310.0], [528.0, 11931.0], [533.0, 18091.666666666668], [530.0, 14913.0], [537.0, 8266.0], [539.0, 5742.333333333334], [548.0, 15765.5], [555.0, 8205.5], [554.0, 15992.0], [552.0, 11358.0], [565.0, 11627.400000000001], [566.0, 8907.555555555555], [574.0, 13483.833333333332], [573.0, 18285.333333333332], [550.0, 14791.5], [549.0, 10963.0], [561.0, 18124.0], [559.0, 15021.0], [544.0, 11654.0], [547.0, 12041.0], [545.0, 17851.666666666668], [558.0, 15446.111111111111], [577.0, 8932.0], [576.0, 6145.0], [578.0, 8324.333333333334], [579.0, 17969.0], [582.0, 4400.0], [585.0, 4239.0], [586.0, 14044.285714285716], [587.0, 4372.5], [588.0, 4089.8333333333335], [589.0, 15289.0], [590.0, 10528.0], [593.0, 4295.333333333333], [594.0, 8894.0], [602.0, 3217.0], [603.0, 11937.5], [606.0, 5685.0], [605.0, 8958.0], [607.0, 3911.0], [600.0, 4362.0], [601.0, 3512.5], [595.0, 4413.5], [598.0, 6845.833333333333], [596.0, 12687.0], [599.0, 6207.416666666667], [637.0, 16006.0], [638.0, 9628.0], [636.0, 9496.0], [634.0, 6408.0], [632.0, 9563.0], [615.0, 12003.0], [614.0, 6432.0], [612.0, 12124.75], [611.0, 11958.0], [609.0, 15299.0], [608.0, 13107.0], [631.0, 9510.0], [629.0, 14247.0], [624.0, 8673.0], [623.0, 11712.333333333334], [618.0, 6428.0], [666.0, 4777.333333333333], [645.0, 4264.0], [643.0, 9388.5], [642.0, 10667.0], [640.0, 10297.6], [655.0, 11024.5], [654.0, 7193.0], [651.0, 5028.0], [648.0, 11396.999999999998], [646.0, 7957.4], [647.0, 4337.5], [668.0, 4558.0], [669.0, 4000.0], [671.0, 10295.25], [657.0, 15613.0], [656.0, 7389.0], [660.0, 11906.5], [658.0, 9231.25], [667.0, 6450.6], [665.0, 9100.5], [664.0, 5043.0], [699.0, 15910.0], [672.0, 4808.0], [682.0, 9576.0], [675.0, 4849.0], [678.0, 4739.0], [676.0, 8156.5], [700.0, 9742.0], [696.0, 7993.0], [695.0, 4417.0], [693.0, 9512.0], [692.0, 9104.0], [688.0, 5293.0], [728.0, 5422.5], [705.0, 6116.0], [709.0, 3200.0], [706.0, 6741.875], [710.0, 9647.0], [713.0, 5402.0], [712.0, 5174.75], [715.0, 5218.0], [719.0, 6433.0], [704.0, 5623.666666666667], [730.0, 4377.333333333333], [726.0, 5655.0], [735.0, 5232.0], [721.0, 5267.0], [720.0, 4102.0], [723.0, 4419.0], [722.0, 4873.25], [724.0, 5174.0], [731.0, 5184.0], [763.0, 5437.0], [745.0, 5467.0], [744.0, 4562.6], [746.0, 4046.5], [764.0, 6427.0], [765.0, 3517.0], [766.0, 3993.0], [760.0, 4069.0], [740.0, 4002.0], [738.0, 4536.5], [736.0, 4774.75], [759.0, 5497.0], [754.0, 3987.0], [750.0, 3945.0], [784.0, 3929.3333333333335], [789.0, 5443.5], [792.0, 7793.0], [775.0, 4206.0], [774.0, 3788.0], [773.0, 3743.0], [771.0, 4806.5], [770.0, 4440.666666666667], [783.0, 4414.666666666667], [781.0, 4546.4], [780.0, 3609.0], [779.0, 4044.0], [777.0, 3865.0], [790.0, 7719.0], [785.0, 5606.799999999999], [786.0, 5690.5], [787.0, 4355.0], [796.0, 4233.4], [799.0, 3357.5], [815.0, 5080.666666666667], [814.0, 5122.8], [816.0, 6380.307692307692], [807.0, 5978.0], [830.0, 4342.0], [831.0, 4123.666666666667], [805.0, 6063.428571428572], [806.0, 5443.8], [804.0, 4560.2], [803.0, 5962.666666666667], [818.0, 6496.5], [817.0, 6061.0], [813.0, 5575.0], [811.0, 5229.800000000001], [812.0, 5105.0], [808.0, 4091.4], [809.0, 6263.0], [801.0, 4553.666666666667], [800.0, 6211.0], [861.0, 7622.5], [857.0, 6191.0], [858.0, 5006.0], [860.0, 5792.5], [862.0, 5628.0], [863.0, 5541.0], [855.0, 3434.0], [851.0, 6431.0], [844.0, 3004.0], [833.0, 6611.5], [834.0, 4013.0], [869.0, 6877.700000000001], [878.0, 5144.8], [874.0, 5782.374999999999], [879.0, 6453.5], [866.0, 4938.0], [864.0, 4368.0], [870.0, 7205.666666666667], [871.0, 6313.5], [868.0, 7047.833333333333], [867.0, 6839.714285714286], [891.0, 7630.5], [894.0, 8037.25], [893.0, 7078.5], [890.0, 7182.2307692307695], [889.0, 7278.5], [880.0, 6943.000000000001], [895.0, 7632.374999999999], [876.0, 6169.882352941177], [877.0, 6490.285714285712], [873.0, 6742.222222222223], [872.0, 7380.0], [875.0, 6635.5], [881.0, 6469.166666666666], [883.0, 6135.222222222222], [882.0, 5950.5], [884.0, 7136.2], [885.0, 7526.0], [887.0, 3339.0], [921.0, 5564.666666666667], [908.0, 7035.599999999999], [911.0, 6072.999999999999], [910.0, 6537.473684210526], [912.0, 6709.714285714285], [927.0, 5436.0], [925.0, 7088.0], [926.0, 7034.2], [923.0, 5629.1], [922.0, 5138.25], [901.0, 6267.333333333333], [902.0, 6069.2], [903.0, 4917.777777777778], [920.0, 5767.5], [900.0, 7311.0], [899.0, 6260.0], [896.0, 4724.5], [897.0, 3852.0], [898.0, 6655.777777777777], [924.0, 2501.0], [905.0, 7497.083333333333], [904.0, 4799.8], [906.0, 6594.333333333333], [907.0, 7097.0], [909.0, 6172.4], [913.0, 6716.166666666666], [914.0, 2441.3333333333335], [915.0, 7072.8], [916.0, 6323.8], [917.0, 6252.8], [918.0, 7167.4285714285725], [919.0, 6126.5], [954.0, 7719.75], [934.0, 6875.5], [935.0, 6289.777777777777], [936.0, 6126.0], [937.0, 6300.0], [939.0, 7049.142857142857], [938.0, 6390.625], [941.0, 6798.0], [929.0, 7079.0], [928.0, 6781.5], [933.0, 5577.666666666667], [932.0, 6490.0], [931.0, 7167.428571428572], [930.0, 6600.4], [940.0, 6197.5], [957.0, 5205.5], [944.0, 5895.5], [959.0, 4973.0], [945.0, 7690.0], [948.0, 6419.0], [947.0, 4907.0], [946.0, 6312.0], [949.0, 6503.25], [956.0, 5896.909090909092], [955.0, 6797.75], [952.0, 6780.2], [953.0, 5436.6], [951.0, 7158.125], [950.0, 7664.2], [961.0, 7233.0], [960.0, 6573.333333333334], [975.0, 6255.25], [973.0, 8131.0], [974.0, 6672.5], [962.0, 7979.625], [964.0, 7185.869565217392], [965.0, 6979.0], [963.0, 7674.4375], [966.0, 7635.099999999999], [967.0, 7276.0], [989.0, 6801.571428571429], [988.0, 5600.5], [977.0, 5887.0], [976.0, 5794.0], [979.0, 7741.0], [980.0, 5389.0], [982.0, 5113.6], [981.0, 6693.0], [978.0, 7006.75], [972.0, 4988.5], [971.0, 5981.222222222223], [970.0, 6929.5], [969.0, 7839.642857142858], [968.0, 5432.1], [1005.0, 5990.285714285714], [996.0, 6209.0], [997.0, 6997.285714285714], [999.0, 6732.166666666667], [1009.0, 6091.846153846154], [1008.0, 4161.0], [998.0, 6546.374999999999], [1001.0, 3709.75], [1000.0, 6856.529411764706], [1004.0, 6251.5], [1003.0, 5895.0], [1002.0, 6389.333333333333], [995.0, 6509.5], [992.0, 6369.272727272727], [1006.0, 5490.8], [1007.0, 4217.375], [993.0, 5482.0], [994.0, 6586.5]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[693.5235732009926, 9293.85260545906]], "isOverall": false, "label": "Prepare Order-Aggregated", "isController": false}, {"data": [[2.0, 415.0], [3.0, 283.0], [4.0, 318.0], [7.0, 333.0], [9.0, 280.25], [11.0, 272.0], [12.0, 302.0], [14.0, 107.0], [15.0, 60.0], [17.0, 89.5], [18.0, 150.0], [19.0, 121.0], [20.0, 94.0], [21.0, 85.0], [22.0, 119.0], [23.0, 104.0], [24.0, 200.0], [25.0, 229.0], [26.0, 154.0], [27.0, 112.0], [29.0, 179.5], [31.0, 131.0], [33.0, 126.0], [32.0, 95.0], [37.0, 80.0], [36.0, 149.0], [39.0, 181.0], [38.0, 184.0], [41.0, 20114.0], [40.0, 346.0], [43.0, 249.5], [44.0, 20100.0], [47.0, 406.0], [46.0, 319.0], [49.0, 218.0], [48.0, 229.0], [51.0, 299.5], [52.0, 135.0], [55.0, 338.3333333333333], [57.0, 302.0], [59.0, 422.0], [58.0, 396.0], [61.0, 183.0], [63.0, 87.0], [62.0, 457.0], [67.0, 287.0], [66.0, 437.0], [65.0, 446.0], [64.0, 394.0], [71.0, 351.0], [69.0, 425.0], [68.0, 432.0], [75.0, 493.3333333333333], [72.0, 430.0], [79.0, 283.0], [78.0, 380.0], [77.0, 234.0], [76.0, 533.0], [83.0, 273.0], [82.0, 373.0], [81.0, 477.0], [80.0, 344.0], [87.0, 384.0], [86.0, 424.0], [85.0, 345.0], [84.0, 429.0], [91.0, 110.0], [90.0, 215.0], [89.0, 231.0], [88.0, 155.0], [95.0, 81.0], [93.0, 113.0], [92.0, 130.0], [99.0, 72.0], [98.0, 90.0], [97.0, 669.0], [96.0, 676.0], [102.0, 46.0], [101.0, 52.0], [100.0, 50.0], [107.0, 65.0], [106.0, 48.75], [111.0, 45.0], [109.0, 54.0], [108.0, 49.0], [115.0, 62.0], [114.0, 56.0], [113.0, 61.5], [119.0, 81.0], [118.0, 55.0], [117.0, 48.0], [116.0, 54.0], [123.0, 167.0], [122.0, 230.0], [121.0, 158.0], [120.0, 78.0], [127.0, 164.0], [126.0, 176.0], [125.0, 165.0], [124.0, 181.0], [135.0, 164.0], [134.0, 154.0], [133.0, 231.0], [132.0, 141.0], [131.0, 133.0], [130.0, 144.0], [129.0, 83.0], [128.0, 226.0], [143.0, 267.0], [142.0, 91.0], [141.0, 101.0], [140.0, 135.0], [139.0, 136.0], [138.0, 142.0], [137.0, 213.0], [136.0, 154.0], [151.0, 547.0], [150.0, 409.0], [148.0, 571.0], [147.0, 747.0], [146.0, 71.0], [145.0, 130.0], [144.0, 387.0], [159.0, 234.0], [158.0, 114.0], [157.0, 91.0], [156.0, 99.0], [155.0, 691.0], [154.0, 528.0], [153.0, 700.0], [152.0, 90.0], [166.0, 1007.0], [165.0, 674.0], [164.0, 252.0], [163.0, 476.0], [161.0, 116.0], [160.0, 684.0], [175.0, 355.5], [173.0, 138.0], [172.0, 95.0], [171.0, 362.0], [170.0, 141.0], [169.0, 991.0], [168.0, 201.0], [183.0, 90.5], [181.0, 325.0], [180.0, 341.0], [179.0, 66.0], [178.0, 279.0], [177.0, 277.0], [176.0, 348.0], [191.0, 562.0], [190.0, 387.0], [189.0, 572.0], [188.0, 1397.0], [187.0, 553.0], [186.0, 588.0], [185.0, 592.0], [184.0, 94.0], [199.0, 813.0], [198.0, 350.0], [197.0, 469.0], [195.0, 637.0], [193.0, 393.0], [192.0, 73.0], [207.0, 109.0], [206.0, 113.0], [205.0, 510.0], [204.0, 836.0], [203.0, 120.0], [202.0, 308.0], [200.0, 520.0], [215.0, 655.0], [214.0, 329.0], [213.0, 332.0], [212.0, 491.0], [211.0, 383.0], [210.0, 830.0], [209.0, 652.5], [223.0, 123.0], [222.0, 958.0], [221.0, 1016.5], [219.0, 949.0], [218.0, 568.0], [216.0, 1020.0], [231.0, 902.0], [230.0, 567.0], [229.0, 851.0], [228.0, 1040.0], [227.0, 876.0], [226.0, 407.0], [225.0, 121.0], [224.0, 123.0], [239.0, 1163.0], [238.0, 1169.0], [237.0, 855.0], [236.0, 1240.0], [235.0, 1265.0], [234.0, 773.0], [232.0, 955.0], [245.0, 1696.0], [244.0, 1369.0], [243.0, 943.5], [241.0, 1803.0], [240.0, 1160.0], [252.0, 949.0], [251.0, 554.0], [249.0, 842.0], [248.0, 843.3333333333334], [269.0, 6066.333333333333], [271.0, 780.0], [268.0, 697.6666666666666], [267.0, 833.0], [265.0, 807.5], [264.0, 906.5], [262.0, 787.75], [261.0, 1121.0], [259.0, 421.0], [257.0, 1112.0], [286.0, 601.0], [287.0, 480.0], [285.0, 659.0], [284.0, 103.0], [283.0, 1078.0], [282.0, 843.0], [281.0, 831.0], [280.0, 694.0], [277.0, 988.0], [275.0, 264.0], [274.0, 267.0], [273.0, 977.0], [272.0, 755.0], [276.0, 624.0], [300.0, 1038.0], [302.0, 877.0], [303.0, 769.0], [301.0, 573.0], [299.0, 774.0], [298.0, 878.0], [294.0, 674.0], [289.0, 686.0], [288.0, 924.0], [293.0, 861.0], [292.0, 703.3333333333334], [317.0, 1251.0], [318.0, 1243.0], [316.0, 1451.5], [314.0, 390.0], [313.0, 1636.0], [312.0, 1308.0], [310.0, 1243.5], [308.0, 940.25], [304.0, 853.0], [333.0, 978.0], [334.0, 1074.0], [332.0, 984.0], [331.0, 748.0], [329.0, 981.0], [328.0, 1114.0], [327.0, 600.0], [326.0, 219.0], [323.0, 342.0], [322.0, 218.0], [321.0, 1267.3333333333333], [351.0, 749.0], [348.0, 1607.0], [347.0, 1602.0], [346.0, 1196.0], [345.0, 651.5], [340.0, 1066.5], [338.0, 705.0], [337.0, 1324.0], [336.0, 1098.0], [365.0, 601.0], [367.0, 808.0], [364.0, 1243.0], [355.0, 1044.0], [353.0, 905.0], [352.0, 1043.0], [363.0, 753.0], [362.0, 756.0], [361.0, 755.0], [360.0, 297.0], [359.0, 966.0], [357.0, 509.0], [356.0, 95.0], [371.0, 1043.5], [376.0, 875.0], [381.0, 880.3333333333334], [378.0, 725.0], [375.0, 1093.0], [374.0, 1082.0], [373.0, 483.0], [372.0, 1314.0], [369.0, 256.0], [368.0, 721.0], [397.0, 583.0], [396.0, 970.0], [395.0, 834.0], [394.0, 468.0], [393.0, 1161.0], [392.0, 1269.0], [388.0, 1569.0], [384.0, 797.6666666666666], [387.0, 1175.0], [386.0, 1176.0], [385.0, 952.0], [403.0, 989.0], [413.0, 784.0], [415.0, 868.0], [412.0, 797.5], [410.0, 917.0], [409.0, 573.5], [407.0, 964.0], [406.0, 289.0], [405.0, 1230.0], [402.0, 897.0], [401.0, 1296.0], [400.0, 858.6666666666666], [430.0, 1082.5], [431.0, 1114.0], [428.0, 595.0], [418.0, 1048.0], [417.0, 287.0], [416.0, 1013.0], [427.0, 963.0], [426.0, 522.0], [425.0, 1129.0], [424.0, 929.0], [423.0, 626.0], [422.0, 1285.0], [421.0, 435.0], [420.0, 1020.5], [446.0, 594.0], [447.0, 605.0], [445.0, 593.0], [435.0, 857.0], [434.0, 867.0], [433.0, 536.0], [432.0, 862.0], [443.0, 598.0], [442.0, 605.0], [441.0, 936.0], [440.0, 1062.0], [439.0, 1067.0], [438.0, 722.0], [437.0, 827.0], [436.0, 1153.0], [461.0, 707.0], [463.0, 815.0], [460.0, 862.0], [450.0, 865.0], [449.0, 865.0], [448.0, 288.0], [459.0, 453.0], [458.0, 767.0], [457.0, 738.0], [455.0, 572.0], [454.0, 947.0], [453.0, 573.0], [452.0, 995.0], [477.0, 1111.0], [479.0, 987.5], [476.0, 1012.0], [467.0, 689.0], [465.0, 932.0], [475.0, 862.0], [474.0, 860.0], [473.0, 727.0], [472.0, 608.0], [471.0, 608.0], [470.0, 590.0], [469.0, 721.0], [468.0, 534.0], [492.0, 866.3333333333334], [494.0, 376.0], [495.0, 908.0], [493.0, 386.0], [489.0, 4006.0], [488.0, 783.5], [486.0, 476.0], [480.0, 1161.0], [482.0, 601.0], [481.0, 819.0], [485.0, 502.0], [484.0, 625.5], [510.0, 317.0], [511.0, 641.0], [509.0, 336.0], [508.0, 860.0], [507.0, 861.0], [506.0, 628.0], [505.0, 800.0], [504.0, 753.5], [502.0, 591.5], [499.0, 18372.0], [498.0, 699.0], [497.0, 862.0], [500.0, 760.0], [540.0, 3669.0], [532.0, 2195.0], [543.0, 3807.6666666666665], [528.0, 554.0], [530.0, 680.0], [529.0, 489.0], [539.0, 540.0], [538.0, 623.0], [537.0, 3840.5], [519.0, 711.0], [518.0, 796.0], [517.0, 708.0], [516.0, 508.0], [515.0, 509.0], [514.0, 680.0], [512.0, 681.0], [527.0, 554.0], [526.0, 757.0], [525.0, 632.0], [524.0, 764.0], [523.0, 532.5], [521.0, 539.0], [520.0, 617.0], [535.0, 453.0], [534.0, 637.0], [533.0, 572.0], [573.0, 3521.5], [564.0, 3646.0], [574.0, 3646.0], [560.0, 3616.0], [563.0, 3439.0], [561.0, 3595.0], [571.0, 3562.0], [570.0, 3294.0], [569.0, 3386.0], [551.0, 3412.0], [550.0, 3554.0], [549.0, 3619.0], [548.0, 3680.0], [547.0, 3521.0], [546.0, 526.0], [545.0, 355.0], [544.0, 18043.0], [559.0, 3374.0], [558.0, 3319.0], [557.0, 3406.5], [555.0, 3349.0], [554.0, 3497.0], [553.0, 3501.0], [552.0, 3466.0], [567.0, 3422.0], [566.0, 3214.0], [565.0, 3444.0], [604.0, 321.0], [605.0, 338.0], [594.0, 612.5], [603.0, 657.0], [602.0, 359.0], [601.0, 790.0], [600.0, 362.0], [590.0, 556.0], [577.0, 3322.0], [576.0, 3473.5], [579.0, 3378.0], [578.0, 3502.0], [581.0, 3368.0], [580.0, 3289.0], [589.0, 363.5], [587.0, 366.0], [586.0, 3979.6], [599.0, 2262.0], [598.0, 506.0], [596.0, 551.0], [595.0, 518.0], [632.0, 701.0], [636.0, 590.0], [639.0, 624.0], [627.0, 607.6666666666666], [625.0, 214.0], [629.0, 873.0], [628.0, 494.0], [638.0, 432.0], [637.0, 658.0], [635.0, 545.0], [634.0, 556.0], [633.0, 345.0], [623.0, 753.0], [608.0, 374.0], [611.0, 412.5], [609.0, 891.0], [613.0, 704.0], [612.0, 14914.0], [615.0, 797.0], [614.0, 285.0], [622.0, 895.0], [621.0, 656.0], [620.0, 442.0], [618.0, 947.0], [617.0, 632.0], [616.0, 632.0], [631.0, 834.0], [630.0, 1044.0], [665.0, 193.0], [669.0, 1029.0], [671.0, 1032.5], [657.0, 484.0], [656.0, 666.0], [659.0, 410.0], [658.0, 588.0], [661.0, 551.0], [660.0, 575.0], [668.0, 503.0], [667.0, 465.0], [666.0, 401.0], [664.0, 364.0], [647.0, 3447.0], [646.0, 696.0], [645.0, 674.0], [644.0, 674.0], [643.0, 737.0], [642.0, 848.0], [640.0, 624.0], [655.0, 703.0], [654.0, 645.0], [653.0, 653.0], [652.0, 985.0], [651.0, 858.0], [649.0, 709.0], [648.0, 446.0], [663.0, 551.0], [662.0, 538.0], [700.0, 286.0], [703.0, 304.0], [688.0, 816.0], [691.0, 702.0], [690.0, 783.0], [693.0, 1259.0], [692.0, 6628.0], [702.0, 274.0], [701.0, 821.0], [699.0, 171.0], [698.0, 784.0], [697.0, 1032.0], [696.0, 15893.0], [687.0, 889.0], [674.0, 230.5], [673.0, 304.0], [677.0, 365.0], [676.0, 334.0], [679.0, 336.0], [678.0, 100.0], [686.0, 907.0], [685.0, 914.0], [684.0, 309.0], [683.0, 1177.0], [682.0, 114.0], [681.0, 639.0], [695.0, 286.0], [694.0, 882.0], [729.0, 478.0], [733.0, 437.0], [734.0, 656.0], [720.0, 601.0], [722.0, 831.0], [721.0, 1714.0], [724.0, 1687.0], [723.0, 694.0], [732.0, 242.0], [731.0, 1298.0], [730.0, 389.0], [728.0, 1041.0], [710.0, 747.0], [707.0, 830.0], [706.0, 279.0], [705.0, 678.0], [704.0, 688.0], [719.0, 637.0], [718.0, 745.0], [717.0, 1034.0], [716.0, 1034.0], [715.0, 829.0], [714.0, 832.0], [713.0, 574.0], [712.0, 703.0], [727.0, 3607.0], [725.0, 636.0], [764.0, 930.0], [767.0, 1409.0], [753.0, 241.0], [752.0, 306.0], [755.0, 1072.0], [754.0, 284.0], [757.0, 455.0], [756.0, 1170.0], [766.0, 434.0], [765.0, 1037.0], [763.0, 521.0], [762.0, 967.0], [761.0, 951.0], [760.0, 591.0], [751.0, 1076.0], [736.0, 853.5], [739.0, 443.0], [738.0, 1351.0], [741.0, 1132.0], [740.0, 423.0], [743.0, 401.0], [742.0, 405.0], [750.0, 117.0], [749.0, 1157.0], [748.0, 632.0], [747.0, 1264.0], [746.0, 698.0], [745.0, 1343.0], [744.0, 670.0], [759.0, 1060.0], [758.0, 1062.0], [796.0, 3438.75], [786.0, 3753.4444444444443], [797.0, 3219.5], [799.0, 3056.6666666666665], [798.0, 870.0], [785.0, 3708.125], [784.0, 3765.625], [794.0, 2951.666666666667], [795.0, 3530.666666666667], [793.0, 2085.5], [792.0, 2963.5], [775.0, 1048.0], [774.0, 874.0], [773.0, 932.0], [772.0, 1135.0], [771.0, 1004.0], [770.0, 1100.0], [768.0, 989.0], [783.0, 2176.0], [782.0, 3336.333333333333], [781.0, 948.0], [780.0, 1203.5], [778.0, 1627.0], [777.0, 815.0], [776.0, 3674.0], [791.0, 3271.0], [790.0, 1274.0], [789.0, 2757.4], [788.0, 4033.0], [787.0, 3563.6666666666665], [804.0, 3557.5714285714284], [815.0, 3383.0], [816.0, 4228.375], [831.0, 847.0], [829.0, 358.0], [828.0, 449.0], [827.0, 1423.3333333333333], [826.0, 703.0], [805.0, 3063.75], [806.0, 3068.666666666667], [807.0, 4298.333333333333], [818.0, 4164.0], [820.0, 134.0], [819.0, 1941.0], [823.0, 1623.0], [821.0, 174.0], [817.0, 4094.8333333333335], [813.0, 3839.5], [814.0, 2106.5], [812.0, 3744.714285714286], [811.0, 3690.6666666666665], [810.0, 3330.25], [808.0, 3526.8888888888887], [809.0, 2897.3333333333335], [800.0, 2977.333333333333], [802.0, 2790.6666666666665], [803.0, 3437.75], [801.0, 3225.5], [862.0, 3000.4], [860.0, 4653.4], [861.0, 4812.0], [859.0, 2730.5], [863.0, 3119.333333333333], [848.0, 626.5], [851.0, 1113.0], [850.0, 818.5], [853.0, 684.0], [852.0, 671.0], [858.0, 1140.0], [857.0, 1146.0], [837.0, 1236.0], [834.0, 1187.0], [833.0, 875.0], [846.0, 699.0], [844.0, 794.5], [842.0, 745.0], [841.0, 776.75], [855.0, 672.0], [854.0, 672.0], [891.0, 1159.0], [877.0, 2752.4999999999995], [874.0, 3062.8750000000005], [872.0, 2962.3749999999995], [875.0, 2675.857142857143], [873.0, 1994.384615384615], [880.0, 3320.8], [881.0, 1084.5], [888.0, 1684.4], [871.0, 1520.4], [870.0, 1233.888888888889], [869.0, 1271.6666666666667], [868.0, 1069.0], [867.0, 506.0], [866.0, 459.0], [865.0, 524.0], [864.0, 932.0], [890.0, 1664.0], [889.0, 1802.3333333333333], [892.0, 2841.0], [894.0, 2087.6923076923076], [893.0, 1980.5714285714284], [895.0, 2513.0], [882.0, 2770.75], [883.0, 2367.4444444444443], [884.0, 2343.0], [887.0, 2109.833333333333], [885.0, 2097.5714285714284], [879.0, 2735.846153846154], [878.0, 1648.1875], [876.0, 2356.5], [896.0, 2485.5], [897.0, 3735.75], [899.0, 2172.0], [898.0, 2270.5], [901.0, 1461.3333333333333], [900.0, 1818.2], [920.0, 2627.6666666666665], [903.0, 1996.5], [902.0, 1677.25], [923.0, 1971.2], [922.0, 1711.0], [921.0, 2151.6], [924.0, 2954.25], [925.0, 3207.0], [926.0, 2255.0], [927.0, 2045.25], [911.0, 3477.5714285714284], [912.0, 2411.2], [914.0, 2792.0], [913.0, 1496.25], [916.0, 1941.0], [915.0, 1036.0], [917.0, 2365.6], [918.0, 2498.777777777778], [919.0, 1959.7142857142858], [909.0, 2740.846153846154], [908.0, 2703.5], [907.0, 2519.0], [906.0, 2425.1818181818185], [905.0, 1780.5454545454545], [904.0, 1991.75], [910.0, 2775.8888888888887], [955.0, 2431.5], [936.0, 2787.222222222222], [938.0, 2056.7], [937.0, 1760.3333333333333], [940.0, 2137.5], [939.0, 2428.666666666667], [959.0, 2496.75], [958.0, 830.0], [945.0, 2046.0], [946.0, 1110.0], [944.0, 2400.25], [948.0, 2193.2], [947.0, 2347.0], [957.0, 2513.2], [956.0, 2429.1111111111113], [953.0, 2218.5], [954.0, 2768.714285714286], [952.0, 2345.7500000000005], [935.0, 2256.5], [933.0, 2058.4], [943.0, 2240.0], [942.0, 1248.5], [928.0, 2028.0], [930.0, 2615.5714285714284], [929.0, 1919.0], [932.0, 1950.6], [931.0, 1716.3333333333333], [934.0, 1938.75], [941.0, 2112.0], [951.0, 2193.2500000000005], [950.0, 2336.8333333333335], [949.0, 2047.0], [966.0, 2942.857142857143], [960.0, 2376.6666666666665], [961.0, 2390.3125], [963.0, 2804.181818181818], [962.0, 2765.2000000000003], [964.0, 2816.9999999999995], [965.0, 1972.0], [967.0, 2692.3076923076924], [984.0, 1874.5], [987.0, 3091.5], [986.0, 2515.0], [985.0, 1663.0], [989.0, 2037.8], [990.0, 2033.0], [976.0, 2394.2], [991.0, 1891.8333333333333], [988.0, 2358.666666666667], [968.0, 2681.0], [969.0, 2632.090909090909], [970.0, 2767.363636363636], [977.0, 2961.909090909091], [980.0, 3005.125], [981.0, 590.0], [983.0, 2219.6], [982.0, 1733.0], [979.0, 2913.0], [978.0, 3293.8888888888887], [974.0, 2971.0], [975.0, 2058.7500000000005], [973.0, 1927.5000000000002], [972.0, 2906.5], [971.0, 2488.5454545454545], [1006.0, 1347.0], [996.0, 2009.1111111111109], [1002.0, 1868.7142857142858], [1003.0, 2716.0769230769233], [1008.0, 1577.6], [1009.0, 1072.0], [999.0, 2155.8], [998.0, 2415.2222222222226], [997.0, 1995.0000000000002], [1007.0, 2347.285714285714], [993.0, 1678.8], [992.0, 1677.8], [995.0, 2113.1666666666665], [994.0, 1762.8333333333335], [1005.0, 2933.0], [1004.0, 1787.5000000000002], [1001.0, 2008.5000000000002], [1000.0, 2459.666666666667], [1.0, 295.0]], "isOverall": false, "label": "Create Order", "isController": false}, {"data": [[712.3836228287844, 1867.9796526054527]], "isOverall": false, "label": "Create Order-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 1009.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 1448.4166666666667, "minX": 1.7249373E12, "maxY": 42791.5, "series": [{"data": [[1.72493736E12, 26038.866666666665], [1.7249373E12, 1448.4166666666667]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72493736E12, 42791.5], [1.7249373E12, 1642.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72493736E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 1867.9796526054527, "minX": 1.7249373E12, "maxY": 9870.234649122802, "series": [{"data": [[1.72493736E12, 9870.234649122802], [1.7249373E12, 3789.5549738219893]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[1.72493736E12, 1867.9796526054527]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72493736E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 1865.6124069478858, "minX": 1.7249373E12, "maxY": 9855.494517543866, "series": [{"data": [[1.72493736E12, 9855.494517543866], [1.7249373E12, 3785.3612565445014]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[1.72493736E12, 1865.6124069478858]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72493736E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 12.07853403141361, "minX": 1.7249373E12, "maxY": 5111.7050438596525, "series": [{"data": [[1.72493736E12, 5111.7050438596525], [1.7249373E12, 12.07853403141361]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[1.72493736E12, 56.24615384615388]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72493736E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 40.0, "minX": 1.7249373E12, "maxY": 26560.0, "series": [{"data": [[1.72493736E12, 26560.0], [1.7249373E12, 4812.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72493736E12, 40.0], [1.7249373E12, 1692.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72493736E12, 15687.400000000005], [1.7249373E12, 4399.2]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72493736E12, 22418.54], [1.7249373E12, 4805.5599999999995]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72493736E12, 3977.0], [1.7249373E12, 3987.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72493736E12, 19828.9], [1.7249373E12, 4466.799999999999]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72493736E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 103.0, "minX": 12.0, "maxY": 20107.0, "series": [{"data": [[33.0, 739.5], [55.0, 4052.0], [58.0, 4287.0], [65.0, 3649.0], [81.0, 1341.5], [82.0, 230.5], [96.0, 2927.0], [101.0, 4462.0], [113.0, 4645.5], [116.0, 4736.5], [122.0, 5201.5], [145.0, 3542.5], [150.0, 3100.0], [151.0, 11465.0], [156.0, 5612.5], [154.0, 5081.5], [163.0, 3914.0], [167.0, 4009.5], [161.0, 19769.0], [175.0, 1308.0], [179.0, 5822.5], [178.0, 1489.0], [12.0, 289.5], [13.0, 2805.0], [215.0, 958.0], [236.0, 3522.0], [245.0, 2487.5], [24.0, 4855.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 2262.0], [145.0, 6223.0], [156.0, 303.5], [154.0, 9180.5], [163.0, 703.0], [167.0, 3205.5], [161.0, 20107.0], [175.0, 16273.0], [179.0, 705.0], [178.0, 6152.5], [245.0, 103.0], [81.0, 3512.0], [96.0, 3208.5], [113.0, 106.0], [116.0, 261.5], [122.0, 157.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 245.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 12.0, "maxY": 20092.5, "series": [{"data": [[33.0, 739.5], [55.0, 4039.0], [58.0, 4286.5], [65.0, 3648.0], [81.0, 1341.5], [82.0, 230.5], [96.0, 2927.0], [101.0, 4462.0], [113.0, 4645.0], [116.0, 4725.0], [122.0, 5200.5], [145.0, 3542.5], [150.0, 3100.0], [151.0, 11465.0], [156.0, 5609.5], [154.0, 5081.5], [163.0, 3913.0], [167.0, 4009.5], [161.0, 19769.0], [175.0, 1308.0], [179.0, 5822.5], [178.0, 1489.0], [12.0, 289.5], [13.0, 2794.0], [215.0, 958.0], [236.0, 3522.0], [245.0, 2487.5], [24.0, 4853.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[33.0, 2111.0], [145.0, 6223.0], [156.0, 0.0], [154.0, 9022.0], [163.0, 0.0], [167.0, 1533.0], [161.0, 20092.5], [175.0, 15964.0], [179.0, 0.0], [178.0, 2796.5], [245.0, 0.0], [81.0, 0.0], [96.0, 3101.0], [113.0, 0.0], [116.0, 0.0], [122.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 245.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 14.016666666666667, "minX": 1.7249373E12, "maxY": 53.15, "series": [{"data": [[1.72493736E12, 53.15], [1.7249373E12, 14.016666666666667]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72493736E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.2833333333333333, "minX": 1.7249373E12, "maxY": 33.266666666666666, "series": [{"data": [[1.72493736E12, 30.083333333333332], [1.7249373E12, 3.183333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72493736E12, 33.266666666666666]], "isOverall": false, "label": "202", "isController": false}, {"data": [[1.72493736E12, 0.2833333333333333]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.72493736E12, 0.35]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72493736E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.31666666666666665, "minX": 1.7249373E12, "maxY": 33.266666666666666, "series": [{"data": [[1.72493736E12, 33.266666666666666]], "isOverall": false, "label": "Create Order-success", "isController": false}, {"data": [[1.72493736E12, 30.083333333333332], [1.7249373E12, 3.183333333333333]], "isOverall": false, "label": "Prepare Order-success", "isController": false}, {"data": [[1.72493736E12, 0.31666666666666665]], "isOverall": false, "label": "Prepare Order-failure", "isController": false}, {"data": [[1.72493736E12, 0.31666666666666665]], "isOverall": false, "label": "Create Order-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72493736E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.6333333333333333, "minX": 1.7249373E12, "maxY": 63.35, "series": [{"data": [[1.72493736E12, 63.35], [1.7249373E12, 3.183333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72493736E12, 0.6333333333333333]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72493736E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

