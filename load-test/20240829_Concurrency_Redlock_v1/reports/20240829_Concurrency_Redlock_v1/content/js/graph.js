/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 15.0, "minX": 0.0, "maxY": 40240.0, "series": [{"data": [[0.0, 15.0], [0.1, 18.0], [0.2, 20.0], [0.3, 20.0], [0.4, 20.0], [0.5, 21.0], [0.6, 21.0], [0.7, 21.0], [0.8, 21.0], [0.9, 21.0], [1.0, 21.0], [1.1, 22.0], [1.2, 22.0], [1.3, 22.0], [1.4, 22.0], [1.5, 22.0], [1.6, 23.0], [1.7, 23.0], [1.8, 23.0], [1.9, 23.0], [2.0, 23.0], [2.1, 23.0], [2.2, 23.0], [2.3, 24.0], [2.4, 24.0], [2.5, 24.0], [2.6, 24.0], [2.7, 24.0], [2.8, 24.0], [2.9, 24.0], [3.0, 24.0], [3.1, 25.0], [3.2, 25.0], [3.3, 25.0], [3.4, 25.0], [3.5, 25.0], [3.6, 25.0], [3.7, 25.0], [3.8, 26.0], [3.9, 26.0], [4.0, 26.0], [4.1, 26.0], [4.2, 26.0], [4.3, 26.0], [4.4, 26.0], [4.5, 26.0], [4.6, 26.0], [4.7, 26.0], [4.8, 26.0], [4.9, 26.0], [5.0, 26.0], [5.1, 27.0], [5.2, 27.0], [5.3, 27.0], [5.4, 27.0], [5.5, 27.0], [5.6, 27.0], [5.7, 27.0], [5.8, 28.0], [5.9, 28.0], [6.0, 28.0], [6.1, 28.0], [6.2, 28.0], [6.3, 28.0], [6.4, 28.0], [6.5, 29.0], [6.6, 29.0], [6.7, 29.0], [6.8, 29.0], [6.9, 29.0], [7.0, 29.0], [7.1, 29.0], [7.2, 29.0], [7.3, 30.0], [7.4, 30.0], [7.5, 31.0], [7.6, 32.0], [7.7, 32.0], [7.8, 32.0], [7.9, 33.0], [8.0, 33.0], [8.1, 35.0], [8.2, 36.0], [8.3, 36.0], [8.4, 36.0], [8.5, 36.0], [8.6, 37.0], [8.7, 37.0], [8.8, 38.0], [8.9, 39.0], [9.0, 42.0], [9.1, 44.0], [9.2, 44.0], [9.3, 47.0], [9.4, 47.0], [9.5, 47.0], [9.6, 47.0], [9.7, 48.0], [9.8, 49.0], [9.9, 50.0], [10.0, 51.0], [10.1, 53.0], [10.2, 56.0], [10.3, 57.0], [10.4, 58.0], [10.5, 59.0], [10.6, 62.0], [10.7, 63.0], [10.8, 69.0], [10.9, 72.0], [11.0, 83.0], [11.1, 127.0], [11.2, 173.0], [11.3, 208.0], [11.4, 236.0], [11.5, 280.0], [11.6, 330.0], [11.7, 368.0], [11.8, 416.0], [11.9, 436.0], [12.0, 473.0], [12.1, 524.0], [12.2, 583.0], [12.3, 644.0], [12.4, 697.0], [12.5, 803.0], [12.6, 868.0], [12.7, 884.0], [12.8, 918.0], [12.9, 980.0], [13.0, 981.0], [13.1, 995.0], [13.2, 1062.0], [13.3, 1117.0], [13.4, 1173.0], [13.5, 1212.0], [13.6, 1240.0], [13.7, 1260.0], [13.8, 1353.0], [13.9, 1390.0], [14.0, 1484.0], [14.1, 1514.0], [14.2, 1572.0], [14.3, 1593.0], [14.4, 1646.0], [14.5, 1724.0], [14.6, 1839.0], [14.7, 1868.0], [14.8, 1968.0], [14.9, 2016.0], [15.0, 2134.0], [15.1, 2198.0], [15.2, 2246.0], [15.3, 2293.0], [15.4, 2299.0], [15.5, 2299.0], [15.6, 2303.0], [15.7, 2310.0], [15.8, 2316.0], [15.9, 2321.0], [16.0, 2402.0], [16.1, 2429.0], [16.2, 2464.0], [16.3, 2488.0], [16.4, 2570.0], [16.5, 2703.0], [16.6, 2716.0], [16.7, 2746.0], [16.8, 2865.0], [16.9, 2894.0], [17.0, 2979.0], [17.1, 3005.0], [17.2, 3052.0], [17.3, 3103.0], [17.4, 3124.0], [17.5, 3165.0], [17.6, 3202.0], [17.7, 3249.0], [17.8, 3256.0], [17.9, 3279.0], [18.0, 3331.0], [18.1, 3370.0], [18.2, 3439.0], [18.3, 3478.0], [18.4, 3563.0], [18.5, 3639.0], [18.6, 3670.0], [18.7, 3752.0], [18.8, 3806.0], [18.9, 3832.0], [19.0, 3866.0], [19.1, 3888.0], [19.2, 3899.0], [19.3, 3921.0], [19.4, 3947.0], [19.5, 3992.0], [19.6, 4072.0], [19.7, 4116.0], [19.8, 4145.0], [19.9, 4169.0], [20.0, 4204.0], [20.1, 4232.0], [20.2, 4301.0], [20.3, 4323.0], [20.4, 4393.0], [20.5, 4451.0], [20.6, 4581.0], [20.7, 4593.0], [20.8, 4607.0], [20.9, 4648.0], [21.0, 4679.0], [21.1, 4729.0], [21.2, 4797.0], [21.3, 4880.0], [21.4, 4946.0], [21.5, 4983.0], [21.6, 4997.0], [21.7, 5054.0], [21.8, 5174.0], [21.9, 5206.0], [22.0, 5243.0], [22.1, 5267.0], [22.2, 5301.0], [22.3, 5352.0], [22.4, 5386.0], [22.5, 5442.0], [22.6, 5495.0], [22.7, 5588.0], [22.8, 5693.0], [22.9, 5793.0], [23.0, 5835.0], [23.1, 5896.0], [23.2, 5968.0], [23.3, 6016.0], [23.4, 6037.0], [23.5, 6133.0], [23.6, 6148.0], [23.7, 6199.0], [23.8, 6310.0], [23.9, 6362.0], [24.0, 6468.0], [24.1, 6516.0], [24.2, 6574.0], [24.3, 6607.0], [24.4, 6655.0], [24.5, 6710.0], [24.6, 6757.0], [24.7, 6844.0], [24.8, 6900.0], [24.9, 6960.0], [25.0, 7019.0], [25.1, 7113.0], [25.2, 7174.0], [25.3, 7216.0], [25.4, 7264.0], [25.5, 7317.0], [25.6, 7410.0], [25.7, 7463.0], [25.8, 7485.0], [25.9, 7538.0], [26.0, 7618.0], [26.1, 7744.0], [26.2, 7775.0], [26.3, 7827.0], [26.4, 7843.0], [26.5, 7900.0], [26.6, 7948.0], [26.7, 7986.0], [26.8, 8035.0], [26.9, 8118.0], [27.0, 8178.0], [27.1, 8272.0], [27.2, 8313.0], [27.3, 8344.0], [27.4, 8414.0], [27.5, 8470.0], [27.6, 8531.0], [27.7, 8591.0], [27.8, 8655.0], [27.9, 8695.0], [28.0, 8777.0], [28.1, 8780.0], [28.2, 8819.0], [28.3, 8858.0], [28.4, 8899.0], [28.5, 8974.0], [28.6, 9015.0], [28.7, 9087.0], [28.8, 9113.0], [28.9, 9152.0], [29.0, 9258.0], [29.1, 9323.0], [29.2, 9336.0], [29.3, 9379.0], [29.4, 9425.0], [29.5, 9531.0], [29.6, 9597.0], [29.7, 9657.0], [29.8, 9668.0], [29.9, 9719.0], [30.0, 9789.0], [30.1, 9823.0], [30.2, 9882.0], [30.3, 9902.0], [30.4, 9933.0], [30.5, 9963.0], [30.6, 9984.0], [30.7, 10008.0], [30.8, 10035.0], [30.9, 10096.0], [31.0, 10116.0], [31.1, 10150.0], [31.2, 10181.0], [31.3, 10196.0], [31.4, 10255.0], [31.5, 10306.0], [31.6, 10368.0], [31.7, 10409.0], [31.8, 10451.0], [31.9, 10466.0], [32.0, 10508.0], [32.1, 10526.0], [32.2, 10565.0], [32.3, 10591.0], [32.4, 10608.0], [32.5, 10623.0], [32.6, 10655.0], [32.7, 10670.0], [32.8, 10701.0], [32.9, 10729.0], [33.0, 10743.0], [33.1, 10781.0], [33.2, 10819.0], [33.3, 10863.0], [33.4, 10929.0], [33.5, 10959.0], [33.6, 11013.0], [33.7, 11035.0], [33.8, 11071.0], [33.9, 11095.0], [34.0, 11103.0], [34.1, 11126.0], [34.2, 11160.0], [34.3, 11251.0], [34.4, 11271.0], [34.5, 11283.0], [34.6, 11308.0], [34.7, 11332.0], [34.8, 11372.0], [34.9, 11394.0], [35.0, 11424.0], [35.1, 11499.0], [35.2, 11515.0], [35.3, 11522.0], [35.4, 11564.0], [35.5, 11642.0], [35.6, 11691.0], [35.7, 11707.0], [35.8, 11735.0], [35.9, 11746.0], [36.0, 11810.0], [36.1, 11832.0], [36.2, 11841.0], [36.3, 11874.0], [36.4, 11918.0], [36.5, 11965.0], [36.6, 12001.0], [36.7, 12064.0], [36.8, 12065.0], [36.9, 12105.0], [37.0, 12139.0], [37.1, 12167.0], [37.2, 12242.0], [37.3, 12246.0], [37.4, 12273.0], [37.5, 12311.0], [37.6, 12335.0], [37.7, 12390.0], [37.8, 12400.0], [37.9, 12418.0], [38.0, 12464.0], [38.1, 12495.0], [38.2, 12526.0], [38.3, 12569.0], [38.4, 12599.0], [38.5, 12650.0], [38.6, 12687.0], [38.7, 12694.0], [38.8, 12720.0], [38.9, 12764.0], [39.0, 12776.0], [39.1, 12804.0], [39.2, 12836.0], [39.3, 12852.0], [39.4, 12910.0], [39.5, 12945.0], [39.6, 12987.0], [39.7, 13053.0], [39.8, 13089.0], [39.9, 13100.0], [40.0, 13142.0], [40.1, 13210.0], [40.2, 13274.0], [40.3, 13337.0], [40.4, 13352.0], [40.5, 13379.0], [40.6, 13390.0], [40.7, 13425.0], [40.8, 13443.0], [40.9, 13490.0], [41.0, 13511.0], [41.1, 13535.0], [41.2, 13556.0], [41.3, 13610.0], [41.4, 13630.0], [41.5, 13673.0], [41.6, 13717.0], [41.7, 13779.0], [41.8, 13814.0], [41.9, 13876.0], [42.0, 13884.0], [42.1, 13933.0], [42.2, 13974.0], [42.3, 13990.0], [42.4, 14015.0], [42.5, 14066.0], [42.6, 14071.0], [42.7, 14111.0], [42.8, 14170.0], [42.9, 14215.0], [43.0, 14250.0], [43.1, 14277.0], [43.2, 14299.0], [43.3, 14382.0], [43.4, 14399.0], [43.5, 14436.0], [43.6, 14459.0], [43.7, 14486.0], [43.8, 14511.0], [43.9, 14524.0], [44.0, 14556.0], [44.1, 14576.0], [44.2, 14586.0], [44.3, 14606.0], [44.4, 14638.0], [44.5, 14674.0], [44.6, 14683.0], [44.7, 14733.0], [44.8, 14760.0], [44.9, 14790.0], [45.0, 14804.0], [45.1, 14831.0], [45.2, 14881.0], [45.3, 14904.0], [45.4, 14911.0], [45.5, 14933.0], [45.6, 14971.0], [45.7, 14996.0], [45.8, 15036.0], [45.9, 15068.0], [46.0, 15102.0], [46.1, 15159.0], [46.2, 15224.0], [46.3, 15244.0], [46.4, 15279.0], [46.5, 15342.0], [46.6, 15360.0], [46.7, 15386.0], [46.8, 15411.0], [46.9, 15437.0], [47.0, 15463.0], [47.1, 15490.0], [47.2, 15495.0], [47.3, 15531.0], [47.4, 15614.0], [47.5, 15629.0], [47.6, 15657.0], [47.7, 15675.0], [47.8, 15721.0], [47.9, 15735.0], [48.0, 15766.0], [48.1, 15794.0], [48.2, 15813.0], [48.3, 15830.0], [48.4, 15875.0], [48.5, 15899.0], [48.6, 15917.0], [48.7, 15932.0], [48.8, 15965.0], [48.9, 15995.0], [49.0, 16016.0], [49.1, 16022.0], [49.2, 16053.0], [49.3, 16073.0], [49.4, 16114.0], [49.5, 16169.0], [49.6, 16204.0], [49.7, 16239.0], [49.8, 16261.0], [49.9, 16283.0], [50.0, 16328.0], [50.1, 16353.0], [50.2, 16393.0], [50.3, 16472.0], [50.4, 16521.0], [50.5, 16564.0], [50.6, 16572.0], [50.7, 16591.0], [50.8, 16609.0], [50.9, 16646.0], [51.0, 16696.0], [51.1, 16743.0], [51.2, 16760.0], [51.3, 16770.0], [51.4, 16785.0], [51.5, 16799.0], [51.6, 16833.0], [51.7, 16853.0], [51.8, 16890.0], [51.9, 16897.0], [52.0, 16922.0], [52.1, 16948.0], [52.2, 16981.0], [52.3, 17026.0], [52.4, 17045.0], [52.5, 17107.0], [52.6, 17157.0], [52.7, 17215.0], [52.8, 17243.0], [52.9, 17276.0], [53.0, 17295.0], [53.1, 17338.0], [53.2, 17350.0], [53.3, 17367.0], [53.4, 17428.0], [53.5, 17475.0], [53.6, 17489.0], [53.7, 17501.0], [53.8, 17529.0], [53.9, 17564.0], [54.0, 17607.0], [54.1, 17629.0], [54.2, 17654.0], [54.3, 17711.0], [54.4, 17714.0], [54.5, 17737.0], [54.6, 17758.0], [54.7, 17779.0], [54.8, 17806.0], [54.9, 17863.0], [55.0, 17875.0], [55.1, 17892.0], [55.2, 17899.0], [55.3, 17925.0], [55.4, 17992.0], [55.5, 18017.0], [55.6, 18051.0], [55.7, 18104.0], [55.8, 18181.0], [55.9, 18190.0], [56.0, 18221.0], [56.1, 18223.0], [56.2, 18260.0], [56.3, 18271.0], [56.4, 18300.0], [56.5, 18322.0], [56.6, 18373.0], [56.7, 18391.0], [56.8, 18428.0], [56.9, 18462.0], [57.0, 18513.0], [57.1, 18551.0], [57.2, 18571.0], [57.3, 18586.0], [57.4, 18625.0], [57.5, 18629.0], [57.6, 18670.0], [57.7, 18677.0], [57.8, 18705.0], [57.9, 18717.0], [58.0, 18775.0], [58.1, 18821.0], [58.2, 18841.0], [58.3, 18873.0], [58.4, 18922.0], [58.5, 18926.0], [58.6, 18948.0], [58.7, 18973.0], [58.8, 19007.0], [58.9, 19040.0], [59.0, 19072.0], [59.1, 19117.0], [59.2, 19130.0], [59.3, 19161.0], [59.4, 19205.0], [59.5, 19263.0], [59.6, 19312.0], [59.7, 19364.0], [59.8, 19383.0], [59.9, 19398.0], [60.0, 19428.0], [60.1, 19442.0], [60.2, 19491.0], [60.3, 19537.0], [60.4, 19564.0], [60.5, 19605.0], [60.6, 19657.0], [60.7, 19680.0], [60.8, 19715.0], [60.9, 19740.0], [61.0, 19779.0], [61.1, 19792.0], [61.2, 19798.0], [61.3, 19823.0], [61.4, 19857.0], [61.5, 19920.0], [61.6, 19942.0], [61.7, 19982.0], [61.8, 20015.0], [61.9, 20044.0], [62.0, 20073.0], [62.1, 20116.0], [62.2, 20136.0], [62.3, 20148.0], [62.4, 20182.0], [62.5, 20201.0], [62.6, 20232.0], [62.7, 20266.0], [62.8, 20285.0], [62.9, 20288.0], [63.0, 20300.0], [63.1, 20311.0], [63.2, 20353.0], [63.3, 20481.0], [63.4, 20519.0], [63.5, 20577.0], [63.6, 20608.0], [63.7, 20622.0], [63.8, 20639.0], [63.9, 20686.0], [64.0, 20694.0], [64.1, 20714.0], [64.2, 20750.0], [64.3, 20807.0], [64.4, 20859.0], [64.5, 20882.0], [64.6, 20910.0], [64.7, 20943.0], [64.8, 20992.0], [64.9, 21023.0], [65.0, 21046.0], [65.1, 21056.0], [65.2, 21084.0], [65.3, 21113.0], [65.4, 21141.0], [65.5, 21165.0], [65.6, 21182.0], [65.7, 21225.0], [65.8, 21244.0], [65.9, 21279.0], [66.0, 21312.0], [66.1, 21351.0], [66.2, 21393.0], [66.3, 21429.0], [66.4, 21466.0], [66.5, 21484.0], [66.6, 21531.0], [66.7, 21551.0], [66.8, 21579.0], [66.9, 21603.0], [67.0, 21621.0], [67.1, 21648.0], [67.2, 21688.0], [67.3, 21718.0], [67.4, 21787.0], [67.5, 21850.0], [67.6, 21866.0], [67.7, 21909.0], [67.8, 21961.0], [67.9, 21987.0], [68.0, 22016.0], [68.1, 22033.0], [68.2, 22055.0], [68.3, 22082.0], [68.4, 22114.0], [68.5, 22148.0], [68.6, 22182.0], [68.7, 22218.0], [68.8, 22243.0], [68.9, 22275.0], [69.0, 22312.0], [69.1, 22325.0], [69.2, 22365.0], [69.3, 22378.0], [69.4, 22414.0], [69.5, 22474.0], [69.6, 22510.0], [69.7, 22534.0], [69.8, 22544.0], [69.9, 22580.0], [70.0, 22610.0], [70.1, 22648.0], [70.2, 22711.0], [70.3, 22725.0], [70.4, 22758.0], [70.5, 22770.0], [70.6, 22798.0], [70.7, 22828.0], [70.8, 22835.0], [70.9, 22855.0], [71.0, 22885.0], [71.1, 22902.0], [71.2, 22932.0], [71.3, 22952.0], [71.4, 22990.0], [71.5, 23013.0], [71.6, 23061.0], [71.7, 23129.0], [71.8, 23185.0], [71.9, 23248.0], [72.0, 23254.0], [72.1, 23290.0], [72.2, 23306.0], [72.3, 23364.0], [72.4, 23409.0], [72.5, 23432.0], [72.6, 23442.0], [72.7, 23463.0], [72.8, 23465.0], [72.9, 23503.0], [73.0, 23536.0], [73.1, 23569.0], [73.2, 23603.0], [73.3, 23640.0], [73.4, 23667.0], [73.5, 23705.0], [73.6, 23733.0], [73.7, 23830.0], [73.8, 23861.0], [73.9, 23897.0], [74.0, 23962.0], [74.1, 24029.0], [74.2, 24089.0], [74.3, 24108.0], [74.4, 24144.0], [74.5, 24157.0], [74.6, 24175.0], [74.7, 24200.0], [74.8, 24228.0], [74.9, 24269.0], [75.0, 24329.0], [75.1, 24361.0], [75.2, 24380.0], [75.3, 24404.0], [75.4, 24453.0], [75.5, 24502.0], [75.6, 24576.0], [75.7, 24595.0], [75.8, 24627.0], [75.9, 24635.0], [76.0, 24648.0], [76.1, 24692.0], [76.2, 24716.0], [76.3, 24744.0], [76.4, 24755.0], [76.5, 24802.0], [76.6, 24842.0], [76.7, 24856.0], [76.8, 24883.0], [76.9, 24961.0], [77.0, 25019.0], [77.1, 25088.0], [77.2, 25175.0], [77.3, 25223.0], [77.4, 25263.0], [77.5, 25273.0], [77.6, 25305.0], [77.7, 25336.0], [77.8, 25372.0], [77.9, 25421.0], [78.0, 25489.0], [78.1, 25511.0], [78.2, 25537.0], [78.3, 25554.0], [78.4, 25591.0], [78.5, 25627.0], [78.6, 25665.0], [78.7, 25712.0], [78.8, 25760.0], [78.9, 25822.0], [79.0, 25852.0], [79.1, 25874.0], [79.2, 25934.0], [79.3, 25949.0], [79.4, 26001.0], [79.5, 26022.0], [79.6, 26049.0], [79.7, 26100.0], [79.8, 26171.0], [79.9, 26204.0], [80.0, 26275.0], [80.1, 26304.0], [80.2, 26324.0], [80.3, 26354.0], [80.4, 26384.0], [80.5, 26431.0], [80.6, 26466.0], [80.7, 26490.0], [80.8, 26514.0], [80.9, 26589.0], [81.0, 26613.0], [81.1, 26648.0], [81.2, 26717.0], [81.3, 26760.0], [81.4, 26786.0], [81.5, 26818.0], [81.6, 26845.0], [81.7, 26891.0], [81.8, 26964.0], [81.9, 26977.0], [82.0, 27026.0], [82.1, 27047.0], [82.2, 27074.0], [82.3, 27140.0], [82.4, 27196.0], [82.5, 27223.0], [82.6, 27240.0], [82.7, 27267.0], [82.8, 27299.0], [82.9, 27318.0], [83.0, 27339.0], [83.1, 27370.0], [83.2, 27375.0], [83.3, 27403.0], [83.4, 27419.0], [83.5, 27429.0], [83.6, 27452.0], [83.7, 27481.0], [83.8, 27519.0], [83.9, 27553.0], [84.0, 27560.0], [84.1, 27600.0], [84.2, 27638.0], [84.3, 27677.0], [84.4, 27786.0], [84.5, 27829.0], [84.6, 27886.0], [84.7, 27930.0], [84.8, 27935.0], [84.9, 27973.0], [85.0, 27995.0], [85.1, 28042.0], [85.2, 28099.0], [85.3, 28119.0], [85.4, 28136.0], [85.5, 28172.0], [85.6, 28185.0], [85.7, 28224.0], [85.8, 28247.0], [85.9, 28291.0], [86.0, 28332.0], [86.1, 28435.0], [86.2, 28499.0], [86.3, 28537.0], [86.4, 28566.0], [86.5, 28589.0], [86.6, 28634.0], [86.7, 28690.0], [86.8, 28720.0], [86.9, 28746.0], [87.0, 28765.0], [87.1, 28791.0], [87.2, 28998.0], [87.3, 29071.0], [87.4, 29107.0], [87.5, 29134.0], [87.6, 29162.0], [87.7, 29184.0], [87.8, 29226.0], [87.9, 29296.0], [88.0, 29433.0], [88.1, 29636.0], [88.2, 29648.0], [88.3, 29686.0], [88.4, 29724.0], [88.5, 29758.0], [88.6, 29872.0], [88.7, 29910.0], [88.8, 29933.0], [88.9, 30021.0], [89.0, 30224.0], [89.1, 30231.0], [89.2, 30276.0], [89.3, 30495.0], [89.4, 30544.0], [89.5, 30633.0], [89.6, 30783.0], [89.7, 31140.0], [89.8, 31162.0], [89.9, 31185.0], [90.0, 31196.0], [90.1, 31292.0], [90.2, 31411.0], [90.3, 31473.0], [90.4, 31814.0], [90.5, 32124.0], [90.6, 32216.0], [90.7, 32311.0], [90.8, 32374.0], [90.9, 32580.0], [91.0, 32785.0], [91.1, 32877.0], [91.2, 32923.0], [91.3, 33172.0], [91.4, 33224.0], [91.5, 33276.0], [91.6, 33345.0], [91.7, 33411.0], [91.8, 33535.0], [91.9, 33673.0], [92.0, 33858.0], [92.1, 33910.0], [92.2, 33944.0], [92.3, 33988.0], [92.4, 34013.0], [92.5, 34067.0], [92.6, 34119.0], [92.7, 34350.0], [92.8, 34383.0], [92.9, 34405.0], [93.0, 34440.0], [93.1, 34487.0], [93.2, 34523.0], [93.3, 34566.0], [93.4, 34638.0], [93.5, 34727.0], [93.6, 34781.0], [93.7, 34832.0], [93.8, 34854.0], [93.9, 34895.0], [94.0, 35028.0], [94.1, 35102.0], [94.2, 35155.0], [94.3, 35240.0], [94.4, 35280.0], [94.5, 35315.0], [94.6, 35450.0], [94.7, 35528.0], [94.8, 35611.0], [94.9, 35698.0], [95.0, 35749.0], [95.1, 35872.0], [95.2, 35915.0], [95.3, 35987.0], [95.4, 36040.0], [95.5, 36070.0], [95.6, 36088.0], [95.7, 36184.0], [95.8, 36280.0], [95.9, 36351.0], [96.0, 36422.0], [96.1, 36434.0], [96.2, 36444.0], [96.3, 36523.0], [96.4, 36568.0], [96.5, 36627.0], [96.6, 36701.0], [96.7, 36736.0], [96.8, 36759.0], [96.9, 36996.0], [97.0, 37041.0], [97.1, 37047.0], [97.2, 37118.0], [97.3, 37135.0], [97.4, 37179.0], [97.5, 37251.0], [97.6, 37262.0], [97.7, 37345.0], [97.8, 37381.0], [97.9, 37537.0], [98.0, 37570.0], [98.1, 37618.0], [98.2, 37643.0], [98.3, 37674.0], [98.4, 37758.0], [98.5, 37831.0], [98.6, 37912.0], [98.7, 38016.0], [98.8, 38060.0], [98.9, 38364.0], [99.0, 38474.0], [99.1, 38539.0], [99.2, 38561.0], [99.3, 38582.0], [99.4, 38647.0], [99.5, 38959.0], [99.6, 39058.0], [99.7, 39177.0], [99.8, 39648.0], [99.9, 39737.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 220.0, "series": [{"data": [[0.0, 220.0], [100.0, 5.0], [32900.0, 1.0], [33300.0, 2.0], [34100.0, 2.0], [34500.0, 3.0], [35300.0, 2.0], [35700.0, 2.0], [36100.0, 2.0], [36500.0, 3.0], [36900.0, 1.0], [37300.0, 4.0], [37700.0, 3.0], [38500.0, 6.0], [38900.0, 2.0], [39700.0, 1.0], [39300.0, 1.0], [200.0, 5.0], [300.0, 5.0], [400.0, 6.0], [500.0, 3.0], [600.0, 4.0], [800.0, 6.0], [900.0, 8.0], [1000.0, 3.0], [1100.0, 4.0], [1200.0, 6.0], [1300.0, 3.0], [1400.0, 2.0], [1500.0, 6.0], [1600.0, 2.0], [1700.0, 2.0], [1800.0, 4.0], [1900.0, 3.0], [2000.0, 2.0], [2100.0, 3.0], [2200.0, 8.0], [2300.0, 9.0], [2400.0, 8.0], [2500.0, 2.0], [2700.0, 6.0], [2800.0, 3.0], [2900.0, 3.0], [3000.0, 4.0], [3100.0, 6.0], [3200.0, 8.0], [3300.0, 3.0], [3400.0, 4.0], [3500.0, 2.0], [3600.0, 5.0], [3700.0, 2.0], [3800.0, 9.0], [3900.0, 6.0], [4000.0, 2.0], [4300.0, 5.0], [4100.0, 7.0], [4200.0, 4.0], [4600.0, 6.0], [4500.0, 4.0], [4400.0, 2.0], [4800.0, 2.0], [4700.0, 4.0], [4900.0, 6.0], [5000.0, 2.0], [5100.0, 2.0], [5200.0, 7.0], [5300.0, 5.0], [5400.0, 4.0], [5600.0, 2.0], [5500.0, 2.0], [5800.0, 4.0], [5700.0, 2.0], [6100.0, 6.0], [5900.0, 3.0], [6000.0, 3.0], [6300.0, 3.0], [6200.0, 1.0], [6500.0, 4.0], [6600.0, 3.0], [6400.0, 3.0], [6800.0, 2.0], [6900.0, 3.0], [6700.0, 5.0], [7000.0, 3.0], [7100.0, 4.0], [7200.0, 4.0], [7400.0, 5.0], [7300.0, 2.0], [7600.0, 3.0], [7500.0, 2.0], [7800.0, 4.0], [7700.0, 4.0], [7900.0, 5.0], [8000.0, 3.0], [8100.0, 3.0], [8200.0, 3.0], [8300.0, 3.0], [8500.0, 4.0], [8700.0, 4.0], [8400.0, 4.0], [8600.0, 4.0], [8800.0, 6.0], [8900.0, 2.0], [9100.0, 4.0], [9000.0, 4.0], [9200.0, 2.0], [9300.0, 7.0], [9600.0, 5.0], [9700.0, 3.0], [9500.0, 3.0], [9400.0, 2.0], [10100.0, 8.0], [9900.0, 8.0], [9800.0, 5.0], [10000.0, 5.0], [10200.0, 3.0], [10400.0, 7.0], [10500.0, 8.0], [10600.0, 8.0], [10700.0, 7.0], [10300.0, 3.0], [11000.0, 7.0], [10800.0, 5.0], [11100.0, 6.0], [10900.0, 4.0], [11200.0, 7.0], [11300.0, 7.0], [11700.0, 6.0], [11500.0, 6.0], [11400.0, 4.0], [11600.0, 5.0], [11900.0, 3.0], [11800.0, 8.0], [12200.0, 7.0], [12000.0, 7.0], [12100.0, 5.0], [12300.0, 7.0], [12600.0, 6.0], [12400.0, 7.0], [12700.0, 7.0], [12500.0, 6.0], [12800.0, 6.0], [12900.0, 5.0], [13000.0, 5.0], [13300.0, 9.0], [13100.0, 4.0], [13200.0, 3.0], [13500.0, 7.0], [13400.0, 5.0], [13600.0, 6.0], [13700.0, 3.0], [13800.0, 6.0], [14200.0, 8.0], [13900.0, 6.0], [14000.0, 7.0], [14100.0, 3.0], [14300.0, 4.0], [14600.0, 8.0], [14400.0, 7.0], [14500.0, 9.0], [14700.0, 6.0], [14800.0, 7.0], [14900.0, 9.0], [15000.0, 5.0], [15200.0, 5.0], [15300.0, 7.0], [15100.0, 4.0], [15400.0, 9.0], [15600.0, 7.0], [15700.0, 8.0], [15500.0, 3.0], [15800.0, 8.0], [16000.0, 9.0], [15900.0, 8.0], [16200.0, 7.0], [16100.0, 4.0], [16300.0, 6.0], [16600.0, 5.0], [16400.0, 3.0], [16800.0, 8.0], [17000.0, 5.0], [17200.0, 7.0], [17400.0, 6.0], [17600.0, 6.0], [17800.0, 9.0], [18000.0, 5.0], [18200.0, 8.0], [18400.0, 5.0], [18800.0, 5.0], [18600.0, 9.0], [19000.0, 5.0], [19400.0, 6.0], [19200.0, 4.0], [19600.0, 5.0], [19800.0, 5.0], [20000.0, 7.0], [20400.0, 2.0], [20200.0, 10.0], [20600.0, 9.0], [21000.0, 9.0], [20800.0, 5.0], [21200.0, 7.0], [21400.0, 6.0], [21600.0, 7.0], [21800.0, 5.0], [22000.0, 8.0], [22200.0, 6.0], [22400.0, 3.0], [22800.0, 8.0], [23000.0, 5.0], [23400.0, 10.0], [23200.0, 7.0], [22600.0, 4.0], [23600.0, 6.0], [24400.0, 5.0], [24200.0, 6.0], [24000.0, 4.0], [23800.0, 5.0], [24600.0, 8.0], [24800.0, 7.0], [25200.0, 6.0], [25400.0, 4.0], [25000.0, 4.0], [25600.0, 5.0], [25800.0, 5.0], [26000.0, 6.0], [26200.0, 3.0], [26600.0, 3.0], [26400.0, 6.0], [27400.0, 9.0], [27200.0, 8.0], [26800.0, 5.0], [27000.0, 7.0], [27600.0, 5.0], [28000.0, 4.0], [27800.0, 5.0], [28200.0, 5.0], [28600.0, 4.0], [28400.0, 4.0], [29000.0, 3.0], [29200.0, 4.0], [29400.0, 1.0], [29600.0, 7.0], [28800.0, 1.0], [29800.0, 3.0], [30000.0, 1.0], [30200.0, 5.0], [30400.0, 2.0], [30600.0, 1.0], [31400.0, 3.0], [31200.0, 2.0], [31600.0, 1.0], [31800.0, 1.0], [32200.0, 2.0], [32400.0, 1.0], [32600.0, 1.0], [32800.0, 3.0], [33200.0, 4.0], [33600.0, 1.0], [34000.0, 4.0], [34400.0, 6.0], [34800.0, 6.0], [35200.0, 5.0], [35600.0, 3.0], [36400.0, 7.0], [36000.0, 6.0], [37200.0, 4.0], [37600.0, 5.0], [38000.0, 4.0], [38400.0, 2.0], [39600.0, 2.0], [33100.0, 2.0], [33500.0, 3.0], [33900.0, 6.0], [34300.0, 4.0], [34700.0, 3.0], [35100.0, 3.0], [35500.0, 3.0], [35900.0, 3.0], [36300.0, 2.0], [36700.0, 6.0], [37100.0, 5.0], [37500.0, 5.0], [37900.0, 2.0], [38300.0, 1.0], [39100.0, 2.0], [16700.0, 10.0], [16500.0, 8.0], [16900.0, 6.0], [17300.0, 7.0], [17100.0, 4.0], [17700.0, 10.0], [17500.0, 6.0], [17900.0, 4.0], [18100.0, 6.0], [18300.0, 7.0], [18500.0, 7.0], [18700.0, 6.0], [18900.0, 9.0], [19300.0, 7.0], [19100.0, 7.0], [20300.0, 6.0], [19500.0, 5.0], [19700.0, 10.0], [19900.0, 5.0], [20100.0, 8.0], [20900.0, 6.0], [20700.0, 5.0], [21300.0, 5.0], [21100.0, 7.0], [21500.0, 7.0], [20500.0, 4.0], [21700.0, 4.0], [21900.0, 5.0], [22100.0, 7.0], [22500.0, 9.0], [22300.0, 8.0], [22700.0, 10.0], [22900.0, 7.0], [23300.0, 4.0], [23100.0, 3.0], [23500.0, 6.0], [23700.0, 4.0], [24300.0, 5.0], [24100.0, 8.0], [24500.0, 5.0], [23900.0, 3.0], [24700.0, 7.0], [24900.0, 2.0], [25500.0, 8.0], [25300.0, 5.0], [25100.0, 3.0], [25700.0, 4.0], [25900.0, 5.0], [26300.0, 8.0], [26100.0, 4.0], [26500.0, 5.0], [26700.0, 7.0], [26900.0, 4.0], [27100.0, 3.0], [27300.0, 9.0], [27500.0, 7.0], [27900.0, 7.0], [27700.0, 2.0], [28100.0, 9.0], [28300.0, 2.0], [28500.0, 6.0], [28700.0, 8.0], [29100.0, 7.0], [29300.0, 1.0], [28900.0, 1.0], [29900.0, 4.0], [29700.0, 3.0], [30100.0, 1.0], [30500.0, 3.0], [30700.0, 2.0], [31100.0, 8.0], [31300.0, 1.0], [32100.0, 2.0], [31900.0, 1.0], [32300.0, 3.0], [32500.0, 1.0], [32700.0, 1.0], [33000.0, 1.0], [33400.0, 1.0], [33800.0, 3.0], [34600.0, 3.0], [35000.0, 3.0], [35400.0, 1.0], [35800.0, 3.0], [36600.0, 3.0], [36200.0, 2.0], [37000.0, 5.0], [37800.0, 2.0], [38600.0, 2.0], [40200.0, 1.0], [39000.0, 2.0]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 40200.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 3.0, "minX": 0.0, "ticks": [[0, "요청 수 \n(응답시간 <= 500ms)"], [1, "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)"], [2, "요청 수 \n(응답시간 > 1,500ms)"], [3, "오류 발생 요청"]], "maxY": 1718.0, "series": [{"data": [[0.0, 240.0]], "color": "#9ACD32", "isOverall": false, "label": "요청 수 \n(응답시간 <= 500ms)", "isController": false}, {"data": [[1.0, 39.0]], "color": "yellow", "isOverall": false, "label": "요청 수 \n(응답시간 > 500ms 및 <= 1,500ms)", "isController": false}, {"data": [[2.0, 1718.0]], "color": "orange", "isOverall": false, "label": "요청 수 \n(응답시간 > 1,500ms)", "isController": false}, {"data": [[3.0, 3.0]], "color": "#FF6347", "isOverall": false, "label": "오류 발생 요청", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 556.1834247410118, "minX": 1.72492986E12, "maxY": 560.150417827298, "series": [{"data": [[1.72492992E12, 556.1834247410118], [1.72492986E12, 560.150417827298]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72492992E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 23.0, "minX": 1.0, "maxY": 33172.0, "series": [{"data": [[2.0, 19685.0], [3.0, 19540.5], [4.0, 19528.5], [5.0, 19503.0], [6.0, 19880.0], [7.0, 19462.5], [8.0, 19602.0], [9.0, 23.0], [10.0, 25766.666666666668], [11.0, 19294.5], [12.0, 19282.0], [13.0, 19272.0], [14.0, 19250.5], [15.0, 19238.0], [16.0, 19206.0], [17.0, 20131.5], [18.0, 19295.5], [19.0, 19349.0], [20.0, 12929.333333333332], [21.0, 19040.0], [22.0, 23.0], [23.0, 25379.333333333336], [24.0, 19026.0], [25.0, 83.66666666666667], [26.0, 19279.5], [27.0, 18970.0], [28.0, 12696.666666666668], [29.0, 12672.0], [30.0, 12632.0], [31.0, 18892.5], [33.0, 9501.25], [32.0, 19837.0], [35.0, 12654.666666666668], [34.0, 18850.5], [36.0, 12560.333333333332], [37.0, 9480.75], [39.0, 18787.0], [38.0, 18799.5], [41.0, 9478.75], [40.0, 18779.0], [43.0, 18825.5], [42.0, 18838.5], [45.0, 18694.0], [44.0, 18714.0], [46.0, 9446.5], [47.0, 35.0], [48.0, 211.0], [49.0, 22390.8], [51.0, 18711.75], [50.0, 26.0], [52.0, 12403.333333333332], [53.0, 18571.5], [54.0, 12523.333333333332], [55.0, 31.5], [56.0, 14920.0], [57.0, 18636.5], [59.0, 12356.0], [58.0, 18532.0], [61.0, 12531.333333333332], [60.0, 18571.0], [63.0, 18384.5], [62.0, 18400.0], [67.0, 12580.666666666668], [66.0, 18392.5], [65.0, 18363.0], [64.0, 18373.0], [68.0, 12240.333333333332], [70.0, 12202.0], [71.0, 12469.333333333332], [69.0, 18294.0], [74.0, 12219.333333333332], [73.0, 12380.333333333332], [75.0, 18226.0], [72.0, 18380.0], [76.0, 12153.333333333332], [78.0, 12350.333333333332], [79.0, 12132.666666666668], [77.0, 18234.5], [82.0, 12414.333333333332], [83.0, 12076.0], [81.0, 18229.5], [80.0, 18153.0], [85.0, 507.5], [87.0, 18056.5], [86.0, 24255.0], [84.0, 18230.0], [89.0, 9224.0], [91.0, 17994.0], [90.0, 18049.5], [88.0, 18039.5], [94.0, 9018.5], [95.0, 17936.5], [93.0, 17961.5], [92.0, 17982.5], [97.0, 9244.25], [99.0, 27.0], [98.0, 18231.0], [96.0, 18049.0], [100.0, 14490.2], [103.0, 17819.5], [102.0, 18004.0], [101.0, 17853.0], [105.0, 9141.5], [107.0, 17735.5], [106.0, 17767.0], [104.0, 17802.5], [108.0, 9200.75], [110.0, 9089.25], [111.0, 17645.0], [109.0, 17674.0], [114.0, 11744.333333333332], [115.0, 17660.0], [113.0, 17613.5], [112.0, 17633.0], [116.0, 549.0], [119.0, 17511.5], [118.0, 17548.5], [117.0, 23410.0], [121.0, 11731.333333333332], [120.0, 12181.666666666668], [123.0, 17451.5], [122.0, 17459.0], [124.0, 11639.666666666668], [125.0, 12009.333333333332], [127.0, 17403.5], [126.0, 17416.5], [129.0, 8997.75], [132.0, 430.33333333333337], [135.0, 8959.0], [134.0, 17333.0], [133.0, 23144.0], [131.0, 17316.5], [130.0, 17353.5], [128.0, 17394.0], [137.0, 11497.666666666668], [143.0, 17246.0], [142.0, 22956.0], [141.0, 29.0], [140.0, 17202.0], [139.0, 17252.0], [138.0, 17216.5], [136.0, 17295.5], [144.0, 11937.0], [148.0, 8893.75], [150.0, 11366.0], [151.0, 17008.0], [149.0, 17045.5], [147.0, 17214.0], [146.0, 22856.333333333336], [145.0, 33.0], [152.0, 11944.666666666668], [154.0, 11320.333333333332], [155.0, 11849.333333333332], [157.0, 8856.5], [159.0, 17035.5], [158.0, 17012.0], [156.0, 16936.0], [153.0, 16980.0], [160.0, 8908.5], [166.0, 551.6666666666667], [167.0, 22279.0], [165.0, 16783.0], [164.0, 16797.5], [163.0, 16766.5], [162.0, 16849.5], [161.0, 16986.5], [168.0, 8747.25], [171.0, 11117.0], [170.0, 11632.666666666668], [173.0, 24.0], [174.0, 1919.0], [172.0, 114.0], [169.0, 16669.5], [177.0, 233.0], [178.0, 1388.0], [181.0, 872.5], [183.0, 38.0], [180.0, 981.0], [179.0, 868.0], [186.0, 1463.5], [191.0, 934.5], [190.0, 1119.0], [189.0, 1736.0], [187.0, 2317.0], [185.0, 691.4], [195.0, 1275.75], [197.0, 2402.0], [192.0, 1364.0], [201.0, 42.0], [207.0, 2303.0], [206.0, 3052.0], [205.0, 2594.3333333333335], [202.0, 2155.4285714285716], [208.0, 2734.5], [215.0, 3173.0], [214.0, 10415.0], [211.0, 2293.0], [210.0, 2299.0], [219.0, 2577.0], [222.0, 2198.0], [223.0, 3618.5], [217.0, 3598.5], [229.0, 2253.0], [228.0, 3661.0], [227.0, 3563.0], [226.0, 3453.0], [224.0, 3478.0], [232.0, 3772.2], [236.0, 3234.0], [239.0, 3265.5], [238.0, 4323.0], [237.0, 4368.0], [235.0, 3888.0], [234.0, 4020.0], [233.0, 4108.0], [246.0, 3731.5], [247.0, 5541.0], [245.0, 4679.0], [244.0, 4639.0], [243.0, 4553.0], [241.0, 4134.0], [240.0, 4451.0], [249.0, 4188.5], [252.0, 4164.0], [255.0, 3630.5], [254.0, 4997.0], [253.0, 4946.0], [250.0, 4765.0], [248.0, 4722.0], [259.0, 4462.666666666667], [262.0, 4128.0], [261.0, 5243.0], [260.0, 5906.0], [266.0, 4537.0], [269.0, 3771.0], [270.0, 5868.0], [268.0, 5686.0], [267.0, 5970.5], [264.0, 6114.0], [263.0, 6655.0], [257.0, 4906.5], [256.0, 33172.0], [285.0, 6710.0], [278.0, 4528.0], [286.0, 4344.0], [284.0, 5453.0], [275.0, 5301.0], [274.0, 5442.0], [273.0, 6705.0], [272.0, 6634.5], [283.0, 6226.0], [282.0, 6516.0], [281.0, 5468.0], [279.0, 6037.0], [277.0, 5386.0], [276.0, 5352.0], [290.0, 2746.0], [294.0, 2703.0], [298.0, 2716.0], [300.0, 2738.0], [289.0, 6737.0], [306.0, 2004.0], [311.0, 2993.0], [318.0, 2874.0], [332.0, 3014.0], [320.0, 995.0], [321.0, 8155.735294117647], [322.0, 8317.0], [325.0, 5860.5], [327.0, 8530.333333333334], [334.0, 8899.0], [333.0, 8634.0], [331.0, 8517.0], [329.0, 8733.5], [328.0, 8695.0], [338.0, 6033.5], [341.0, 3259.0], [340.0, 9450.5], [343.0, 9119.5], [337.0, 9081.0], [342.0, 9258.0], [345.0, 6328.5], [348.0, 3140.0], [351.0, 4744.0], [350.0, 9823.0], [349.0, 9861.0], [347.0, 17281.0], [344.0, 9367.0], [367.0, 5092.333333333334], [356.0, 7949.0], [362.0, 3254.0], [366.0, 10196.0], [365.0, 10230.0], [364.0, 10306.0], [354.0, 9796.5], [352.0, 9847.0], [357.0, 10181.0], [363.0, 10071.0], [361.0, 10586.5], [360.0, 9963.0], [382.0, 11095.0], [373.0, 3353.0], [383.0, 3439.0], [381.0, 11089.0], [370.0, 10346.0], [369.0, 10658.0], [379.0, 10783.5], [378.0, 10687.0], [376.0, 10822.0], [374.0, 10791.5], [372.0, 10409.5], [386.0, 7431.0], [385.0, 7940.0], [384.0, 11016.0], [392.0, 8813.333333333334], [397.0, 7640.5], [399.0, 11739.0], [396.0, 11357.5], [387.0, 11564.0], [395.0, 11403.0], [393.0, 22096.5], [390.0, 11481.5], [388.0, 11615.0], [403.0, 7998.5], [406.0, 3899.0], [405.0, 6804.5], [409.0, 3670.0], [415.0, 10164.0], [412.0, 12227.0], [410.0, 12141.5], [408.0, 12110.0], [407.0, 12061.666666666666], [400.0, 11832.0], [402.0, 11735.0], [401.0, 11874.0], [419.0, 8199.0], [423.0, 3775.0], [418.0, 12345.0], [430.0, 8596.5], [429.0, 12794.5], [427.0, 12852.0], [426.0, 12717.0], [425.0, 12694.0], [422.0, 22720.5], [421.0, 12569.0], [420.0, 12526.0], [439.0, 13069.0], [434.0, 4602.0], [433.0, 12847.0], [436.0, 1977.0], [437.0, 10048.333333333334], [441.0, 10102.333333333334], [446.0, 3961.0], [443.0, 13043.5], [438.0, 13210.0], [435.0, 13146.25], [461.0, 14112.0], [463.0, 4116.0], [448.0, 3032.0], [451.0, 13563.374999999998], [450.0, 32785.0], [458.0, 4163.0], [462.0, 14277.0], [459.0, 13876.333333333334], [457.0, 14066.0], [455.0, 14207.0], [454.0, 13837.666666666666], [467.0, 9222.0], [471.0, 9316.5], [466.0, 14382.0], [465.0, 14097.666666666666], [475.0, 9544.0], [478.0, 4230.0], [479.0, 14870.0], [477.0, 14838.666666666666], [473.0, 14551.0], [470.0, 14523.0], [468.0, 14410.0], [487.0, 9577.5], [485.0, 8572.5], [495.0, 4393.0], [494.0, 15345.333333333334], [482.0, 15039.0], [481.0, 14640.0], [491.0, 21165.0], [489.0, 15224.0], [488.0, 15159.0], [486.0, 15068.0], [484.0, 14743.5], [508.0, 12195.0], [510.0, 15737.5], [506.0, 15825.0], [505.0, 15772.5], [501.0, 15520.0], [500.0, 15572.666666666666], [499.0, 15490.0], [497.0, 15498.0], [538.0, 8284.333333333332], [518.0, 10493.0], [517.0, 16176.0], [515.0, 16169.0], [514.0, 16054.333333333334], [513.0, 16204.0], [519.0, 16219.0], [527.0, 16609.0], [526.0, 16504.5], [525.0, 16472.0], [537.0, 17177.0], [536.0, 16906.0], [521.0, 2713.0], [522.0, 16210.333333333334], [523.0, 18016.0], [528.0, 10662.5], [534.0, 4983.0], [533.0, 16717.0], [532.0, 16890.0], [531.0, 16766.0], [530.0, 16696.0], [535.0, 16767.5], [543.0, 17215.0], [542.0, 17068.0], [540.0, 16942.0], [539.0, 17154.0], [573.0, 18134.0], [558.0, 11369.5], [547.0, 4855.0], [550.0, 17456.0], [549.0, 17564.0], [548.0, 17307.0], [559.0, 17737.0], [544.0, 17350.0], [554.0, 15036.8], [557.0, 17682.5], [555.0, 25273.0], [565.0, 3094.0], [564.0, 11609.0], [574.0, 18260.0], [561.0, 17832.0], [560.0, 17765.0], [563.0, 17889.0], [562.0, 17925.0], [567.0, 18194.0], [566.0, 17993.5], [601.0, 19130.0], [605.0, 19537.0], [576.0, 14061.666666666666], [583.0, 11868.0], [582.0, 18652.0], [581.0, 18625.0], [580.0, 18520.0], [579.0, 18392.0], [577.0, 18428.0], [600.0, 19263.0], [602.0, 19173.5], [604.0, 19500.0], [603.0, 19398.0], [585.0, 11018.5], [584.0, 25575.5], [586.0, 11960.5], [591.0, 14288.0], [589.0, 18843.0], [588.0, 18824.0], [594.0, 5267.0], [598.0, 12131.0], [597.0, 19151.25], [606.0, 12398.5], [593.0, 19110.0], [592.0, 18912.0], [637.0, 20665.0], [614.0, 12863.0], [621.0, 5495.0], [620.0, 23592.666666666668], [618.0, 19856.0], [617.0, 19857.0], [616.0, 19703.0], [623.0, 20229.666666666668], [609.0, 19546.0], [613.0, 19860.0], [610.0, 19677.0], [638.0, 26631.0], [626.0, 20131.5], [624.0, 20148.0], [636.0, 20471.333333333332], [633.0, 20286.5], [631.0, 20608.0], [630.0, 20461.0], [628.0, 20519.0], [627.0, 20044.0], [668.0, 27032.5], [647.0, 6148.0], [655.0, 5968.0], [640.0, 20784.0], [643.0, 21216.0], [642.0, 20778.5], [646.0, 20943.0], [645.0, 21044.0], [654.0, 21390.0], [653.0, 21261.0], [652.0, 21109.6], [651.0, 21020.0], [658.0, 15558.333333333334], [659.0, 13934.5], [662.0, 21666.5], [661.0, 21482.0], [670.0, 21987.0], [656.0, 21383.0], [667.0, 21821.0], [666.0, 21592.0], [665.0, 21747.0], [664.0, 21662.5], [703.0, 23248.0], [684.0, 6574.0], [673.0, 21937.25], [678.0, 22243.0], [676.0, 22177.0], [683.0, 22148.0], [682.0, 22378.0], [681.0, 22181.333333333332], [680.0, 22312.0], [692.0, 14495.5], [702.0, 22897.666666666668], [699.0, 23061.0], [698.0, 22840.0], [697.0, 22687.25], [694.0, 22534.0], [691.0, 22648.0], [690.0, 25891.666666666668], [688.0, 22462.4], [731.0, 24453.0], [707.0, 17505.666666666668], [714.0, 6362.0], [712.0, 27806.0], [715.0, 23764.666666666668], [719.0, 23730.333333333332], [705.0, 22952.0], [704.0, 23306.0], [716.0, 23503.0], [733.0, 6545.0], [735.0, 24339.333333333332], [723.0, 23597.0], [722.0, 23589.666666666668], [725.0, 23962.0], [724.0, 23733.0], [732.0, 24595.0], [730.0, 24175.0], [729.0, 24032.333333333332], [728.0, 24144.0], [711.0, 23150.0], [710.0, 23077.0], [709.0, 23246.5], [761.0, 25590.0], [736.0, 15512.5], [739.0, 6588.0], [737.0, 28220.0], [745.0, 4729.0], [751.0, 25353.5], [749.0, 25449.846153846152], [765.0, 21111.0], [767.0, 29011.5], [759.0, 25443.5], [757.0, 25305.0], [756.0, 25591.0], [755.0, 25464.0], [754.0, 25421.0], [753.0, 25175.0], [752.0, 25273.0], [766.0, 25830.0], [762.0, 25627.0], [760.0, 25372.0], [795.0, 17286.0], [773.0, 7001.0], [782.0, 26556.0], [768.0, 25760.0], [770.0, 26038.0], [769.0, 25856.0], [772.0, 26169.0], [771.0, 26022.0], [781.0, 26453.0], [780.0, 26410.0], [778.0, 26289.5], [776.0, 26194.0], [799.0, 27140.0], [784.0, 26499.5], [786.0, 26613.0], [785.0, 26717.0], [789.0, 28449.0], [787.0, 26589.0], [791.0, 26970.0], [790.0, 26819.0], [798.0, 27047.0], [797.0, 29585.5], [796.0, 27010.0], [794.0, 26891.0], [793.0, 26775.0], [792.0, 26866.0], [775.0, 26384.0], [774.0, 26078.5], [826.0, 17649.0], [802.0, 7196.0], [805.0, 16285.5], [804.0, 27310.0], [803.0, 27225.5], [807.0, 27419.0], [806.0, 27559.0], [825.0, 29779.5], [824.0, 27829.0], [810.0, 17291.0], [809.0, 27425.5], [811.0, 27347.0], [813.0, 27560.0], [812.0, 29666.5], [815.0, 27426.0], [801.0, 27335.0], [800.0, 27084.0], [814.0, 27600.0], [831.0, 29720.5], [818.0, 27453.0], [817.0, 27357.0], [820.0, 27611.0], [819.0, 27516.0], [823.0, 27721.5], [821.0, 27677.0], [830.0, 28033.0], [829.0, 28077.0], [828.0, 27930.0], [827.0, 27970.0], [861.0, 25357.0], [833.0, 17822.5], [847.0, 30448.0], [832.0, 28101.0], [846.0, 28815.0], [845.0, 28765.0], [844.0, 28791.0], [843.0, 28748.0], [842.0, 29861.0], [841.0, 28736.0], [840.0, 28568.5], [856.0, 27953.90909090909], [838.0, 28499.0], [837.0, 29799.5], [836.0, 28330.5], [834.0, 28179.0], [855.0, 20796.666666666668], [854.0, 28607.526315789477], [853.0, 28967.0], [852.0, 29248.833333333332], [851.0, 29962.62068965517], [850.0, 30616.75], [849.0, 30748.777777777777], [857.0, 26536.16], [863.0, 24293.800000000003], [862.0, 24884.434782608692], [860.0, 25674.444444444445], [859.0, 26341.41176470588], [858.0, 26635.0], [888.0, 17108.166666666664], [892.0, 16491.181818181816], [864.0, 23299.750000000004], [879.0, 18504.25], [878.0, 18709.4], [877.0, 19195.11111111111], [876.0, 19368.88888888889], [875.0, 19522.875], [874.0, 20233.37037037037], [873.0, 20517.875], [872.0, 20757.714285714286], [865.0, 19922.4], [884.0, 16918.11111111111], [887.0, 17362.0], [886.0, 17534.5], [885.0, 17557.8], [891.0, 15475.875], [894.0, 14713.899999999998], [895.0, 14984.416666666668], [881.0, 18350.0], [880.0, 18693.5], [883.0, 18246.000000000004], [882.0, 18365.14285714286], [893.0, 16086.285714285714], [890.0, 16617.333333333332], [889.0, 17009.14285714286], [871.0, 21335.96153846154], [870.0, 21802.999999999996], [869.0, 22209.937499999996], [868.0, 22384.285714285714], [867.0, 22923.952380952378], [866.0, 22818.0], [925.0, 9282.833333333334], [922.0, 10183.0], [927.0, 10017.5], [926.0, 10247.42857142857], [924.0, 10271.6], [923.0, 10258.25], [921.0, 10764.5], [920.0, 11023.0], [903.0, 14174.333333333334], [902.0, 14096.25], [901.0, 14611.75], [900.0, 14587.4], [899.0, 14686.0], [898.0, 15148.5], [897.0, 14938.0], [896.0, 14937.25], [911.0, 12725.75], [910.0, 13133.142857142859], [909.0, 13323.0], [908.0, 13395.0], [907.0, 13692.0], [906.0, 13813.833333333332], [905.0, 14083.6], [904.0, 13985.0], [919.0, 11123.714285714286], [918.0, 11441.285714285714], [917.0, 11736.444444444445], [916.0, 11917.714285714286], [915.0, 12135.0], [914.0, 12256.0], [913.0, 12501.0], [912.0, 12709.8], [932.0, 8585.142857142857], [931.0, 8929.714285714286], [930.0, 9501.0], [929.0, 9383.75], [928.0, 9664.5], [1.0, 19847.0]], "isOverall": false, "label": "HTTP Request", "isController": false}, {"data": [[556.8954999999984, 16233.135999999991]], "isOverall": false, "label": "HTTP Request-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 932.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 2549.15, "minX": 1.72492986E12, "maxY": 18615.75, "series": [{"data": [[1.72492992E12, 10710.433333333332], [1.72492986E12, 2549.15]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72492992E12, 18615.75], [1.72492986E12, 3532.9]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72492992E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 5853.676880222841, "minX": 1.72492986E12, "maxY": 18503.84034125535, "series": [{"data": [[1.72492992E12, 18503.84034125535], [1.72492986E12, 5853.676880222841]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72492992E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 5853.607242339831, "minX": 1.72492986E12, "maxY": 18503.78793418652, "series": [{"data": [[1.72492992E12, 18503.78793418652], [1.72492986E12, 5853.607242339831]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72492992E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 0.15661182205971974, "minX": 1.72492986E12, "maxY": 0.28969359331476335, "series": [{"data": [[1.72492992E12, 0.15661182205971974], [1.72492986E12, 0.28969359331476335]], "isOverall": false, "label": "HTTP Request", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72492992E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 17.0, "minX": 1.72492986E12, "maxY": 40240.0, "series": [{"data": [[1.72492992E12, 40240.0], [1.72492986E12, 13536.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72492992E12, 17.0], [1.72492986E12, 20.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72492992E12, 33538.00000000001], [1.72492986E12, 12064.0]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72492992E12, 38555.54], [1.72492986E12, 13448.4]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72492992E12, 19043.5], [1.72492986E12, 4995.0]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72492992E12, 36353.85], [1.72492986E12, 12693.0]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72492992E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 8.0, "maxY": 37524.5, "series": [{"data": [[32.0, 15351.0], [37.0, 71.0], [42.0, 98.0], [45.0, 83.0], [47.0, 37524.5], [48.0, 17254.5], [52.0, 18029.5], [88.0, 27817.0], [8.0, 7230.0], [10.0, 30501.5], [11.0, 6310.0], [12.0, 7895.0], [14.0, 6554.0], [285.0, 7432.0], [19.0, 4317.0], [20.0, 25737.5], [21.0, 18803.0], [22.0, 27100.5], [366.0, 19690.0], [23.0, 19145.5], [24.0, 6677.5], [25.0, 2194.0], [26.0, 16669.5], [27.0, 20969.0], [28.0, 19060.5], [29.0, 18922.0], [30.0, 18290.0], [31.0, 11746.5]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[88.0, 28476.5], [47.0, 15.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 366.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 15.0, "minX": 8.0, "maxY": 37524.5, "series": [{"data": [[32.0, 15351.0], [37.0, 71.0], [42.0, 98.0], [45.0, 83.0], [47.0, 37524.5], [48.0, 17254.5], [52.0, 18029.5], [88.0, 27817.0], [8.0, 7230.0], [10.0, 30501.0], [11.0, 6310.0], [12.0, 7894.5], [14.0, 6554.0], [285.0, 7432.0], [19.0, 4317.0], [20.0, 25737.5], [21.0, 18803.0], [22.0, 27100.5], [366.0, 19690.0], [23.0, 19145.5], [24.0, 6677.5], [25.0, 2194.0], [26.0, 16669.5], [27.0, 20969.0], [28.0, 19060.5], [29.0, 18922.0], [30.0, 18290.0], [31.0, 11746.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[88.0, 28476.5], [47.0, 15.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 366.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 12.183333333333334, "minX": 1.72492986E12, "maxY": 21.15, "series": [{"data": [[1.72492992E12, 12.183333333333334], [1.72492986E12, 21.15]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72492992E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.72492986E12, "maxY": 15.116666666666667, "series": [{"data": [[1.72492992E12, 12.183333333333334], [1.72492986E12, 4.483333333333333]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72492992E12, 15.116666666666667], [1.72492986E12, 1.5]], "isOverall": false, "label": "202", "isController": false}, {"data": [[1.72492992E12, 0.05]], "isOverall": false, "label": "404", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72492992E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.72492986E12, "maxY": 27.3, "series": [{"data": [[1.72492992E12, 27.3], [1.72492986E12, 5.983333333333333]], "isOverall": false, "label": "HTTP Request-success", "isController": false}, {"data": [[1.72492992E12, 0.05]], "isOverall": false, "label": "HTTP Request-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72492992E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.05, "minX": 1.72492986E12, "maxY": 27.3, "series": [{"data": [[1.72492992E12, 27.3], [1.72492986E12, 5.983333333333333]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72492992E12, 0.05]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72492992E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

