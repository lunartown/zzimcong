/*
   Licensed to the Apache Software Foundation (ASF) under one or more
   contributor license agreements.  See the NOTICE file distributed with
   this work for additional information regarding copyright ownership.
   The ASF licenses this file to You under the Apache License, Version 2.0
   (the "License"); you may not use this file except in compliance with
   the License.  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
*/
$(document).ready(function() {

    $(".click-title").mouseenter( function(    e){
        e.preventDefault();
        this.style.cursor="pointer";
    });
    $(".click-title").mousedown( function(event){
        event.preventDefault();
    });

    // Ugly code while this script is shared among several pages
    try{
        refreshHitsPerSecond(true);
    } catch(e){}
    try{
        refreshResponseTimeOverTime(true);
    } catch(e){}
    try{
        refreshResponseTimePercentiles();
    } catch(e){}
});


var responseTimePercentilesInfos = {
        data: {"result": {"minY": 2.0, "minX": 0.0, "maxY": 8762.0, "series": [{"data": [[0.0, 2.0], [0.1, 104.0], [0.2, 132.0], [0.3, 132.0], [0.4, 183.0], [0.5, 195.0], [0.6, 196.0], [0.7, 197.0], [0.8, 203.0], [0.9, 203.0], [1.0, 203.0], [1.1, 205.0], [1.2, 214.0], [1.3, 214.0], [1.4, 214.0], [1.5, 214.0], [1.6, 215.0], [1.7, 215.0], [1.8, 216.0], [1.9, 237.0], [2.0, 259.0], [2.1, 265.0], [2.2, 272.0], [2.3, 301.0], [2.4, 303.0], [2.5, 304.0], [2.6, 315.0], [2.7, 409.0], [2.8, 489.0], [2.9, 524.0], [3.0, 546.0], [3.1, 553.0], [3.2, 563.0], [3.3, 574.0], [3.4, 587.0], [3.5, 601.0], [3.6, 602.0], [3.7, 628.0], [3.8, 647.0], [3.9, 661.0], [4.0, 667.0], [4.1, 672.0], [4.2, 674.0], [4.3, 697.0], [4.4, 742.0], [4.5, 763.0], [4.6, 823.0], [4.7, 823.0], [4.8, 829.0], [4.9, 852.0], [5.0, 868.0], [5.1, 891.0], [5.2, 895.0], [5.3, 913.0], [5.4, 921.0], [5.5, 925.0], [5.6, 955.0], [5.7, 978.0], [5.8, 980.0], [5.9, 994.0], [6.0, 998.0], [6.1, 1000.0], [6.2, 1005.0], [6.3, 1009.0], [6.4, 1011.0], [6.5, 1014.0], [6.6, 1021.0], [6.7, 1051.0], [6.8, 1055.0], [6.9, 1056.0], [7.0, 1071.0], [7.1, 1074.0], [7.2, 1104.0], [7.3, 1106.0], [7.4, 1113.0], [7.5, 1114.0], [7.6, 1115.0], [7.7, 1126.0], [7.8, 1128.0], [7.9, 1129.0], [8.0, 1132.0], [8.1, 1134.0], [8.2, 1148.0], [8.3, 1153.0], [8.4, 1153.0], [8.5, 1166.0], [8.6, 1168.0], [8.7, 1171.0], [8.8, 1186.0], [8.9, 1188.0], [9.0, 1188.0], [9.1, 1193.0], [9.2, 1194.0], [9.3, 1206.0], [9.4, 1213.0], [9.5, 1219.0], [9.6, 1219.0], [9.7, 1225.0], [9.8, 1238.0], [9.9, 1238.0], [10.0, 1242.0], [10.1, 1247.0], [10.2, 1250.0], [10.3, 1262.0], [10.4, 1262.0], [10.5, 1266.0], [10.6, 1269.0], [10.7, 1272.0], [10.8, 1272.0], [10.9, 1280.0], [11.0, 1291.0], [11.1, 1301.0], [11.2, 1302.0], [11.3, 1313.0], [11.4, 1320.0], [11.5, 1321.0], [11.6, 1322.0], [11.7, 1329.0], [11.8, 1332.0], [11.9, 1340.0], [12.0, 1342.0], [12.1, 1344.0], [12.2, 1345.0], [12.3, 1348.0], [12.4, 1351.0], [12.5, 1358.0], [12.6, 1361.0], [12.7, 1364.0], [12.8, 1365.0], [12.9, 1375.0], [13.0, 1375.0], [13.1, 1376.0], [13.2, 1380.0], [13.3, 1389.0], [13.4, 1398.0], [13.5, 1402.0], [13.6, 1403.0], [13.7, 1403.0], [13.8, 1406.0], [13.9, 1414.0], [14.0, 1416.0], [14.1, 1420.0], [14.2, 1423.0], [14.3, 1426.0], [14.4, 1429.0], [14.5, 1436.0], [14.6, 1441.0], [14.7, 1452.0], [14.8, 1452.0], [14.9, 1453.0], [15.0, 1457.0], [15.1, 1459.0], [15.2, 1464.0], [15.3, 1470.0], [15.4, 1476.0], [15.5, 1483.0], [15.6, 1484.0], [15.7, 1485.0], [15.8, 1487.0], [15.9, 1493.0], [16.0, 1494.0], [16.1, 1503.0], [16.2, 1504.0], [16.3, 1508.0], [16.4, 1510.0], [16.5, 1511.0], [16.6, 1513.0], [16.7, 1524.0], [16.8, 1525.0], [16.9, 1529.0], [17.0, 1534.0], [17.1, 1538.0], [17.2, 1544.0], [17.3, 1549.0], [17.4, 1550.0], [17.5, 1562.0], [17.6, 1563.0], [17.7, 1566.0], [17.8, 1566.0], [17.9, 1569.0], [18.0, 1592.0], [18.1, 1595.0], [18.2, 1602.0], [18.3, 1603.0], [18.4, 1616.0], [18.5, 1616.0], [18.6, 1619.0], [18.7, 1620.0], [18.8, 1632.0], [18.9, 1634.0], [19.0, 1641.0], [19.1, 1642.0], [19.2, 1649.0], [19.3, 1653.0], [19.4, 1653.0], [19.5, 1658.0], [19.6, 1664.0], [19.7, 1673.0], [19.8, 1675.0], [19.9, 1676.0], [20.0, 1677.0], [20.1, 1697.0], [20.2, 1699.0], [20.3, 1710.0], [20.4, 1716.0], [20.5, 1722.0], [20.6, 1729.0], [20.7, 1730.0], [20.8, 1732.0], [20.9, 1735.0], [21.0, 1735.0], [21.1, 1753.0], [21.2, 1776.0], [21.3, 1783.0], [21.4, 1801.0], [21.5, 1811.0], [21.6, 1832.0], [21.7, 1834.0], [21.8, 1861.0], [21.9, 1881.0], [22.0, 1898.0], [22.1, 1901.0], [22.2, 1929.0], [22.3, 1946.0], [22.4, 1955.0], [22.5, 1980.0], [22.6, 2006.0], [22.7, 2016.0], [22.8, 2031.0], [22.9, 2058.0], [23.0, 2128.0], [23.1, 2142.0], [23.2, 2201.0], [23.3, 2257.0], [23.4, 2358.0], [23.5, 2358.0], [23.6, 2382.0], [23.7, 2401.0], [23.8, 2418.0], [23.9, 2454.0], [24.0, 2481.0], [24.1, 2497.0], [24.2, 2507.0], [24.3, 2532.0], [24.4, 2548.0], [24.5, 2562.0], [24.6, 2563.0], [24.7, 2577.0], [24.8, 2602.0], [24.9, 2603.0], [25.0, 2606.0], [25.1, 2623.0], [25.2, 2632.0], [25.3, 2635.0], [25.4, 2636.0], [25.5, 2648.0], [25.6, 2653.0], [25.7, 2656.0], [25.8, 2659.0], [25.9, 2663.0], [26.0, 2664.0], [26.1, 2673.0], [26.2, 2676.0], [26.3, 2677.0], [26.4, 2687.0], [26.5, 2687.0], [26.6, 2696.0], [26.7, 2713.0], [26.8, 2728.0], [26.9, 2743.0], [27.0, 2753.0], [27.1, 2772.0], [27.2, 2802.0], [27.3, 2805.0], [27.4, 2805.0], [27.5, 2827.0], [27.6, 2831.0], [27.7, 2838.0], [27.8, 2838.0], [27.9, 2843.0], [28.0, 2861.0], [28.1, 2862.0], [28.2, 2862.0], [28.3, 2863.0], [28.4, 2869.0], [28.5, 2872.0], [28.6, 2880.0], [28.7, 2889.0], [28.8, 2890.0], [28.9, 2910.0], [29.0, 2914.0], [29.1, 2917.0], [29.2, 2918.0], [29.3, 2921.0], [29.4, 2922.0], [29.5, 2924.0], [29.6, 2924.0], [29.7, 2943.0], [29.8, 2944.0], [29.9, 2963.0], [30.0, 2963.0], [30.1, 2963.0], [30.2, 2985.0], [30.3, 2991.0], [30.4, 2998.0], [30.5, 3005.0], [30.6, 3005.0], [30.7, 3007.0], [30.8, 3008.0], [30.9, 3011.0], [31.0, 3013.0], [31.1, 3021.0], [31.2, 3022.0], [31.3, 3023.0], [31.4, 3025.0], [31.5, 3025.0], [31.6, 3028.0], [31.7, 3030.0], [31.8, 3032.0], [31.9, 3047.0], [32.0, 3052.0], [32.1, 3064.0], [32.2, 3070.0], [32.3, 3077.0], [32.4, 3083.0], [32.5, 3084.0], [32.6, 3085.0], [32.7, 3087.0], [32.8, 3093.0], [32.9, 3098.0], [33.0, 3100.0], [33.1, 3102.0], [33.2, 3104.0], [33.3, 3105.0], [33.4, 3107.0], [33.5, 3109.0], [33.6, 3109.0], [33.7, 3113.0], [33.8, 3123.0], [33.9, 3125.0], [34.0, 3126.0], [34.1, 3128.0], [34.2, 3136.0], [34.3, 3145.0], [34.4, 3148.0], [34.5, 3149.0], [34.6, 3151.0], [34.7, 3156.0], [34.8, 3161.0], [34.9, 3164.0], [35.0, 3165.0], [35.1, 3175.0], [35.2, 3180.0], [35.3, 3181.0], [35.4, 3183.0], [35.5, 3185.0], [35.6, 3190.0], [35.7, 3190.0], [35.8, 3195.0], [35.9, 3196.0], [36.0, 3201.0], [36.1, 3203.0], [36.2, 3204.0], [36.3, 3211.0], [36.4, 3211.0], [36.5, 3220.0], [36.6, 3221.0], [36.7, 3222.0], [36.8, 3224.0], [36.9, 3224.0], [37.0, 3225.0], [37.1, 3228.0], [37.2, 3231.0], [37.3, 3232.0], [37.4, 3233.0], [37.5, 3235.0], [37.6, 3236.0], [37.7, 3240.0], [37.8, 3242.0], [37.9, 3243.0], [38.0, 3244.0], [38.1, 3244.0], [38.2, 3244.0], [38.3, 3247.0], [38.4, 3256.0], [38.5, 3260.0], [38.6, 3262.0], [38.7, 3266.0], [38.8, 3268.0], [38.9, 3271.0], [39.0, 3274.0], [39.1, 3277.0], [39.2, 3278.0], [39.3, 3286.0], [39.4, 3288.0], [39.5, 3293.0], [39.6, 3296.0], [39.7, 3296.0], [39.8, 3298.0], [39.9, 3303.0], [40.0, 3303.0], [40.1, 3306.0], [40.2, 3315.0], [40.3, 3321.0], [40.4, 3324.0], [40.5, 3325.0], [40.6, 3334.0], [40.7, 3335.0], [40.8, 3342.0], [40.9, 3345.0], [41.0, 3350.0], [41.1, 3350.0], [41.2, 3353.0], [41.3, 3358.0], [41.4, 3358.0], [41.5, 3364.0], [41.6, 3367.0], [41.7, 3369.0], [41.8, 3375.0], [41.9, 3375.0], [42.0, 3381.0], [42.1, 3389.0], [42.2, 3395.0], [42.3, 3399.0], [42.4, 3402.0], [42.5, 3407.0], [42.6, 3409.0], [42.7, 3410.0], [42.8, 3410.0], [42.9, 3412.0], [43.0, 3413.0], [43.1, 3419.0], [43.2, 3427.0], [43.3, 3430.0], [43.4, 3433.0], [43.5, 3434.0], [43.6, 3447.0], [43.7, 3450.0], [43.8, 3453.0], [43.9, 3453.0], [44.0, 3457.0], [44.1, 3459.0], [44.2, 3468.0], [44.3, 3471.0], [44.4, 3473.0], [44.5, 3474.0], [44.6, 3478.0], [44.7, 3481.0], [44.8, 3483.0], [44.9, 3485.0], [45.0, 3489.0], [45.1, 3490.0], [45.2, 3492.0], [45.3, 3494.0], [45.4, 3496.0], [45.5, 3514.0], [45.6, 3519.0], [45.7, 3528.0], [45.8, 3530.0], [45.9, 3532.0], [46.0, 3541.0], [46.1, 3544.0], [46.2, 3549.0], [46.3, 3560.0], [46.4, 3562.0], [46.5, 3563.0], [46.6, 3569.0], [46.7, 3569.0], [46.8, 3569.0], [46.9, 3572.0], [47.0, 3581.0], [47.1, 3584.0], [47.2, 3588.0], [47.3, 3599.0], [47.4, 3599.0], [47.5, 3600.0], [47.6, 3602.0], [47.7, 3610.0], [47.8, 3614.0], [47.9, 3633.0], [48.0, 3651.0], [48.1, 3660.0], [48.2, 3660.0], [48.3, 3662.0], [48.4, 3663.0], [48.5, 3673.0], [48.6, 3674.0], [48.7, 3675.0], [48.8, 3680.0], [48.9, 3682.0], [49.0, 3685.0], [49.1, 3690.0], [49.2, 3692.0], [49.3, 3709.0], [49.4, 3719.0], [49.5, 3725.0], [49.6, 3727.0], [49.7, 3729.0], [49.8, 3730.0], [49.9, 3733.0], [50.0, 3740.0], [50.1, 3756.0], [50.2, 3759.0], [50.3, 3761.0], [50.4, 3769.0], [50.5, 3772.0], [50.6, 3775.0], [50.7, 3779.0], [50.8, 3784.0], [50.9, 3787.0], [51.0, 3788.0], [51.1, 3796.0], [51.2, 3799.0], [51.3, 3799.0], [51.4, 3804.0], [51.5, 3810.0], [51.6, 3812.0], [51.7, 3821.0], [51.8, 3823.0], [51.9, 3833.0], [52.0, 3835.0], [52.1, 3838.0], [52.2, 3854.0], [52.3, 3866.0], [52.4, 3869.0], [52.5, 3870.0], [52.6, 3878.0], [52.7, 3886.0], [52.8, 3891.0], [52.9, 3905.0], [53.0, 3919.0], [53.1, 3933.0], [53.2, 3934.0], [53.3, 3935.0], [53.4, 3937.0], [53.5, 3956.0], [53.6, 3958.0], [53.7, 3960.0], [53.8, 3966.0], [53.9, 3967.0], [54.0, 3975.0], [54.1, 3979.0], [54.2, 3995.0], [54.3, 3995.0], [54.4, 3997.0], [54.5, 3998.0], [54.6, 4017.0], [54.7, 4022.0], [54.8, 4022.0], [54.9, 4024.0], [55.0, 4027.0], [55.1, 4032.0], [55.2, 4039.0], [55.3, 4041.0], [55.4, 4047.0], [55.5, 4050.0], [55.6, 4052.0], [55.7, 4055.0], [55.8, 4062.0], [55.9, 4065.0], [56.0, 4066.0], [56.1, 4069.0], [56.2, 4071.0], [56.3, 4073.0], [56.4, 4088.0], [56.5, 4099.0], [56.6, 4101.0], [56.7, 4104.0], [56.8, 4106.0], [56.9, 4108.0], [57.0, 4109.0], [57.1, 4112.0], [57.2, 4114.0], [57.3, 4119.0], [57.4, 4129.0], [57.5, 4136.0], [57.6, 4140.0], [57.7, 4142.0], [57.8, 4145.0], [57.9, 4149.0], [58.0, 4153.0], [58.1, 4153.0], [58.2, 4164.0], [58.3, 4176.0], [58.4, 4181.0], [58.5, 4205.0], [58.6, 4213.0], [58.7, 4214.0], [58.8, 4216.0], [58.9, 4220.0], [59.0, 4221.0], [59.1, 4230.0], [59.2, 4235.0], [59.3, 4236.0], [59.4, 4240.0], [59.5, 4246.0], [59.6, 4256.0], [59.7, 4257.0], [59.8, 4261.0], [59.9, 4262.0], [60.0, 4271.0], [60.1, 4271.0], [60.2, 4272.0], [60.3, 4276.0], [60.4, 4277.0], [60.5, 4279.0], [60.6, 4284.0], [60.7, 4285.0], [60.8, 4285.0], [60.9, 4287.0], [61.0, 4290.0], [61.1, 4294.0], [61.2, 4296.0], [61.3, 4300.0], [61.4, 4300.0], [61.5, 4301.0], [61.6, 4304.0], [61.7, 4309.0], [61.8, 4312.0], [61.9, 4312.0], [62.0, 4315.0], [62.1, 4316.0], [62.2, 4325.0], [62.3, 4331.0], [62.4, 4333.0], [62.5, 4335.0], [62.6, 4344.0], [62.7, 4352.0], [62.8, 4356.0], [62.9, 4359.0], [63.0, 4369.0], [63.1, 4369.0], [63.2, 4371.0], [63.3, 4372.0], [63.4, 4375.0], [63.5, 4376.0], [63.6, 4379.0], [63.7, 4388.0], [63.8, 4393.0], [63.9, 4396.0], [64.0, 4397.0], [64.1, 4398.0], [64.2, 4418.0], [64.3, 4420.0], [64.4, 4420.0], [64.5, 4421.0], [64.6, 4422.0], [64.7, 4424.0], [64.8, 4430.0], [64.9, 4432.0], [65.0, 4441.0], [65.1, 4443.0], [65.2, 4443.0], [65.3, 4448.0], [65.4, 4450.0], [65.5, 4451.0], [65.6, 4461.0], [65.7, 4477.0], [65.8, 4478.0], [65.9, 4484.0], [66.0, 4490.0], [66.1, 4507.0], [66.2, 4510.0], [66.3, 4510.0], [66.4, 4513.0], [66.5, 4516.0], [66.6, 4516.0], [66.7, 4518.0], [66.8, 4519.0], [66.9, 4520.0], [67.0, 4521.0], [67.1, 4525.0], [67.2, 4527.0], [67.3, 4527.0], [67.4, 4534.0], [67.5, 4537.0], [67.6, 4540.0], [67.7, 4543.0], [67.8, 4544.0], [67.9, 4546.0], [68.0, 4554.0], [68.1, 4558.0], [68.2, 4560.0], [68.3, 4561.0], [68.4, 4564.0], [68.5, 4576.0], [68.6, 4577.0], [68.7, 4585.0], [68.8, 4590.0], [68.9, 4591.0], [69.0, 4594.0], [69.1, 4594.0], [69.2, 4598.0], [69.3, 4606.0], [69.4, 4610.0], [69.5, 4611.0], [69.6, 4624.0], [69.7, 4624.0], [69.8, 4626.0], [69.9, 4627.0], [70.0, 4627.0], [70.1, 4633.0], [70.2, 4633.0], [70.3, 4637.0], [70.4, 4654.0], [70.5, 4657.0], [70.6, 4662.0], [70.7, 4667.0], [70.8, 4669.0], [70.9, 4678.0], [71.0, 4679.0], [71.1, 4679.0], [71.2, 4682.0], [71.3, 4682.0], [71.4, 4683.0], [71.5, 4686.0], [71.6, 4687.0], [71.7, 4693.0], [71.8, 4696.0], [71.9, 4701.0], [72.0, 4701.0], [72.1, 4701.0], [72.2, 4708.0], [72.3, 4708.0], [72.4, 4710.0], [72.5, 4712.0], [72.6, 4716.0], [72.7, 4716.0], [72.8, 4720.0], [72.9, 4730.0], [73.0, 4732.0], [73.1, 4741.0], [73.2, 4743.0], [73.3, 4746.0], [73.4, 4750.0], [73.5, 4753.0], [73.6, 4757.0], [73.7, 4758.0], [73.8, 4760.0], [73.9, 4760.0], [74.0, 4761.0], [74.1, 4765.0], [74.2, 4772.0], [74.3, 4776.0], [74.4, 4777.0], [74.5, 4778.0], [74.6, 4786.0], [74.7, 4788.0], [74.8, 4795.0], [74.9, 4799.0], [75.0, 4807.0], [75.1, 4810.0], [75.2, 4813.0], [75.3, 4814.0], [75.4, 4816.0], [75.5, 4822.0], [75.6, 4828.0], [75.7, 4833.0], [75.8, 4835.0], [75.9, 4838.0], [76.0, 4844.0], [76.1, 4847.0], [76.2, 4849.0], [76.3, 4853.0], [76.4, 4855.0], [76.5, 4855.0], [76.6, 4855.0], [76.7, 4858.0], [76.8, 4864.0], [76.9, 4864.0], [77.0, 4869.0], [77.1, 4871.0], [77.2, 4884.0], [77.3, 4885.0], [77.4, 4895.0], [77.5, 4897.0], [77.6, 4911.0], [77.7, 4916.0], [77.8, 4921.0], [77.9, 4922.0], [78.0, 4927.0], [78.1, 4928.0], [78.2, 4930.0], [78.3, 4931.0], [78.4, 4941.0], [78.5, 4942.0], [78.6, 4944.0], [78.7, 4944.0], [78.8, 4949.0], [78.9, 4956.0], [79.0, 4967.0], [79.1, 4976.0], [79.2, 4978.0], [79.3, 4984.0], [79.4, 4990.0], [79.5, 4994.0], [79.6, 5001.0], [79.7, 5003.0], [79.8, 5015.0], [79.9, 5019.0], [80.0, 5026.0], [80.1, 5027.0], [80.2, 5028.0], [80.3, 5030.0], [80.4, 5033.0], [80.5, 5060.0], [80.6, 5070.0], [80.7, 5085.0], [80.8, 5092.0], [80.9, 5093.0], [81.0, 5098.0], [81.1, 5100.0], [81.2, 5101.0], [81.3, 5113.0], [81.4, 5114.0], [81.5, 5127.0], [81.6, 5133.0], [81.7, 5152.0], [81.8, 5156.0], [81.9, 5159.0], [82.0, 5169.0], [82.1, 5178.0], [82.2, 5205.0], [82.3, 5207.0], [82.4, 5224.0], [82.5, 5233.0], [82.6, 5247.0], [82.7, 5251.0], [82.8, 5253.0], [82.9, 5258.0], [83.0, 5259.0], [83.1, 5271.0], [83.2, 5283.0], [83.3, 5301.0], [83.4, 5307.0], [83.5, 5309.0], [83.6, 5311.0], [83.7, 5323.0], [83.8, 5330.0], [83.9, 5356.0], [84.0, 5375.0], [84.1, 5378.0], [84.2, 5384.0], [84.3, 5409.0], [84.4, 5423.0], [84.5, 5426.0], [84.6, 5448.0], [84.7, 5448.0], [84.8, 5452.0], [84.9, 5454.0], [85.0, 5472.0], [85.1, 5480.0], [85.2, 5487.0], [85.3, 5491.0], [85.4, 5492.0], [85.5, 5496.0], [85.6, 5509.0], [85.7, 5513.0], [85.8, 5518.0], [85.9, 5519.0], [86.0, 5521.0], [86.1, 5533.0], [86.2, 5535.0], [86.3, 5540.0], [86.4, 5559.0], [86.5, 5562.0], [86.6, 5565.0], [86.7, 5576.0], [86.8, 5591.0], [86.9, 5606.0], [87.0, 5645.0], [87.1, 5646.0], [87.2, 5651.0], [87.3, 5656.0], [87.4, 5688.0], [87.5, 5692.0], [87.6, 5707.0], [87.7, 5726.0], [87.8, 5734.0], [87.9, 5744.0], [88.0, 5744.0], [88.1, 5744.0], [88.2, 5750.0], [88.3, 5750.0], [88.4, 5774.0], [88.5, 5787.0], [88.6, 5793.0], [88.7, 5793.0], [88.8, 5795.0], [88.9, 5806.0], [89.0, 5815.0], [89.1, 5815.0], [89.2, 5816.0], [89.3, 5817.0], [89.4, 5819.0], [89.5, 5836.0], [89.6, 5851.0], [89.7, 5868.0], [89.8, 5887.0], [89.9, 5891.0], [90.0, 5892.0], [90.1, 5894.0], [90.2, 5918.0], [90.3, 5928.0], [90.4, 5931.0], [90.5, 5931.0], [90.6, 5945.0], [90.7, 5950.0], [90.8, 5951.0], [90.9, 5957.0], [91.0, 5961.0], [91.1, 5964.0], [91.2, 5976.0], [91.3, 6006.0], [91.4, 6011.0], [91.5, 6023.0], [91.6, 6028.0], [91.7, 6034.0], [91.8, 6042.0], [91.9, 6049.0], [92.0, 6057.0], [92.1, 6078.0], [92.2, 6105.0], [92.3, 6116.0], [92.4, 6148.0], [92.5, 6168.0], [92.6, 6202.0], [92.7, 6211.0], [92.8, 6214.0], [92.9, 6214.0], [93.0, 6241.0], [93.1, 6250.0], [93.2, 6272.0], [93.3, 6286.0], [93.4, 6301.0], [93.5, 6307.0], [93.6, 6321.0], [93.7, 6323.0], [93.8, 6325.0], [93.9, 6332.0], [94.0, 6346.0], [94.1, 6363.0], [94.2, 6376.0], [94.3, 6395.0], [94.4, 6401.0], [94.5, 6420.0], [94.6, 6438.0], [94.7, 6449.0], [94.8, 6462.0], [94.9, 6484.0], [95.0, 6488.0], [95.1, 6500.0], [95.2, 6531.0], [95.3, 6562.0], [95.4, 6599.0], [95.5, 6663.0], [95.6, 6836.0], [95.7, 6840.0], [95.8, 6843.0], [95.9, 6890.0], [96.0, 6986.0], [96.1, 7084.0], [96.2, 7253.0], [96.3, 7440.0], [96.4, 7453.0], [96.5, 7454.0], [96.6, 7456.0], [96.7, 7547.0], [96.8, 7730.0], [96.9, 7785.0], [97.0, 7799.0], [97.1, 7816.0], [97.2, 7818.0], [97.3, 7827.0], [97.4, 7898.0], [97.5, 7907.0], [97.6, 7957.0], [97.7, 7980.0], [97.8, 7997.0], [97.9, 8033.0], [98.0, 8035.0], [98.1, 8038.0], [98.2, 8130.0], [98.3, 8150.0], [98.4, 8269.0], [98.5, 8279.0], [98.6, 8314.0], [98.7, 8362.0], [98.8, 8404.0], [98.9, 8441.0], [99.0, 8486.0], [99.1, 8525.0], [99.2, 8529.0], [99.3, 8569.0], [99.4, 8599.0], [99.5, 8608.0], [99.6, 8618.0], [99.7, 8642.0], [99.8, 8686.0], [99.9, 8762.0]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[0.0, 26.0], [0.1, 26.0], [0.2, 27.0], [0.3, 27.0], [0.4, 29.0], [0.5, 29.0], [0.6, 29.0], [0.7, 29.0], [0.8, 30.0], [0.9, 30.0], [1.0, 30.0], [1.1, 30.0], [1.2, 30.0], [1.3, 31.0], [1.4, 31.0], [1.5, 31.0], [1.6, 32.0], [1.7, 32.0], [1.8, 32.0], [1.9, 32.0], [2.0, 32.0], [2.1, 32.0], [2.2, 32.0], [2.3, 32.0], [2.4, 32.0], [2.5, 33.0], [2.6, 33.0], [2.7, 33.0], [2.8, 33.0], [2.9, 33.0], [3.0, 34.0], [3.1, 34.0], [3.2, 34.0], [3.3, 34.0], [3.4, 34.0], [3.5, 34.0], [3.6, 34.0], [3.7, 34.0], [3.8, 34.0], [3.9, 34.0], [4.0, 35.0], [4.1, 35.0], [4.2, 35.0], [4.3, 35.0], [4.4, 35.0], [4.5, 35.0], [4.6, 35.0], [4.7, 35.0], [4.8, 35.0], [4.9, 35.0], [5.0, 35.0], [5.1, 35.0], [5.2, 35.0], [5.3, 35.0], [5.4, 36.0], [5.5, 36.0], [5.6, 36.0], [5.7, 36.0], [5.8, 36.0], [5.9, 36.0], [6.0, 36.0], [6.1, 36.0], [6.2, 37.0], [6.3, 37.0], [6.4, 37.0], [6.5, 37.0], [6.6, 37.0], [6.7, 37.0], [6.8, 37.0], [6.9, 37.0], [7.0, 37.0], [7.1, 38.0], [7.2, 38.0], [7.3, 38.0], [7.4, 38.0], [7.5, 38.0], [7.6, 38.0], [7.7, 38.0], [7.8, 38.0], [7.9, 39.0], [8.0, 39.0], [8.1, 39.0], [8.2, 39.0], [8.3, 39.0], [8.4, 39.0], [8.5, 40.0], [8.6, 40.0], [8.7, 40.0], [8.8, 40.0], [8.9, 40.0], [9.0, 40.0], [9.1, 41.0], [9.2, 41.0], [9.3, 41.0], [9.4, 41.0], [9.5, 41.0], [9.6, 41.0], [9.7, 41.0], [9.8, 41.0], [9.9, 41.0], [10.0, 42.0], [10.1, 42.0], [10.2, 43.0], [10.3, 43.0], [10.4, 43.0], [10.5, 43.0], [10.6, 44.0], [10.7, 44.0], [10.8, 44.0], [10.9, 44.0], [11.0, 44.0], [11.1, 44.0], [11.2, 44.0], [11.3, 45.0], [11.4, 45.0], [11.5, 45.0], [11.6, 46.0], [11.7, 47.0], [11.8, 47.0], [11.9, 47.0], [12.0, 47.0], [12.1, 48.0], [12.2, 48.0], [12.3, 48.0], [12.4, 48.0], [12.5, 48.0], [12.6, 49.0], [12.7, 49.0], [12.8, 50.0], [12.9, 50.0], [13.0, 50.0], [13.1, 50.0], [13.2, 50.0], [13.3, 50.0], [13.4, 51.0], [13.5, 51.0], [13.6, 51.0], [13.7, 51.0], [13.8, 52.0], [13.9, 52.0], [14.0, 53.0], [14.1, 53.0], [14.2, 53.0], [14.3, 54.0], [14.4, 54.0], [14.5, 54.0], [14.6, 54.0], [14.7, 55.0], [14.8, 55.0], [14.9, 55.0], [15.0, 55.0], [15.1, 55.0], [15.2, 56.0], [15.3, 56.0], [15.4, 56.0], [15.5, 56.0], [15.6, 59.0], [15.7, 59.0], [15.8, 60.0], [15.9, 61.0], [16.0, 61.0], [16.1, 62.0], [16.2, 62.0], [16.3, 62.0], [16.4, 63.0], [16.5, 63.0], [16.6, 64.0], [16.7, 64.0], [16.8, 64.0], [16.9, 66.0], [17.0, 66.0], [17.1, 66.0], [17.2, 67.0], [17.3, 68.0], [17.4, 68.0], [17.5, 71.0], [17.6, 73.0], [17.7, 73.0], [17.8, 73.0], [17.9, 73.0], [18.0, 74.0], [18.1, 75.0], [18.2, 75.0], [18.3, 77.0], [18.4, 79.0], [18.5, 79.0], [18.6, 80.0], [18.7, 82.0], [18.8, 82.0], [18.9, 85.0], [19.0, 86.0], [19.1, 87.0], [19.2, 88.0], [19.3, 89.0], [19.4, 93.0], [19.5, 99.0], [19.6, 111.0], [19.7, 114.0], [19.8, 114.0], [19.9, 115.0], [20.0, 119.0], [20.1, 119.0], [20.2, 127.0], [20.3, 128.0], [20.4, 133.0], [20.5, 135.0], [20.6, 141.0], [20.7, 144.0], [20.8, 144.0], [20.9, 144.0], [21.0, 152.0], [21.1, 164.0], [21.2, 169.0], [21.3, 174.0], [21.4, 176.0], [21.5, 176.0], [21.6, 177.0], [21.7, 177.0], [21.8, 188.0], [21.9, 190.0], [22.0, 191.0], [22.1, 193.0], [22.2, 194.0], [22.3, 214.0], [22.4, 215.0], [22.5, 220.0], [22.6, 221.0], [22.7, 225.0], [22.8, 229.0], [22.9, 230.0], [23.0, 230.0], [23.1, 236.0], [23.2, 243.0], [23.3, 249.0], [23.4, 250.0], [23.5, 273.0], [23.6, 274.0], [23.7, 275.0], [23.8, 276.0], [23.9, 283.0], [24.0, 284.0], [24.1, 286.0], [24.2, 287.0], [24.3, 288.0], [24.4, 290.0], [24.5, 291.0], [24.6, 292.0], [24.7, 293.0], [24.8, 296.0], [24.9, 296.0], [25.0, 296.0], [25.1, 297.0], [25.2, 301.0], [25.3, 308.0], [25.4, 309.0], [25.5, 309.0], [25.6, 314.0], [25.7, 314.0], [25.8, 319.0], [25.9, 319.0], [26.0, 319.0], [26.1, 321.0], [26.2, 324.0], [26.3, 326.0], [26.4, 331.0], [26.5, 331.0], [26.6, 332.0], [26.7, 333.0], [26.8, 334.0], [26.9, 341.0], [27.0, 342.0], [27.1, 343.0], [27.2, 344.0], [27.3, 345.0], [27.4, 345.0], [27.5, 345.0], [27.6, 348.0], [27.7, 349.0], [27.8, 349.0], [27.9, 350.0], [28.0, 351.0], [28.1, 357.0], [28.2, 358.0], [28.3, 358.0], [28.4, 360.0], [28.5, 361.0], [28.6, 361.0], [28.7, 364.0], [28.8, 368.0], [28.9, 368.0], [29.0, 368.0], [29.1, 369.0], [29.2, 371.0], [29.3, 372.0], [29.4, 373.0], [29.5, 374.0], [29.6, 375.0], [29.7, 375.0], [29.8, 377.0], [29.9, 378.0], [30.0, 378.0], [30.1, 379.0], [30.2, 379.0], [30.3, 380.0], [30.4, 380.0], [30.5, 381.0], [30.6, 382.0], [30.7, 382.0], [30.8, 383.0], [30.9, 384.0], [31.0, 384.0], [31.1, 384.0], [31.2, 385.0], [31.3, 386.0], [31.4, 388.0], [31.5, 389.0], [31.6, 389.0], [31.7, 392.0], [31.8, 394.0], [31.9, 395.0], [32.0, 396.0], [32.1, 396.0], [32.2, 397.0], [32.3, 398.0], [32.4, 400.0], [32.5, 402.0], [32.6, 406.0], [32.7, 407.0], [32.8, 408.0], [32.9, 409.0], [33.0, 409.0], [33.1, 410.0], [33.2, 412.0], [33.3, 414.0], [33.4, 416.0], [33.5, 417.0], [33.6, 417.0], [33.7, 418.0], [33.8, 419.0], [33.9, 419.0], [34.0, 421.0], [34.1, 422.0], [34.2, 424.0], [34.3, 425.0], [34.4, 425.0], [34.5, 426.0], [34.6, 427.0], [34.7, 431.0], [34.8, 431.0], [34.9, 432.0], [35.0, 434.0], [35.1, 434.0], [35.2, 435.0], [35.3, 436.0], [35.4, 438.0], [35.5, 438.0], [35.6, 438.0], [35.7, 442.0], [35.8, 444.0], [35.9, 444.0], [36.0, 445.0], [36.1, 445.0], [36.2, 447.0], [36.3, 454.0], [36.4, 454.0], [36.5, 455.0], [36.6, 459.0], [36.7, 460.0], [36.8, 462.0], [36.9, 463.0], [37.0, 464.0], [37.1, 464.0], [37.2, 467.0], [37.3, 467.0], [37.4, 470.0], [37.5, 471.0], [37.6, 474.0], [37.7, 476.0], [37.8, 476.0], [37.9, 478.0], [38.0, 479.0], [38.1, 481.0], [38.2, 481.0], [38.3, 482.0], [38.4, 485.0], [38.5, 487.0], [38.6, 488.0], [38.7, 490.0], [38.8, 492.0], [38.9, 495.0], [39.0, 495.0], [39.1, 498.0], [39.2, 499.0], [39.3, 501.0], [39.4, 502.0], [39.5, 502.0], [39.6, 505.0], [39.7, 507.0], [39.8, 507.0], [39.9, 508.0], [40.0, 509.0], [40.1, 509.0], [40.2, 512.0], [40.3, 512.0], [40.4, 512.0], [40.5, 515.0], [40.6, 516.0], [40.7, 517.0], [40.8, 517.0], [40.9, 520.0], [41.0, 523.0], [41.1, 524.0], [41.2, 526.0], [41.3, 527.0], [41.4, 527.0], [41.5, 529.0], [41.6, 529.0], [41.7, 534.0], [41.8, 534.0], [41.9, 536.0], [42.0, 536.0], [42.1, 537.0], [42.2, 537.0], [42.3, 538.0], [42.4, 539.0], [42.5, 540.0], [42.6, 541.0], [42.7, 541.0], [42.8, 544.0], [42.9, 545.0], [43.0, 545.0], [43.1, 549.0], [43.2, 549.0], [43.3, 550.0], [43.4, 550.0], [43.5, 551.0], [43.6, 554.0], [43.7, 555.0], [43.8, 555.0], [43.9, 557.0], [44.0, 558.0], [44.1, 563.0], [44.2, 565.0], [44.3, 567.0], [44.4, 567.0], [44.5, 568.0], [44.6, 575.0], [44.7, 576.0], [44.8, 578.0], [44.9, 579.0], [45.0, 583.0], [45.1, 586.0], [45.2, 588.0], [45.3, 589.0], [45.4, 590.0], [45.5, 591.0], [45.6, 594.0], [45.7, 594.0], [45.8, 595.0], [45.9, 596.0], [46.0, 596.0], [46.1, 598.0], [46.2, 599.0], [46.3, 609.0], [46.4, 609.0], [46.5, 613.0], [46.6, 613.0], [46.7, 615.0], [46.8, 621.0], [46.9, 622.0], [47.0, 623.0], [47.1, 623.0], [47.2, 624.0], [47.3, 625.0], [47.4, 625.0], [47.5, 625.0], [47.6, 625.0], [47.7, 625.0], [47.8, 626.0], [47.9, 628.0], [48.0, 633.0], [48.1, 639.0], [48.2, 640.0], [48.3, 641.0], [48.4, 642.0], [48.5, 642.0], [48.6, 642.0], [48.7, 643.0], [48.8, 643.0], [48.9, 644.0], [49.0, 645.0], [49.1, 647.0], [49.2, 648.0], [49.3, 648.0], [49.4, 651.0], [49.5, 652.0], [49.6, 655.0], [49.7, 656.0], [49.8, 658.0], [49.9, 658.0], [50.0, 659.0], [50.1, 661.0], [50.2, 662.0], [50.3, 662.0], [50.4, 662.0], [50.5, 663.0], [50.6, 663.0], [50.7, 664.0], [50.8, 665.0], [50.9, 670.0], [51.0, 672.0], [51.1, 675.0], [51.2, 676.0], [51.3, 676.0], [51.4, 677.0], [51.5, 678.0], [51.6, 684.0], [51.7, 685.0], [51.8, 689.0], [51.9, 691.0], [52.0, 692.0], [52.1, 693.0], [52.2, 693.0], [52.3, 695.0], [52.4, 696.0], [52.5, 697.0], [52.6, 697.0], [52.7, 698.0], [52.8, 698.0], [52.9, 699.0], [53.0, 700.0], [53.1, 701.0], [53.2, 702.0], [53.3, 703.0], [53.4, 704.0], [53.5, 704.0], [53.6, 704.0], [53.7, 705.0], [53.8, 705.0], [53.9, 707.0], [54.0, 710.0], [54.1, 712.0], [54.2, 714.0], [54.3, 718.0], [54.4, 719.0], [54.5, 723.0], [54.6, 724.0], [54.7, 727.0], [54.8, 731.0], [54.9, 731.0], [55.0, 734.0], [55.1, 740.0], [55.2, 740.0], [55.3, 742.0], [55.4, 744.0], [55.5, 748.0], [55.6, 749.0], [55.7, 749.0], [55.8, 749.0], [55.9, 750.0], [56.0, 750.0], [56.1, 751.0], [56.2, 753.0], [56.3, 754.0], [56.4, 759.0], [56.5, 759.0], [56.6, 760.0], [56.7, 766.0], [56.8, 766.0], [56.9, 767.0], [57.0, 770.0], [57.1, 772.0], [57.2, 772.0], [57.3, 774.0], [57.4, 779.0], [57.5, 780.0], [57.6, 781.0], [57.7, 786.0], [57.8, 788.0], [57.9, 789.0], [58.0, 790.0], [58.1, 790.0], [58.2, 791.0], [58.3, 792.0], [58.4, 793.0], [58.5, 796.0], [58.6, 796.0], [58.7, 800.0], [58.8, 800.0], [58.9, 803.0], [59.0, 808.0], [59.1, 808.0], [59.2, 811.0], [59.3, 813.0], [59.4, 813.0], [59.5, 814.0], [59.6, 814.0], [59.7, 814.0], [59.8, 815.0], [59.9, 815.0], [60.0, 816.0], [60.1, 817.0], [60.2, 818.0], [60.3, 818.0], [60.4, 823.0], [60.5, 823.0], [60.6, 823.0], [60.7, 824.0], [60.8, 825.0], [60.9, 825.0], [61.0, 826.0], [61.1, 826.0], [61.2, 827.0], [61.3, 831.0], [61.4, 833.0], [61.5, 848.0], [61.6, 850.0], [61.7, 851.0], [61.8, 853.0], [61.9, 854.0], [62.0, 856.0], [62.1, 856.0], [62.2, 857.0], [62.3, 857.0], [62.4, 858.0], [62.5, 858.0], [62.6, 859.0], [62.7, 873.0], [62.8, 873.0], [62.9, 877.0], [63.0, 881.0], [63.1, 886.0], [63.2, 893.0], [63.3, 894.0], [63.4, 895.0], [63.5, 903.0], [63.6, 904.0], [63.7, 905.0], [63.8, 909.0], [63.9, 912.0], [64.0, 912.0], [64.1, 913.0], [64.2, 913.0], [64.3, 925.0], [64.4, 927.0], [64.5, 929.0], [64.6, 930.0], [64.7, 931.0], [64.8, 933.0], [64.9, 940.0], [65.0, 941.0], [65.1, 944.0], [65.2, 945.0], [65.3, 946.0], [65.4, 947.0], [65.5, 948.0], [65.6, 948.0], [65.7, 951.0], [65.8, 951.0], [65.9, 958.0], [66.0, 961.0], [66.1, 962.0], [66.2, 963.0], [66.3, 964.0], [66.4, 964.0], [66.5, 967.0], [66.6, 967.0], [66.7, 968.0], [66.8, 968.0], [66.9, 970.0], [67.0, 971.0], [67.1, 974.0], [67.2, 974.0], [67.3, 977.0], [67.4, 983.0], [67.5, 983.0], [67.6, 990.0], [67.7, 991.0], [67.8, 993.0], [67.9, 994.0], [68.0, 995.0], [68.1, 997.0], [68.2, 999.0], [68.3, 1010.0], [68.4, 1014.0], [68.5, 1015.0], [68.6, 1016.0], [68.7, 1031.0], [68.8, 1035.0], [68.9, 1036.0], [69.0, 1037.0], [69.1, 1043.0], [69.2, 1050.0], [69.3, 1051.0], [69.4, 1053.0], [69.5, 1053.0], [69.6, 1053.0], [69.7, 1055.0], [69.8, 1074.0], [69.9, 1077.0], [70.0, 1078.0], [70.1, 1081.0], [70.2, 1081.0], [70.3, 1085.0], [70.4, 1092.0], [70.5, 1096.0], [70.6, 1097.0], [70.7, 1098.0], [70.8, 1100.0], [70.9, 1105.0], [71.0, 1108.0], [71.1, 1110.0], [71.2, 1110.0], [71.3, 1115.0], [71.4, 1117.0], [71.5, 1123.0], [71.6, 1124.0], [71.7, 1140.0], [71.8, 1141.0], [71.9, 1141.0], [72.0, 1147.0], [72.1, 1148.0], [72.2, 1157.0], [72.3, 1158.0], [72.4, 1162.0], [72.5, 1164.0], [72.6, 1164.0], [72.7, 1165.0], [72.8, 1165.0], [72.9, 1166.0], [73.0, 1167.0], [73.1, 1168.0], [73.2, 1170.0], [73.3, 1171.0], [73.4, 1175.0], [73.5, 1181.0], [73.6, 1182.0], [73.7, 1184.0], [73.8, 1193.0], [73.9, 1196.0], [74.0, 1202.0], [74.1, 1213.0], [74.2, 1217.0], [74.3, 1217.0], [74.4, 1217.0], [74.5, 1221.0], [74.6, 1222.0], [74.7, 1225.0], [74.8, 1238.0], [74.9, 1238.0], [75.0, 1242.0], [75.1, 1242.0], [75.2, 1245.0], [75.3, 1246.0], [75.4, 1248.0], [75.5, 1248.0], [75.6, 1249.0], [75.7, 1249.0], [75.8, 1252.0], [75.9, 1252.0], [76.0, 1254.0], [76.1, 1265.0], [76.2, 1269.0], [76.3, 1272.0], [76.4, 1272.0], [76.5, 1274.0], [76.6, 1276.0], [76.7, 1277.0], [76.8, 1280.0], [76.9, 1285.0], [77.0, 1290.0], [77.1, 1294.0], [77.2, 1294.0], [77.3, 1301.0], [77.4, 1306.0], [77.5, 1309.0], [77.6, 1310.0], [77.7, 1321.0], [77.8, 1323.0], [77.9, 1332.0], [78.0, 1337.0], [78.1, 1341.0], [78.2, 1349.0], [78.3, 1352.0], [78.4, 1356.0], [78.5, 1373.0], [78.6, 1374.0], [78.7, 1375.0], [78.8, 1375.0], [78.9, 1377.0], [79.0, 1386.0], [79.1, 1392.0], [79.2, 1392.0], [79.3, 1395.0], [79.4, 1398.0], [79.5, 1406.0], [79.6, 1408.0], [79.7, 1413.0], [79.8, 1425.0], [79.9, 1426.0], [80.0, 1440.0], [80.1, 1441.0], [80.2, 1444.0], [80.3, 1449.0], [80.4, 1461.0], [80.5, 1462.0], [80.6, 1463.0], [80.7, 1484.0], [80.8, 1485.0], [80.9, 1487.0], [81.0, 1503.0], [81.1, 1511.0], [81.2, 1512.0], [81.3, 1515.0], [81.4, 1517.0], [81.5, 1524.0], [81.6, 1530.0], [81.7, 1531.0], [81.8, 1532.0], [81.9, 1541.0], [82.0, 1548.0], [82.1, 1557.0], [82.2, 1560.0], [82.3, 1565.0], [82.4, 1578.0], [82.5, 1595.0], [82.6, 1600.0], [82.7, 1601.0], [82.8, 1609.0], [82.9, 1611.0], [83.0, 1616.0], [83.1, 1622.0], [83.2, 1624.0], [83.3, 1627.0], [83.4, 1639.0], [83.5, 1639.0], [83.6, 1645.0], [83.7, 1656.0], [83.8, 1656.0], [83.9, 1662.0], [84.0, 1666.0], [84.1, 1675.0], [84.2, 1677.0], [84.3, 1687.0], [84.4, 1689.0], [84.5, 1703.0], [84.6, 1704.0], [84.7, 1724.0], [84.8, 1745.0], [84.9, 1749.0], [85.0, 1763.0], [85.1, 1787.0], [85.2, 1793.0], [85.3, 1793.0], [85.4, 1796.0], [85.5, 1803.0], [85.6, 1806.0], [85.7, 1806.0], [85.8, 1806.0], [85.9, 1831.0], [86.0, 1848.0], [86.1, 1850.0], [86.2, 1851.0], [86.3, 1852.0], [86.4, 1859.0], [86.5, 1881.0], [86.6, 1890.0], [86.7, 1893.0], [86.8, 1897.0], [86.9, 1902.0], [87.0, 1910.0], [87.1, 1912.0], [87.2, 1916.0], [87.3, 1929.0], [87.4, 1931.0], [87.5, 1934.0], [87.6, 1967.0], [87.7, 1968.0], [87.8, 1974.0], [87.9, 1975.0], [88.0, 2006.0], [88.1, 2011.0], [88.2, 2015.0], [88.3, 2022.0], [88.4, 2022.0], [88.5, 2023.0], [88.6, 2039.0], [88.7, 2046.0], [88.8, 2069.0], [88.9, 2069.0], [89.0, 2069.0], [89.1, 2077.0], [89.2, 2081.0], [89.3, 2081.0], [89.4, 2087.0], [89.5, 2090.0], [89.6, 2108.0], [89.7, 2108.0], [89.8, 2110.0], [89.9, 2111.0], [90.0, 2115.0], [90.1, 2119.0], [90.2, 2122.0], [90.3, 2123.0], [90.4, 2124.0], [90.5, 2127.0], [90.6, 2131.0], [90.7, 2134.0], [90.8, 2169.0], [90.9, 2179.0], [91.0, 2180.0], [91.1, 2180.0], [91.2, 2184.0], [91.3, 2184.0], [91.4, 2188.0], [91.5, 2198.0], [91.6, 2202.0], [91.7, 2208.0], [91.8, 2210.0], [91.9, 2214.0], [92.0, 2226.0], [92.1, 2233.0], [92.2, 2280.0], [92.3, 2295.0], [92.4, 2304.0], [92.5, 2313.0], [92.6, 2316.0], [92.7, 2319.0], [92.8, 2319.0], [92.9, 2344.0], [93.0, 2345.0], [93.1, 2347.0], [93.2, 2363.0], [93.3, 2375.0], [93.4, 2378.0], [93.5, 2394.0], [93.6, 2398.0], [93.7, 2399.0], [93.8, 2400.0], [93.9, 2409.0], [94.0, 2410.0], [94.1, 2417.0], [94.2, 2418.0], [94.3, 2446.0], [94.4, 2447.0], [94.5, 2448.0], [94.6, 2453.0], [94.7, 2458.0], [94.8, 2462.0], [94.9, 2474.0], [95.0, 2484.0], [95.1, 2496.0], [95.2, 2500.0], [95.3, 2501.0], [95.4, 2515.0], [95.5, 2519.0], [95.6, 2571.0], [95.7, 2578.0], [95.8, 2599.0], [95.9, 2601.0], [96.0, 2643.0], [96.1, 2650.0], [96.2, 2650.0], [96.3, 2651.0], [96.4, 2682.0], [96.5, 2683.0], [96.6, 2684.0], [96.7, 2688.0], [96.8, 2695.0], [96.9, 2695.0], [97.0, 2696.0], [97.1, 2696.0], [97.2, 2776.0], [97.3, 2785.0], [97.4, 2785.0], [97.5, 2786.0], [97.6, 2786.0], [97.7, 2799.0], [97.8, 2924.0], [97.9, 2927.0], [98.0, 2960.0], [98.1, 2968.0], [98.2, 2969.0], [98.3, 3009.0], [98.4, 3032.0], [98.5, 3038.0], [98.6, 3038.0], [98.7, 3044.0], [98.8, 3044.0], [98.9, 3046.0], [99.0, 3104.0], [99.1, 3122.0], [99.2, 3236.0], [99.3, 3274.0], [99.4, 3398.0], [99.5, 3693.0], [99.6, 4710.0], [99.7, 5186.0], [99.8, 6997.0], [99.9, 7001.0]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 100.0, "title": "Response Time Percentiles"}},
        getOptions: function() {
            return {
                series: {
                    points: { show: false }
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentiles'
                },
                xaxis: {
                    tickDecimals: 1,
                    axisLabel: "Percentiles",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Percentile value in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : %x.2 percentile was %y ms"
                },
                selection: { mode: "xy" },
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentiles"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesPercentiles"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesPercentiles"), dataset, prepareOverviewOptions(options));
        }
};

/**
 * @param elementId Id of element where we display message
 */
function setEmptyGraph(elementId) {
    $(function() {
        $(elementId).text("No graph series with filter="+seriesFilter);
    });
}

// Response times percentiles
function refreshResponseTimePercentiles() {
    var infos = responseTimePercentilesInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimePercentiles");
        return;
    }
    if (isGraph($("#flotResponseTimesPercentiles"))){
        infos.createGraph();
    } else {
        var choiceContainer = $("#choicesResponseTimePercentiles");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesPercentiles", "#overviewResponseTimesPercentiles");
        $('#bodyResponseTimePercentiles .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimeDistributionInfos = {
        data: {"result": {"minY": 1.0, "minX": 0.0, "maxY": 195.0, "series": [{"data": [[0.0, 1.0], [600.0, 9.0], [700.0, 3.0], [800.0, 7.0], [900.0, 8.0], [1000.0, 11.0], [1100.0, 21.0], [1200.0, 18.0], [1300.0, 24.0], [1400.0, 26.0], [1500.0, 21.0], [1600.0, 20.0], [1700.0, 11.0], [1800.0, 7.0], [1900.0, 5.0], [2000.0, 4.0], [2100.0, 2.0], [2200.0, 2.0], [2300.0, 3.0], [2400.0, 5.0], [2500.0, 6.0], [2600.0, 19.0], [2700.0, 5.0], [2800.0, 17.0], [2900.0, 16.0], [3000.0, 25.0], [3100.0, 30.0], [3200.0, 39.0], [3300.0, 25.0], [3400.0, 31.0], [3500.0, 20.0], [3600.0, 18.0], [3700.0, 21.0], [3800.0, 15.0], [3900.0, 17.0], [4000.0, 20.0], [4100.0, 19.0], [4200.0, 28.0], [4300.0, 29.0], [4400.0, 19.0], [4500.0, 32.0], [4600.0, 26.0], [4700.0, 31.0], [4800.0, 26.0], [4900.0, 21.0], [5000.0, 15.0], [5100.0, 11.0], [5300.0, 10.0], [5200.0, 11.0], [5400.0, 13.0], [5500.0, 13.0], [5600.0, 7.0], [5700.0, 13.0], [5800.0, 13.0], [5900.0, 11.0], [6000.0, 9.0], [6100.0, 4.0], [6200.0, 8.0], [6300.0, 10.0], [6400.0, 7.0], [6500.0, 4.0], [6600.0, 1.0], [6800.0, 4.0], [6900.0, 1.0], [7000.0, 1.0], [7200.0, 1.0], [7400.0, 4.0], [7500.0, 1.0], [7700.0, 3.0], [7900.0, 4.0], [7800.0, 4.0], [8100.0, 2.0], [8000.0, 3.0], [8400.0, 3.0], [8500.0, 4.0], [8200.0, 2.0], [8600.0, 4.0], [8700.0, 1.0], [8300.0, 2.0], [100.0, 7.0], [200.0, 14.0], [300.0, 4.0], [400.0, 2.0], [500.0, 6.0]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[0.0, 195.0], [600.0, 67.0], [700.0, 57.0], [800.0, 48.0], [900.0, 48.0], [1000.0, 25.0], [1100.0, 32.0], [1200.0, 33.0], [1300.0, 23.0], [1400.0, 15.0], [1500.0, 16.0], [100.0, 27.0], [1600.0, 19.0], [1700.0, 10.0], [1800.0, 14.0], [1900.0, 11.0], [2000.0, 16.0], [2100.0, 20.0], [2300.0, 14.0], [2200.0, 8.0], [2400.0, 14.0], [2500.0, 7.0], [2600.0, 13.0], [2700.0, 6.0], [2900.0, 5.0], [3000.0, 7.0], [3100.0, 2.0], [200.0, 29.0], [3300.0, 1.0], [3200.0, 2.0], [3600.0, 1.0], [300.0, 72.0], [4700.0, 1.0], [5100.0, 1.0], [400.0, 69.0], [6900.0, 1.0], [7000.0, 1.0], [500.0, 70.0]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 100, "maxX": 8700.0, "title": "Response Time Distribution"}},
        getOptions: function() {
            var granularity = this.data.result.granularity;
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    barWidth: this.data.result.granularity
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " responses for " + label + " were between " + xval + " and " + (xval + granularity) + " ms";
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimeDistribution"), prepareData(data.result.series, $("#choicesResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshResponseTimeDistribution() {
    var infos = responseTimeDistributionInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeDistribution");
        return;
    }
    if (isGraph($("#flotResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var syntheticResponseTimeDistributionInfos = {
        data: {"result": {"minY": 16.0, "minX": 0.0, "ticks": [[0, "Requests having \nresponse time <= 500ms"], [1, "Requests having \nresponse time > 500ms and <= 1,500ms"], [2, "Requests having \nresponse time > 1,500ms"], [3, "Requests in error"]], "maxY": 1021.0, "series": [{"data": [[0.0, 413.0]], "color": "#9ACD32", "isOverall": false, "label": "Requests having \nresponse time <= 500ms", "isController": false}, {"data": [[1.0, 550.0]], "color": "yellow", "isOverall": false, "label": "Requests having \nresponse time > 500ms and <= 1,500ms", "isController": false}, {"data": [[2.0, 1021.0]], "color": "orange", "isOverall": false, "label": "Requests having \nresponse time > 1,500ms", "isController": false}, {"data": [[3.0, 16.0]], "color": "#FF6347", "isOverall": false, "label": "Requests in error", "isController": false}], "supportsControllersDiscrimination": false, "maxX": 3.0, "title": "Synthetic Response Times Distribution"}},
        getOptions: function() {
            return {
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendSyntheticResponseTimeDistribution'
                },
                xaxis:{
                    axisLabel: "Response times ranges",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                    tickLength:0,
                    min:-0.5,
                    max:3.5
                },
                yaxis: {
                    axisLabel: "Number of responses",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                bars : {
                    show: true,
                    align: "center",
                    barWidth: 0.25,
                    fill:.75
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: function(label, xval, yval, flotItem){
                        return yval + " " + label;
                    }
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var options = this.getOptions();
            prepareOptions(options, data);
            options.xaxis.ticks = data.result.ticks;
            $.plot($("#flotSyntheticResponseTimeDistribution"), prepareData(data.result.series, $("#choicesSyntheticResponseTimeDistribution")), options);
        }

};

// Response time distribution
function refreshSyntheticResponseTimeDistribution() {
    var infos = syntheticResponseTimeDistributionInfos;
    prepareSeries(infos.data, true);
    if (isGraph($("#flotSyntheticResponseTimeDistribution"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        $('#footerSyntheticResponseTimeDistribution .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var activeThreadsOverTimeInfos = {
        data: {"result": {"minY": 320.15749999999963, "minX": 1.72499028E12, "maxY": 320.15749999999963, "series": [{"data": [[1.72499028E12, 320.15749999999963]], "isOverall": false, "label": "Thread Group", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72499028E12, "title": "Active Threads Over Time"}},
        getOptions: function() {
            return {
                series: {
                    stack: true,
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 6,
                    show: true,
                    container: '#legendActiveThreadsOverTime'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                selection: {
                    mode: 'xy'
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : At %x there were %y active threads"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesActiveThreadsOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotActiveThreadsOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewActiveThreadsOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Active Threads Over Time
function refreshActiveThreadsOverTime(fixTimestamps) {
    var infos = activeThreadsOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotActiveThreadsOverTime"))) {
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesActiveThreadsOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotActiveThreadsOverTime", "#overviewActiveThreadsOverTime");
        $('#footerActiveThreadsOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var timeVsThreadsInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.0, "maxY": 8525.0, "series": [{"data": [[5.0, 7456.0], [7.0, 7447.0], [9.0, 7500.0], [14.0, 7800.0], [16.0, 7822.5], [17.0, 7934.0], [18.0, 7957.0], [22.0, 7321.333333333333], [26.0, 8038.0], [27.0, 8263.0], [29.0, 6779.333333333333], [30.0, 193.70000000000005], [32.0, 8525.0], [34.0, 259.0], [36.0, 6920.6], [37.0, 2014.6666666666667], [38.0, 4691.2], [39.0, 4334.5], [40.0, 255.5], [41.0, 205.0], [46.0, 6669.333333333333], [49.0, 8486.0], [48.0, 6858.5], [50.0, 7069.5], [52.0, 5562.0], [57.0, 6619.333333333333], [58.0, 4304.0], [61.0, 5849.0], [60.0, 7253.0], [63.0, 6148.0], [67.0, 4969.666666666667], [64.0, 6223.0], [69.0, 6376.0], [68.0, 4951.0], [75.0, 6214.0], [73.0, 5741.666666666667], [76.0, 5808.666666666667], [83.0, 574.0], [81.0, 6049.666666666667], [80.0, 5706.5], [87.0, 595.4444444444443], [85.0, 602.0], [86.0, 5117.0], [88.0, 678.0], [89.0, 763.0], [91.0, 6663.0], [90.0, 5016.0], [95.0, 6449.0], [94.0, 5626.5], [99.0, 5091.5], [96.0, 5543.0], [100.0, 3560.5], [106.0, 5615.0], [110.0, 5839.333333333334], [117.0, 936.0], [118.0, 902.0], [116.0, 4641.0], [123.0, 4750.0], [120.0, 5611.333333333333], [124.0, 1014.0], [127.0, 1013.3333333333334], [126.0, 5529.0], [129.0, 1042.8], [130.0, 4248.4], [128.0, 1019.0], [131.0, 1005.0], [132.0, 1258.3333333333333], [133.0, 1199.0], [135.0, 4071.0], [134.0, 3934.0], [141.0, 2757.5], [139.0, 5060.0], [138.0, 5413.75], [136.0, 4730.0], [147.0, 4263.4], [148.0, 1223.75], [150.0, 1332.0], [151.0, 3448.0], [145.0, 5599.0], [156.0, 1313.0], [158.0, 4976.0], [157.0, 4209.666666666667], [155.0, 4546.0], [154.0, 4634.5], [152.0, 3433.0], [160.0, 1361.0], [165.0, 1267.6666666666667], [167.0, 5032.5], [164.0, 5447.0], [170.0, 1414.0], [172.0, 2526.666666666667], [171.0, 1365.5], [174.0, 1153.3333333333333], [175.0, 1406.0], [168.0, 4584.0], [176.0, 1329.0], [179.0, 4557.5], [178.0, 5892.0], [177.0, 4833.333333333334], [184.0, 1339.5], [185.0, 1537.0], [186.0, 1632.0], [188.0, 1380.0], [189.0, 1263.6666666666667], [191.0, 3628.3333333333335], [190.0, 4307.0], [187.0, 4916.0], [194.0, 1478.8], [197.0, 1470.0], [199.0, 1463.5], [196.0, 1818.25], [195.0, 2138.875], [193.0, 2218.0], [201.0, 1316.7500000000002], [202.0, 1425.0], [205.0, 1166.0], [200.0, 1416.0], [211.0, 1657.5], [213.0, 1559.5], [215.0, 1845.8], [214.0, 1544.0], [212.0, 1549.0], [209.0, 1741.0], [220.0, 1620.4], [221.0, 1651.9166666666667], [219.0, 2124.0], [216.0, 1816.875], [218.0, 1401.625], [217.0, 1454.6], [222.0, 1268.5], [223.0, 1326.5], [226.0, 3211.0], [224.0, 1551.0], [225.0, 1476.6], [231.0, 4986.333333333333], [229.0, 3799.0], [232.0, 4312.0], [254.0, 5044.0], [249.0, 4284.0], [269.0, 3860.5], [261.0, 3599.0], [259.0, 6890.0], [257.0, 4065.0], [285.0, 4391.0], [282.0, 2889.0], [293.0, 4158.25], [289.0, 4560.0], [316.0, 2625.0], [317.0, 3245.0], [319.0, 3333.6666666666665], [318.0, 2728.0], [314.0, 4161.25], [307.0, 3030.0], [333.0, 2563.0], [321.0, 2862.0], [320.0, 2676.0], [330.0, 2734.0], [328.0, 3075.6666666666665], [329.0, 2870.5], [331.0, 2801.3333333333335], [332.0, 2928.285714285714], [334.0, 4251.142857142857], [335.0, 4578.5], [339.0, 3224.0], [340.0, 2901.5], [343.0, 3596.5], [351.0, 4106.333333333333], [349.0, 5026.0], [347.0, 3461.5], [345.0, 3447.0], [336.0, 3070.0], [363.0, 3085.666666666667], [364.0, 3458.181818181818], [366.0, 3410.0], [354.0, 4300.0], [353.0, 2656.0], [381.0, 3449.0], [369.0, 1289.0], [382.0, 3458.5555555555557], [383.0, 4018.25], [380.0, 3854.0], [379.0, 3340.0], [377.0, 4561.0], [373.0, 3654.0], [368.0, 3378.5], [370.0, 3203.5], [396.0, 3332.0], [385.0, 3121.0000000000005], [387.0, 2918.5], [386.0, 3548.0], [388.0, 3301.571428571429], [389.0, 3854.6666666666665], [397.0, 3702.4], [399.0, 4855.0], [394.0, 4742.0], [392.0, 5002.0], [391.0, 3528.0], [413.0, 3240.6666666666665], [403.0, 4025.769230769231], [404.0, 3005.0], [409.0, 3027.5], [405.0, 3211.0], [407.0, 4855.4], [400.0, 5491.0], [406.0, 3989.6], [410.0, 3322.0], [415.0, 3822.6666666666665], [408.0, 4382.5], [412.0, 3885.4], [411.0, 3564.5], [430.0, 3342.0], [417.0, 3001.5], [431.0, 3867.0], [428.0, 3092.0], [419.0, 5492.0], [427.0, 3023.0], [426.0, 2532.0], [425.0, 4650.333333333333], [423.0, 3056.6666666666665], [422.0, 5307.0], [434.0, 4080.0], [435.0, 3126.0], [444.0, 5405.666666666667], [436.0, 3059.6666666666665], [439.0, 4217.2], [440.0, 3109.0], [443.0, 4478.833333333333], [447.0, 5426.0], [438.0, 4077.285714285714], [437.0, 3503.5555555555557], [433.0, 3427.0], [446.0, 3354.5], [462.0, 4668.0], [463.0, 3465.0], [461.0, 5076.5], [459.0, 4764.333333333333], [457.0, 4746.272727272727], [452.0, 4637.0], [449.0, 4941.0], [465.0, 3660.0], [464.0, 3795.333333333333], [467.0, 3732.5], [469.0, 3511.5], [470.0, 4931.4], [475.0, 3683.5], [477.0, 3778.363636363636], [476.0, 3946.4], [479.0, 3979.5], [478.0, 5085.0], [492.0, 3308.0], [480.0, 3665.9], [485.0, 3848.0], [484.0, 4708.0], [481.0, 3822.5], [482.0, 1647.0], [490.0, 3843.428571428571], [494.0, 4218.5], [495.0, 4897.0], [493.0, 4734.5], [489.0, 1619.0], [501.0, 3787.0], [506.0, 5035.333333333333], [504.0, 4371.0], [500.0, 4484.0], [499.0, 4838.8], [498.0, 4420.0], [541.0, 4239.5], [542.0, 4186.75], [543.0, 4356.5], [534.0, 4718.0], [533.0, 4838.0], [528.0, 704.0], [522.0, 4667.0], [515.0, 3919.0], [570.0, 4662.714285714285], [555.0, 4371.0], [544.0, 4612.75], [545.0, 5423.0], [546.0, 4179.0], [549.0, 5156.0], [548.0, 4205.0], [569.0, 4443.0], [568.0, 4768.125000000001], [574.0, 4563.999999999999], [573.0, 4320.571428571428], [575.0, 4602.0], [572.0, 4472.625], [571.0, 4151.0], [552.0, 4655.5], [553.0, 4061.0], [554.0, 4272.0], [556.0, 4375.0], [558.0, 409.0], [561.0, 4527.4], [563.0, 4273.0], [564.0, 4978.0], [565.0, 4556.111111111112], [566.0, 4198.428571428572], [567.0, 4212.25], [562.0, 3958.0], [577.0, 4523.272727272727], [578.0, 4559.666666666666], [579.0, 4304.333333333333]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[318.7340000000003, 3700.5049999999956]], "isOverall": false, "label": "Prepare Order-Aggregated", "isController": false}, {"data": [[3.0, 37.0], [5.0, 40.0], [7.0, 37.0], [8.0, 32.0], [9.0, 37.0], [10.0, 34.0], [12.0, 43.0], [14.0, 45.0], [16.0, 47.0], [17.0, 48.0], [18.0, 39.0], [19.0, 38.0], [20.0, 35.0], [22.0, 42.0], [23.0, 59.0], [26.0, 59.666666666666664], [27.0, 64.0], [28.0, 29.0], [29.0, 26.0], [33.0, 119.0], [32.0, 74.0], [35.0, 114.0], [37.0, 93.0], [36.0, 114.5], [39.0, 47.0], [38.0, 48.0], [43.0, 64.0], [42.0, 68.66666666666667], [44.0, 63.0], [46.0, 60.5], [49.0, 50.0], [48.0, 71.0], [50.0, 59.0], [52.0, 48.0], [55.0, 41.0], [54.0, 42.0], [57.0, 47.5], [59.0, 88.0], [58.0, 89.0], [61.0, 82.0], [60.0, 86.0], [63.0, 83.5], [67.0, 40.0], [65.0, 54.0], [64.0, 79.0], [71.0, 38.0], [70.0, 31.0], [69.0, 32.0], [68.0, 34.0], [75.0, 39.0], [73.0, 32.0], [72.0, 42.0], [79.0, 29.0], [78.0, 29.0], [77.0, 34.0], [76.0, 34.0], [83.0, 33.0], [82.0, 35.0], [81.0, 37.0], [80.0, 36.0], [87.0, 606.5], [86.0, 287.0], [85.0, 306.0], [84.0, 37.0], [89.0, 466.5], [88.0, 385.6], [91.0, 388.5], [90.0, 360.0], [95.0, 44.0], [94.0, 55.0], [93.0, 50.0], [99.0, 431.5], [98.0, 34.5], [96.0, 32.0], [103.0, 407.5], [102.0, 33.0], [100.0, 32.0], [107.0, 360.0], [106.0, 35.666666666666664], [108.0, 311.66666666666663], [111.0, 79.0], [110.0, 64.0], [109.0, 34.0], [115.0, 73.0], [114.0, 74.0], [113.0, 73.0], [112.0, 77.0], [117.0, 706.0], [116.0, 284.0], [118.0, 508.2], [119.0, 37.0], [123.0, 359.33333333333337], [122.0, 41.5], [120.0, 38.0], [124.0, 565.0], [127.0, 433.5], [126.0, 116.5], [125.0, 41.0], [129.0, 596.6666666666666], [128.0, 472.25], [131.0, 329.0], [130.0, 398.22222222222223], [135.0, 33.0], [133.0, 32.0], [132.0, 33.0], [137.0, 180.0], [139.0, 248.5], [143.0, 50.5], [141.0, 41.0], [138.0, 35.0], [136.0, 32.0], [150.0, 54.5], [149.0, 55.0], [147.0, 33.0], [146.0, 35.0], [145.0, 41.0], [144.0, 46.0], [158.0, 36.0], [157.0, 56.0], [156.0, 55.0], [155.0, 49.0], [154.0, 41.0], [153.0, 43.0], [152.0, 42.5], [165.0, 244.0], [167.0, 32.0], [166.0, 33.0], [164.0, 37.75], [160.0, 39.5], [172.0, 225.33333333333331], [175.0, 56.0], [174.0, 46.5], [170.0, 45.0], [169.0, 62.0], [168.0, 40.0], [176.0, 558.5], [178.0, 282.5], [182.0, 352.5], [183.0, 30.0], [181.0, 38.0], [180.0, 30.0], [179.0, 30.0], [177.0, 48.0], [185.0, 696.0], [191.0, 292.0], [190.0, 439.66666666666663], [189.0, 47.0], [188.0, 56.0], [187.0, 33.0], [184.0, 26.0], [194.0, 310.6666666666667], [197.0, 578.7777777777778], [198.0, 382.0], [196.0, 482.875], [193.0, 491.3333333333333], [192.0, 471.5], [199.0, 139.5], [195.0, 63.0], [207.0, 439.5], [205.0, 608.4], [203.0, 163.83333333333334], [202.0, 368.25], [201.0, 444.0], [200.0, 589.0], [206.0, 142.5], [204.0, 174.0], [215.0, 599.8571428571429], [214.0, 512.0], [212.0, 327.0], [211.0, 534.3333333333334], [209.0, 625.0], [208.0, 277.5], [213.0, 169.0], [210.0, 148.0], [220.0, 799.8125000000001], [221.0, 521.75], [222.0, 768.9], [223.0, 625.0], [219.0, 659.076923076923], [218.0, 768.4], [217.0, 677.5], [216.0, 563.9166666666666], [226.0, 471.5], [225.0, 747.8], [231.0, 291.0], [230.0, 288.0], [229.0, 349.0], [228.0, 297.0], [227.0, 230.0], [224.0, 206.5], [239.0, 279.5], [237.0, 276.0], [236.0, 274.0], [235.0, 332.0], [234.0, 252.5], [232.0, 290.0], [247.0, 345.0], [246.0, 364.0], [245.0, 345.0], [243.0, 324.0], [242.0, 383.0], [240.0, 321.0], [255.0, 388.0], [254.0, 361.0], [253.0, 296.0], [252.0, 424.0], [249.0, 382.0], [248.0, 389.0], [259.0, 7001.0], [269.0, 568.0], [270.0, 502.0], [268.0, 399.6666666666667], [265.0, 400.0], [264.0, 386.6666666666667], [261.0, 378.0], [260.0, 6997.0], [258.0, 296.0], [257.0, 375.0], [256.0, 379.0], [286.0, 380.0], [287.0, 418.0], [285.0, 1517.0], [284.0, 426.0], [282.0, 368.0], [281.0, 364.0], [280.0, 349.0], [279.0, 475.0], [275.0, 501.0], [274.0, 454.0], [273.0, 351.0], [272.0, 467.5], [276.0, 487.0], [303.0, 381.0], [302.0, 372.3333333333333], [299.0, 466.5], [297.0, 379.75], [293.0, 451.0], [291.0, 384.5], [289.0, 434.0], [288.0, 417.0], [318.0, 427.0], [319.0, 857.0], [317.0, 460.5], [315.0, 421.0], [314.0, 471.0], [313.0, 473.0], [311.0, 471.0], [309.0, 596.0], [307.0, 505.0], [306.0, 458.0], [305.0, 527.0], [333.0, 1070.6666666666667], [321.0, 1803.5], [320.0, 1374.0], [322.0, 1087.0], [332.0, 379.0], [323.0, 396.0], [324.0, 1763.0], [325.0, 416.5], [326.0, 460.0], [331.0, 1852.0], [330.0, 1470.3333333333335], [329.0, 1347.0], [328.0, 547.0], [335.0, 1313.5], [334.0, 419.0], [351.0, 529.0], [343.0, 952.0], [340.0, 1519.5], [344.0, 1224.0], [345.0, 948.0], [350.0, 545.0], [349.0, 537.0], [348.0, 536.0], [339.0, 613.0], [338.0, 416.0], [337.0, 662.0], [336.0, 417.0], [347.0, 1309.0], [346.0, 1310.0], [367.0, 962.0], [365.0, 2095.5], [364.0, 1510.5], [354.0, 550.0], [353.0, 898.5], [366.0, 845.5], [363.0, 537.0], [362.0, 479.0], [361.0, 520.0], [360.0, 507.0], [359.0, 534.0], [358.0, 665.0], [357.0, 655.0], [356.0, 508.0], [382.0, 1671.0], [376.0, 694.6666666666666], [380.0, 1721.0], [383.0, 1186.6666666666667], [381.0, 549.0], [379.0, 903.0], [378.0, 470.0], [377.0, 1110.0], [374.0, 873.0], [369.0, 642.0], [368.0, 1294.0], [371.0, 485.0], [370.0, 1110.0], [373.0, 877.0], [372.0, 947.0], [398.0, 754.0], [397.0, 924.5], [399.0, 1524.0], [396.0, 750.0], [395.0, 751.0], [394.0, 1639.0], [393.0, 2208.0], [392.0, 659.0], [391.0, 2022.0], [385.0, 487.0], [387.0, 524.0], [386.0, 826.0], [390.0, 698.0], [389.0, 4710.0], [388.0, 813.0], [414.0, 2296.5], [409.0, 844.5], [408.0, 1048.0], [407.0, 1548.5], [406.0, 1465.0], [404.0, 476.0], [411.0, 1665.25], [415.0, 1352.0], [413.0, 1557.0], [412.0, 1171.0], [403.0, 1503.0], [402.0, 994.0], [401.0, 1511.0], [400.0, 1462.0], [430.0, 583.0], [431.0, 1214.0], [429.0, 1530.0], [428.0, 675.0], [427.0, 5186.0], [426.0, 1306.0], [425.0, 1337.0], [424.0, 2776.0], [423.0, 1487.0], [417.0, 1167.0], [416.0, 1170.0], [419.0, 1165.0], [418.0, 685.0], [422.0, 455.0], [421.0, 1140.0], [420.0, 1141.0], [433.0, 1601.25], [434.0, 1092.8], [436.0, 717.5], [440.0, 829.3333333333334], [443.0, 780.0], [441.0, 1413.0], [447.0, 287.0], [439.0, 1111.0], [437.0, 802.4], [438.0, 559.0], [435.0, 902.0], [446.0, 1775.6], [445.0, 1436.5], [444.0, 658.0], [462.0, 723.0], [460.0, 1150.0], [463.0, 718.0], [461.0, 744.0], [459.0, 1174.5], [457.0, 567.0], [456.0, 567.0], [455.0, 438.0], [449.0, 1272.0], [451.0, 913.0], [450.0, 913.0], [454.0, 850.5], [452.0, 912.0], [477.0, 1479.25], [464.0, 909.5], [467.0, 914.3333333333334], [466.0, 1967.0], [465.0, 1117.0], [471.0, 1775.3333333333333], [470.0, 1390.5], [469.0, 971.6666666666666], [478.0, 1466.0], [479.0, 1229.3333333333333], [475.0, 705.0], [474.0, 813.0], [472.0, 808.0], [476.0, 1490.5], [492.0, 1445.5], [480.0, 1820.5], [487.0, 850.5], [485.0, 999.0], [484.0, 859.5], [481.0, 1315.142857142857], [482.0, 1344.0], [483.0, 904.0], [495.0, 1526.5], [488.0, 848.0], [494.0, 1345.0], [493.0, 319.0], [490.0, 558.0], [489.0, 933.0], [508.0, 647.0], [496.0, 2695.5], [497.0, 1428.0], [499.0, 512.0], [498.0, 645.0], [502.0, 1660.5], [501.0, 1151.0], [500.0, 1578.0], [511.0, 1294.0], [507.0, 402.0], [506.0, 652.0], [505.0, 464.0], [504.0, 1097.5], [541.0, 1813.0], [538.0, 1963.0], [536.0, 2145.0], [518.0, 1147.0], [517.0, 685.0], [515.0, 534.3333333333334], [512.0, 1471.3333333333333], [527.0, 827.0], [526.0, 1242.0], [525.0, 995.0], [524.0, 1119.5], [522.0, 620.3333333333334], [521.0, 1249.0], [537.0, 2280.5], [543.0, 1426.0], [542.0, 1248.0], [540.0, 1179.5], [535.0, 2643.0], [534.0, 1050.0], [533.0, 410.0], [532.0, 1182.0], [531.0, 1213.0], [530.0, 815.0], [529.0, 1265.0], [528.0, 824.0], [569.0, 1750.8181818181818], [574.0, 1993.133333333333], [546.0, 1332.25], [547.0, 2272.5], [549.0, 818.0], [548.0, 912.0], [568.0, 2012.857142857143], [551.0, 2144.0], [570.0, 1864.1999999999998], [573.0, 1885.2727272727275], [572.0, 1786.3636363636363], [571.0, 1923.4444444444443], [555.0, 1906.0], [553.0, 963.0], [552.0, 1158.0], [557.0, 1213.6666666666667], [559.0, 951.0], [558.0, 958.0], [560.0, 2005.5], [561.0, 2000.75], [562.0, 2409.0], [564.0, 1165.6], [565.0, 2039.2857142857142], [567.0, 1926.3333333333335], [566.0, 2581.0], [563.0, 1641.5], [575.0, 1877.888888888889], [576.0, 2044.25], [578.0, 3274.0], [579.0, 1737.6666666666665], [577.0, 1935.2857142857144], [1.0, 68.0]], "isOverall": false, "label": "Create Order", "isController": false}, {"data": [[321.5810000000004, 875.7849999999986]], "isOverall": false, "label": "Create Order-Aggregated", "isController": false}], "supportsControllersDiscrimination": true, "maxX": 579.0, "title": "Time VS Threads"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    axisLabel: "Number of active threads",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response times in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: { noColumns: 2,show: true, container: '#legendTimeVsThreads' },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s: At %x.2 active threads, Average response time was %y.2 ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesTimeVsThreads"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotTimesVsThreads"), dataset, options);
            // setup overview
            $.plot($("#overviewTimesVsThreads"), dataset, prepareOverviewOptions(options));
        }
};

// Time vs threads
function refreshTimeVsThreads(){
    var infos = timeVsThreadsInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTimeVsThreads");
        return;
    }
    if(isGraph($("#flotTimesVsThreads"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTimeVsThreads");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTimesVsThreads", "#overviewTimesVsThreads");
        $('#footerTimeVsThreads .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var bytesThroughputOverTimeInfos = {
        data : {"result": {"minY": 13579.683333333332, "minX": 1.72499028E12, "maxY": 22077.6, "series": [{"data": [[1.72499028E12, 13579.683333333332]], "isOverall": false, "label": "Bytes received per second", "isController": false}, {"data": [[1.72499028E12, 22077.6]], "isOverall": false, "label": "Bytes sent per second", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72499028E12, "title": "Bytes Throughput Over Time"}},
        getOptions : function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity) ,
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Bytes / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendBytesThroughputOverTime'
                },
                selection: {
                    mode: "xy"
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y"
                }
            };
        },
        createGraph : function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesBytesThroughputOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotBytesThroughputOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewBytesThroughputOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Bytes throughput Over Time
function refreshBytesThroughputOverTime(fixTimestamps) {
    var infos = bytesThroughputOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotBytesThroughputOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesBytesThroughputOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotBytesThroughputOverTime", "#overviewBytesThroughputOverTime");
        $('#footerBytesThroughputOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var responseTimesOverTimeInfos = {
        data: {"result": {"minY": 875.7849999999986, "minX": 1.72499028E12, "maxY": 3700.5049999999956, "series": [{"data": [[1.72499028E12, 3700.5049999999956]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[1.72499028E12, 875.7849999999986]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72499028E12, "title": "Response Time Over Time"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average response time was %y ms"
                }
            };
        },
        createGraph: function() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Times Over Time
function refreshResponseTimeOverTime(fixTimestamps) {
    var infos = responseTimesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyResponseTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimesOverTime"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimesOverTime", "#overviewResponseTimesOverTime");
        $('#footerResponseTimesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var latenciesOverTimeInfos = {
        data: {"result": {"minY": 875.7010000000006, "minX": 1.72499028E12, "maxY": 3695.8709999999983, "series": [{"data": [[1.72499028E12, 3695.8709999999983]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[1.72499028E12, 875.7010000000006]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72499028E12, "title": "Latencies Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average response latencies in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendLatenciesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average latency was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesLatenciesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotLatenciesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewLatenciesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Latencies Over Time
function refreshLatenciesOverTime(fixTimestamps) {
    var infos = latenciesOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyLatenciesOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotLatenciesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesLatenciesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotLatenciesOverTime", "#overviewLatenciesOverTime");
        $('#footerLatenciesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var connectTimeOverTimeInfos = {
        data: {"result": {"minY": 21.93299999999998, "minX": 1.72499028E12, "maxY": 796.7840000000002, "series": [{"data": [[1.72499028E12, 796.7840000000002]], "isOverall": false, "label": "Prepare Order", "isController": false}, {"data": [[1.72499028E12, 21.93299999999998]], "isOverall": false, "label": "Create Order", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72499028E12, "title": "Connect Time Over Time"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getConnectTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Average Connect Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendConnectTimeOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Average connect time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesConnectTimeOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotConnectTimeOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewConnectTimeOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Connect Time Over Time
function refreshConnectTimeOverTime(fixTimestamps) {
    var infos = connectTimeOverTimeInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyConnectTimeOverTime");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotConnectTimeOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesConnectTimeOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotConnectTimeOverTime", "#overviewConnectTimeOverTime");
        $('#footerConnectTimeOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var responseTimePercentilesOverTimeInfos = {
        data: {"result": {"minY": 26.0, "minX": 1.72499028E12, "maxY": 8762.0, "series": [{"data": [[1.72499028E12, 8762.0]], "isOverall": false, "label": "Max", "isController": false}, {"data": [[1.72499028E12, 26.0]], "isOverall": false, "label": "Min", "isController": false}, {"data": [[1.72499028E12, 5027.5]], "isOverall": false, "label": "90th percentile", "isController": false}, {"data": [[1.72499028E12, 8035.450000000001]], "isOverall": false, "label": "99th percentile", "isController": false}, {"data": [[1.72499028E12, 1565.5]], "isOverall": false, "label": "Median", "isController": false}, {"data": [[1.72499028E12, 5893.5]], "isOverall": false, "label": "95th percentile", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72499028E12, "title": "Response Time Percentiles Over Time (successful requests only)"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true,
                        fill: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Response Time in ms",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: '#legendResponseTimePercentilesOverTime'
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s : at %x Response time was %y ms"
                }
            };
        },
        createGraph: function () {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesResponseTimePercentilesOverTime"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotResponseTimePercentilesOverTime"), dataset, options);
            // setup overview
            $.plot($("#overviewResponseTimePercentilesOverTime"), dataset, prepareOverviewOptions(options));
        }
};

// Response Time Percentiles Over Time
function refreshResponseTimePercentilesOverTime(fixTimestamps) {
    var infos = responseTimePercentilesOverTimeInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotResponseTimePercentilesOverTime"))) {
        infos.createGraph();
    }else {
        var choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimePercentilesOverTime", "#overviewResponseTimePercentilesOverTime");
        $('#footerResponseTimePercentilesOverTime .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var responseTimeVsRequestInfos = {
    data: {"result": {"minY": 93.0, "minX": 20.0, "maxY": 6999.0, "series": [{"data": [[137.0, 93.0], [151.0, 2943.5], [201.0, 1055.0], [50.0, 2635.5], [205.0, 1674.5], [57.0, 3761.0], [65.0, 643.0], [267.0, 2623.0], [20.0, 214.0], [22.0, 625.5], [96.0, 1498.5], [103.0, 3453.0], [403.0, 386.0], [127.0, 3149.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[267.0, 2492.0], [151.0, 203.0], [96.0, 153.5], [205.0, 409.0], [403.0, 6999.0], [127.0, 152.5]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 403.0, "title": "Response Time Vs Request"}},
    getOptions: function() {
        return {
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Response Time in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: {
                noColumns: 2,
                show: true,
                container: '#legendResponseTimeVsRequest'
            },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median response time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesResponseTimeVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotResponseTimeVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewResponseTimeVsRequest"), dataset, prepareOverviewOptions(options));

    }
};

// Response Time vs Request
function refreshResponseTimeVsRequest() {
    var infos = responseTimeVsRequestInfos;
    prepareSeries(infos.data);
    if (isGraph($("#flotResponseTimeVsRequest"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesResponseTimeVsRequest");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotResponseTimeVsRequest", "#overviewResponseTimeVsRequest");
        $('#footerResponseRimeVsRequest .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};


var latenciesVsRequestInfos = {
    data: {"result": {"minY": 0.0, "minX": 20.0, "maxY": 6999.0, "series": [{"data": [[137.0, 93.0], [151.0, 2943.5], [201.0, 1055.0], [50.0, 2634.5], [205.0, 1674.5], [57.0, 3761.0], [65.0, 643.0], [267.0, 2623.0], [20.0, 209.0], [22.0, 625.5], [96.0, 1486.0], [103.0, 3453.0], [403.0, 386.0], [127.0, 3149.0]], "isOverall": false, "label": "Successes", "isController": false}, {"data": [[267.0, 2464.5], [151.0, 0.0], [96.0, 0.0], [205.0, 0.0], [403.0, 6999.0], [127.0, 0.0]], "isOverall": false, "label": "Failures", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 1000, "maxX": 403.0, "title": "Latencies Vs Request"}},
    getOptions: function() {
        return{
            series: {
                lines: {
                    show: false
                },
                points: {
                    show: true
                }
            },
            xaxis: {
                axisLabel: "Global number of requests per second",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            yaxis: {
                axisLabel: "Median Latency in ms",
                axisLabelUseCanvas: true,
                axisLabelFontSizePixels: 12,
                axisLabelFontFamily: 'Verdana, Arial',
                axisLabelPadding: 20,
            },
            legend: { noColumns: 2,show: true, container: '#legendLatencyVsRequest' },
            selection: {
                mode: 'xy'
            },
            grid: {
                hoverable: true // IMPORTANT! this is needed for tooltip to work
            },
            tooltip: true,
            tooltipOpts: {
                content: "%s : Median Latency time at %x req/s was %y ms"
            },
            colors: ["#9ACD32", "#FF6347"]
        };
    },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesLatencyVsRequest"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotLatenciesVsRequest"), dataset, options);
        // setup overview
        $.plot($("#overviewLatenciesVsRequest"), dataset, prepareOverviewOptions(options));
    }
};

// Latencies vs Request
function refreshLatenciesVsRequest() {
        var infos = latenciesVsRequestInfos;
        prepareSeries(infos.data);
        if(isGraph($("#flotLatenciesVsRequest"))){
            infos.createGraph();
        }else{
            var choiceContainer = $("#choicesLatencyVsRequest");
            createLegend(choiceContainer, infos);
            infos.createGraph();
            setGraphZoomable("#flotLatenciesVsRequest", "#overviewLatenciesVsRequest");
            $('#footerLatenciesVsRequest .legendColorBox > div').each(function(i){
                $(this).clone().prependTo(choiceContainer.find("li").eq(i));
            });
        }
};

var hitsPerSecondInfos = {
        data: {"result": {"minY": 33.333333333333336, "minX": 1.72499028E12, "maxY": 33.333333333333336, "series": [{"data": [[1.72499028E12, 33.333333333333336]], "isOverall": false, "label": "hitsPerSecond", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72499028E12, "title": "Hits Per Second"}},
        getOptions: function() {
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of hits / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendHitsPerSecond"
                },
                selection: {
                    mode : 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y.2 hits/sec"
                }
            };
        },
        createGraph: function createGraph() {
            var data = this.data;
            var dataset = prepareData(data.result.series, $("#choicesHitsPerSecond"));
            var options = this.getOptions();
            prepareOptions(options, data);
            $.plot($("#flotHitsPerSecond"), dataset, options);
            // setup overview
            $.plot($("#overviewHitsPerSecond"), dataset, prepareOverviewOptions(options));
        }
};

// Hits per second
function refreshHitsPerSecond(fixTimestamps) {
    var infos = hitsPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if (isGraph($("#flotHitsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesHitsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotHitsPerSecond", "#overviewHitsPerSecond");
        $('#footerHitsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
}

var codesPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.72499028E12, "maxY": 16.533333333333335, "series": [{"data": [[1.72499028E12, 16.533333333333335]], "isOverall": false, "label": "200", "isController": false}, {"data": [[1.72499028E12, 16.533333333333335]], "isOverall": false, "label": "202", "isController": false}, {"data": [[1.72499028E12, 0.13333333333333333]], "isOverall": false, "label": "404", "isController": false}, {"data": [[1.72499028E12, 0.13333333333333333]], "isOverall": false, "label": "Non HTTP response code: java.net.SocketException", "isController": false}], "supportsControllersDiscrimination": false, "granularity": 60000, "maxX": 1.72499028E12, "title": "Codes Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of responses / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendCodesPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "Number of Response Codes %s at %x was %y.2 responses / sec"
                }
            };
        },
    createGraph: function() {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesCodesPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotCodesPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewCodesPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Codes per second
function refreshCodesPerSecond(fixTimestamps) {
    var infos = codesPerSecondInfos;
    prepareSeries(infos.data);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotCodesPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesCodesPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotCodesPerSecond", "#overviewCodesPerSecond");
        $('#footerCodesPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var transactionsPerSecondInfos = {
        data: {"result": {"minY": 0.13333333333333333, "minX": 1.72499028E12, "maxY": 16.533333333333335, "series": [{"data": [[1.72499028E12, 16.533333333333335]], "isOverall": false, "label": "Create Order-success", "isController": false}, {"data": [[1.72499028E12, 16.533333333333335]], "isOverall": false, "label": "Prepare Order-success", "isController": false}, {"data": [[1.72499028E12, 0.13333333333333333]], "isOverall": false, "label": "Prepare Order-failure", "isController": false}, {"data": [[1.72499028E12, 0.13333333333333333]], "isOverall": false, "label": "Create Order-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72499028E12, "title": "Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTransactionsPerSecond"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                }
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTransactionsPerSecond"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTransactionsPerSecond"), dataset, options);
        // setup overview
        $.plot($("#overviewTransactionsPerSecond"), dataset, prepareOverviewOptions(options));
    }
};

// Transactions per second
function refreshTransactionsPerSecond(fixTimestamps) {
    var infos = transactionsPerSecondInfos;
    prepareSeries(infos.data);
    if(infos.data.result.series.length == 0) {
        setEmptyGraph("#bodyTransactionsPerSecond");
        return;
    }
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTransactionsPerSecond"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTransactionsPerSecond");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTransactionsPerSecond", "#overviewTransactionsPerSecond");
        $('#footerTransactionsPerSecond .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

var totalTPSInfos = {
        data: {"result": {"minY": 0.26666666666666666, "minX": 1.72499028E12, "maxY": 33.06666666666667, "series": [{"data": [[1.72499028E12, 33.06666666666667]], "isOverall": false, "label": "Transaction-success", "isController": false}, {"data": [[1.72499028E12, 0.26666666666666666]], "isOverall": false, "label": "Transaction-failure", "isController": false}], "supportsControllersDiscrimination": true, "granularity": 60000, "maxX": 1.72499028E12, "title": "Total Transactions Per Second"}},
        getOptions: function(){
            return {
                series: {
                    lines: {
                        show: true
                    },
                    points: {
                        show: true
                    }
                },
                xaxis: {
                    mode: "time",
                    timeformat: getTimeFormat(this.data.result.granularity),
                    axisLabel: getElapsedTimeLabel(this.data.result.granularity),
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20,
                },
                yaxis: {
                    axisLabel: "Number of transactions / sec",
                    axisLabelUseCanvas: true,
                    axisLabelFontSizePixels: 12,
                    axisLabelFontFamily: 'Verdana, Arial',
                    axisLabelPadding: 20
                },
                legend: {
                    noColumns: 2,
                    show: true,
                    container: "#legendTotalTPS"
                },
                selection: {
                    mode: 'xy'
                },
                grid: {
                    hoverable: true // IMPORTANT! this is needed for tooltip to
                                    // work
                },
                tooltip: true,
                tooltipOpts: {
                    content: "%s at %x was %y transactions / sec"
                },
                colors: ["#9ACD32", "#FF6347"]
            };
        },
    createGraph: function () {
        var data = this.data;
        var dataset = prepareData(data.result.series, $("#choicesTotalTPS"));
        var options = this.getOptions();
        prepareOptions(options, data);
        $.plot($("#flotTotalTPS"), dataset, options);
        // setup overview
        $.plot($("#overviewTotalTPS"), dataset, prepareOverviewOptions(options));
    }
};

// Total Transactions per second
function refreshTotalTPS(fixTimestamps) {
    var infos = totalTPSInfos;
    // We want to ignore seriesFilter
    prepareSeries(infos.data, false, true);
    if(fixTimestamps) {
        fixTimeStamps(infos.data.result.series, 32400000);
    }
    if(isGraph($("#flotTotalTPS"))){
        infos.createGraph();
    }else{
        var choiceContainer = $("#choicesTotalTPS");
        createLegend(choiceContainer, infos);
        infos.createGraph();
        setGraphZoomable("#flotTotalTPS", "#overviewTotalTPS");
        $('#footerTotalTPS .legendColorBox > div').each(function(i){
            $(this).clone().prependTo(choiceContainer.find("li").eq(i));
        });
    }
};

// Collapse the graph matching the specified DOM element depending the collapsed
// status
function collapse(elem, collapsed){
    if(collapsed){
        $(elem).parent().find(".fa-chevron-up").removeClass("fa-chevron-up").addClass("fa-chevron-down");
    } else {
        $(elem).parent().find(".fa-chevron-down").removeClass("fa-chevron-down").addClass("fa-chevron-up");
        if (elem.id == "bodyBytesThroughputOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshBytesThroughputOverTime(true);
            }
            document.location.href="#bytesThroughputOverTime";
        } else if (elem.id == "bodyLatenciesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesOverTime(true);
            }
            document.location.href="#latenciesOverTime";
        } else if (elem.id == "bodyCustomGraph") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCustomGraph(true);
            }
            document.location.href="#responseCustomGraph";
        } else if (elem.id == "bodyConnectTimeOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshConnectTimeOverTime(true);
            }
            document.location.href="#connectTimeOverTime";
        } else if (elem.id == "bodyResponseTimePercentilesOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimePercentilesOverTime(true);
            }
            document.location.href="#responseTimePercentilesOverTime";
        } else if (elem.id == "bodyResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeDistribution();
            }
            document.location.href="#responseTimeDistribution" ;
        } else if (elem.id == "bodySyntheticResponseTimeDistribution") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshSyntheticResponseTimeDistribution();
            }
            document.location.href="#syntheticResponseTimeDistribution" ;
        } else if (elem.id == "bodyActiveThreadsOverTime") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshActiveThreadsOverTime(true);
            }
            document.location.href="#activeThreadsOverTime";
        } else if (elem.id == "bodyTimeVsThreads") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTimeVsThreads();
            }
            document.location.href="#timeVsThreads" ;
        } else if (elem.id == "bodyCodesPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshCodesPerSecond(true);
            }
            document.location.href="#codesPerSecond";
        } else if (elem.id == "bodyTransactionsPerSecond") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTransactionsPerSecond(true);
            }
            document.location.href="#transactionsPerSecond";
        } else if (elem.id == "bodyTotalTPS") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshTotalTPS(true);
            }
            document.location.href="#totalTPS";
        } else if (elem.id == "bodyResponseTimeVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshResponseTimeVsRequest();
            }
            document.location.href="#responseTimeVsRequest";
        } else if (elem.id == "bodyLatenciesVsRequest") {
            if (isGraph($(elem).find('.flot-chart-content')) == false) {
                refreshLatenciesVsRequest();
            }
            document.location.href="#latencyVsRequest";
        }
    }
}

/*
 * Activates or deactivates all series of the specified graph (represented by id parameter)
 * depending on checked argument.
 */
function toggleAll(id, checked){
    var placeholder = document.getElementById(id);

    var cases = $(placeholder).find(':checkbox');
    cases.prop('checked', checked);
    $(cases).parent().children().children().toggleClass("legend-disabled", !checked);

    var choiceContainer;
    if ( id == "choicesBytesThroughputOverTime"){
        choiceContainer = $("#choicesBytesThroughputOverTime");
        refreshBytesThroughputOverTime(false);
    } else if(id == "choicesResponseTimesOverTime"){
        choiceContainer = $("#choicesResponseTimesOverTime");
        refreshResponseTimeOverTime(false);
    }else if(id == "choicesResponseCustomGraph"){
        choiceContainer = $("#choicesResponseCustomGraph");
        refreshCustomGraph(false);
    } else if ( id == "choicesLatenciesOverTime"){
        choiceContainer = $("#choicesLatenciesOverTime");
        refreshLatenciesOverTime(false);
    } else if ( id == "choicesConnectTimeOverTime"){
        choiceContainer = $("#choicesConnectTimeOverTime");
        refreshConnectTimeOverTime(false);
    } else if ( id == "choicesResponseTimePercentilesOverTime"){
        choiceContainer = $("#choicesResponseTimePercentilesOverTime");
        refreshResponseTimePercentilesOverTime(false);
    } else if ( id == "choicesResponseTimePercentiles"){
        choiceContainer = $("#choicesResponseTimePercentiles");
        refreshResponseTimePercentiles();
    } else if(id == "choicesActiveThreadsOverTime"){
        choiceContainer = $("#choicesActiveThreadsOverTime");
        refreshActiveThreadsOverTime(false);
    } else if ( id == "choicesTimeVsThreads"){
        choiceContainer = $("#choicesTimeVsThreads");
        refreshTimeVsThreads();
    } else if ( id == "choicesSyntheticResponseTimeDistribution"){
        choiceContainer = $("#choicesSyntheticResponseTimeDistribution");
        refreshSyntheticResponseTimeDistribution();
    } else if ( id == "choicesResponseTimeDistribution"){
        choiceContainer = $("#choicesResponseTimeDistribution");
        refreshResponseTimeDistribution();
    } else if ( id == "choicesHitsPerSecond"){
        choiceContainer = $("#choicesHitsPerSecond");
        refreshHitsPerSecond(false);
    } else if(id == "choicesCodesPerSecond"){
        choiceContainer = $("#choicesCodesPerSecond");
        refreshCodesPerSecond(false);
    } else if ( id == "choicesTransactionsPerSecond"){
        choiceContainer = $("#choicesTransactionsPerSecond");
        refreshTransactionsPerSecond(false);
    } else if ( id == "choicesTotalTPS"){
        choiceContainer = $("#choicesTotalTPS");
        refreshTotalTPS(false);
    } else if ( id == "choicesResponseTimeVsRequest"){
        choiceContainer = $("#choicesResponseTimeVsRequest");
        refreshResponseTimeVsRequest();
    } else if ( id == "choicesLatencyVsRequest"){
        choiceContainer = $("#choicesLatencyVsRequest");
        refreshLatenciesVsRequest();
    }
    var color = checked ? "black" : "#818181";
    if(choiceContainer != null) {
        choiceContainer.find("label").each(function(){
            this.style.color = color;
        });
    }
}

